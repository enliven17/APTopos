{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/management/asyncQueue.ts"],"sourcesContent":["/**\n * The AsyncQueue class is an async-aware data structure that provides a queue-like\n * behavior for managing asynchronous tasks or operations.\n * It allows to enqueue items and dequeue them asynchronously.\n * This is not thread-safe, but it is async concurrency safe, and\n * it does not guarantee ordering for those that call into and await on enqueue.\n * @group Implementation\n * @category Transactions\n */\n\ninterface PendingDequeue<T> {\n  resolve: (value: T) => void;\n  reject: (reason?: AsyncQueueCancelledError) => void;\n}\n\nexport class AsyncQueue<T> {\n  readonly queue: T[] = [];\n\n  // The pendingDequeue is used to handle the resolution of promises when items are enqueued and dequeued.\n  private pendingDequeue: PendingDequeue<T>[] = [];\n\n  private cancelled: boolean = false;\n\n  /**\n   * Adds an item to the queue. If there are pending dequeued promises, it resolves the oldest promise with the enqueued item\n   * immediately; otherwise, it adds the item to the queue.\n   *\n   * @param item - The item to be added to the queue.\n   * @group Implementation\n   * @category Transactions\n   */\n  enqueue(item: T): void {\n    this.cancelled = false;\n\n    if (this.pendingDequeue.length > 0) {\n      const promise = this.pendingDequeue.shift();\n\n      promise?.resolve(item);\n\n      return;\n    }\n\n    this.queue.push(item);\n  }\n\n  /**\n   * Dequeues the next item from the queue and returns a promise that resolves to it.\n   * If the queue is empty, it creates a new promise that will be resolved when an item is enqueued.\n   *\n   * @returns Promise<T>\n   * @group Implementation\n   * @category Transactions\n   */\n  async dequeue(): Promise<T> {\n    if (this.queue.length > 0) {\n      return Promise.resolve(this.queue.shift()!);\n    }\n\n    return new Promise<T>((resolve, reject) => {\n      this.pendingDequeue.push({ resolve, reject });\n    });\n  }\n\n  /**\n   * Determine whether the queue is empty.\n   *\n   * @returns boolean - Returns true if the queue has no elements, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isEmpty(): boolean {\n    return this.queue.length === 0;\n  }\n\n  /**\n   * Cancels all pending promises in the queue and rejects them with an AsyncQueueCancelledError.\n   * This ensures that any awaiting code can handle the cancellation appropriately.\n   *\n   * @returns {void}\n   * @group Implementation\n   * @category Transactions\n   */\n  cancel(): void {\n    this.cancelled = true;\n\n    this.pendingDequeue.forEach(async ({ reject }) => {\n      reject(new AsyncQueueCancelledError(\"Task cancelled\"));\n    });\n\n    this.pendingDequeue = [];\n\n    this.queue.length = 0;\n  }\n\n  /**\n   * Determine whether the queue has been cancelled.\n   *\n   * @returns boolean - Returns true if the queue is cancelled, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isCancelled(): boolean {\n    return this.cancelled;\n  }\n\n  /**\n   * Retrieve the length of the pending dequeue.\n   *\n   * @returns number - The number of items currently in the pending dequeue.\n   * @group Implementation\n   * @category Transactions\n   */\n  pendingDequeueLength(): number {\n    return this.pendingDequeue.length;\n  }\n}\n\n/**\n * Represents an error that occurs when an asynchronous queue operation is cancelled.\n * This error extends the built-in Error class to provide additional context for cancellation events.\n *\n * @extends Error\n * @group Implementation\n * @category Transactions\n */\nexport class AsyncQueueCancelledError extends Error {}\n"],"names":["AsyncQueue","item","resolve","reject","AsyncQueueCancelledError"],"mappings":";;;;AAeO,IAAMA,IAAN,KAAoB;IAApB,aAAA;QACL,IAAA,CAAS,KAAA,GAAa,CAAC,CAAA;QAGvB,IAAA,CAAQ,cAAA,GAAsC,CAAC,CAAA;QAE/C,IAAA,CAAQ,SAAA,GAAqB,CAAA;IAAA;IAU7B,QAAQC,CAAAA,EAAe;QAGrB,IAFA,IAAA,CAAK,SAAA,GAAY,CAAA,GAEb,IAAA,CAAK,cAAA,CAAe,MAAA,GAAS,GAAG;YAClB,IAAA,CAAK,cAAA,CAAe,KAAA,CAAM,GAEjC,QAAQA,CAAI;YAErB;QACF;QAEA,IAAA,CAAK,KAAA,CAAM,IAAA,CAAKA,CAAI;IACtB;IAUA,MAAM,UAAsB;QAC1B,OAAI,IAAA,CAAK,KAAA,CAAM,MAAA,GAAS,IACf,QAAQ,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,CAAE,IAGrC,IAAI,QAAW,CAACC,GAASC,IAAW;YACzC,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK;gBAAE,SAAAD;gBAAS,QAAAC;YAAO,CAAC;QAC9C,CAAC;IACH;IASA,UAAmB;QACjB,OAAO,IAAA,CAAK,KAAA,CAAM,MAAA,KAAW;IAC/B;IAUA,SAAe;QACb,IAAA,CAAK,SAAA,GAAY,CAAA,GAEjB,IAAA,CAAK,cAAA,CAAe,OAAA,CAAQ,OAAO,EAAE,QAAAA,CAAO,EAAA,GAAM;YAChDA,EAAO,IAAIC,EAAyB,gBAAgB,CAAC;QACvD,CAAC,GAED,IAAA,CAAK,cAAA,GAAiB,CAAC,CAAA,EAEvB,IAAA,CAAK,KAAA,CAAM,MAAA,GAAS;IACtB;IASA,cAAuB;QACrB,OAAO,IAAA,CAAK;IACd;IASA,uBAA+B;QAC7B,OAAO,IAAA,CAAK,cAAA,CAAe;IAC7B;AACF,GAUaA,IAAN,cAAuC,KAAM;AAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/consts.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from \"../types\";\n\n// Upper bound values for uint8, uint16, uint64 etc.  These are all derived as\n// 2^N - 1, where N is the number of bits in the type.\nexport const MAX_U8_NUMBER: Uint8 = 255;\nexport const MAX_U16_NUMBER: Uint16 = 65535;\nexport const MAX_U32_NUMBER: Uint32 = 4294967295;\nexport const MAX_U64_BIG_INT: Uint64 = 18446744073709551615n;\nexport const MAX_U128_BIG_INT: Uint128 = 340282366920938463463374607431768211455n;\nexport const MAX_U256_BIG_INT: Uint256 =\n  115792089237316195423570985008687907853269984665640564039457584007913129639935n;\n"],"names":["MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U32_NUMBER","MAX_U64_BIG_INT","MAX_U128_BIG_INT","MAX_U256_BIG_INT"],"mappings":";;;;;;;;AAOO,IAAMA,IAAuB,KACvBC,IAAyB,OACzBC,IAAyB,YACzBC,IAA0B,qBAAA,EAC1BC,IAA4B,wCAAA,EAC5BC,IACX,+EAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/common.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This error is used to explain why parsing failed.\n * @group Implementation\n * @category Serialization\n */\nexport class ParsingError<T> extends Error {\n  /**\n   * This provides a programmatic way to access why parsing failed. Downstream devs\n   * might want to use this to build their own error messages if the default error\n   * messages are not suitable for their use case. This should be an enum.\n   * @group Implementation\n   * @category Serialization\n   */\n  public invalidReason: T;\n\n  /**\n   * Creates an instance of the error with a specified message and invalid reason.\n   *\n   * @param message The error message that describes the issue.\n   * @param invalidReason The reason why the input is considered invalid.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(message: string, invalidReason: T) {\n    super(message);\n    this.invalidReason = invalidReason;\n  }\n}\n\n/**\n * Whereas ParsingError is thrown when parsing fails, e.g. in a fromString function,\n * this type is returned from \"defensive\" functions like isValid.\n * @group Implementation\n * @category Serialization\n */\nexport type ParsingResult<T> = {\n  /**\n   * True if valid, false otherwise.\n   * @group Implementation\n   * @category Serialization\n   */\n  valid: boolean;\n\n  /**\n   * If valid is false, this will be a code explaining why parsing failed.\n   * @group Implementation\n   * @category Serialization\n   */\n  invalidReason?: T;\n\n  /**\n   * If valid is false, this will be a string explaining why parsing failed.\n   * @group Implementation\n   * @category Serialization\n   */\n  invalidReasonMessage?: string;\n};\n"],"names":["ParsingError","message","invalidReason"],"mappings":";;;AAQO,IAAMA,IAAN,cAA8B,KAAM;IAkBzC,YAAYC,CAAAA,EAAiBC,CAAAA,CAAkB;QAC7C,KAAA,CAAMD,CAAO,GACb,IAAA,CAAK,aAAA,GAAgBC;IACvB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/hex.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { HexInput } from \"../types\";\n\n/**\n * Provides reasons for parsing failures related to hexadecimal values.\n * @group Implementation\n * @category Serialization\n */\nexport enum HexInvalidReason {\n  TOO_SHORT = \"too_short\",\n  INVALID_LENGTH = \"invalid_length\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n}\n\n/**\n * NOTE: Do not use this class when working with account addresses; use AccountAddress instead.\n * When accepting hex data as input to a function, prefer to accept HexInput and\n *\n * A helper class for working with hex data. Hex data, when represented as a string,\n * generally looks like this, for example: 0xaabbcc, 45cd32, etc.\n *\n * then use the static helper methods of this class to convert it into the desired\n * format. This enables the greatest flexibility for the developer.\n *\n * Example usage:\n * ```typescript\n * getTransactionByHash(txnHash: HexInput): Promise<Transaction> {\n *   const txnHashString = Hex.fromHexInput(txnHash).toString();\n *   return await getTransactionByHashInner(txnHashString);\n * }\n * ```\n * This call to `Hex.fromHexInput().toString()` converts the HexInput to a hex string\n * with a leading 0x prefix, regardless of what the input format was.\n *\n * Other ways to chain the functions together:\n * - `Hex.fromHexString({ hexInput: \"0x1f\" }).toUint8Array()`\n * - `new Hex([1, 3]).toStringWithoutPrefix()`\n * @group Implementation\n * @category Serialization\n */\nexport class Hex {\n  private readonly data: Uint8Array;\n\n  /**\n   * Create a new Hex instance from a Uint8Array.\n   *\n   * @param data - The Uint8Array containing the data to initialize the Hex instance.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(data: Uint8Array) {\n    this.data = data;\n  }\n\n  // ===\n  // Methods for representing an instance of Hex as other types.\n  // ===\n\n  /**\n   * Get the inner hex data as a Uint8Array. The inner data is already a Uint8Array, so no conversion takes place.\n   *\n   * @returns Hex data as Uint8Array\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Get the hex data as a string without the 0x prefix.\n   *\n   * @returns Hex string without 0x prefix\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Get the hex data as a string with the 0x prefix.\n   *\n   * @returns Hex string with 0x prefix\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  // ===\n  // Methods for creating an instance of Hex from other types.\n  // ===\n\n  /**\n   * Converts a hex string into a Hex instance, allowing for both prefixed and non-prefixed formats.\n   *\n   * @param str - A hex string, with or without the 0x prefix.\n   *\n   * @throws ParsingError - If the hex string is too short, has an odd number of characters, or contains invalid hex characters.\n   *\n   * @returns Hex - The resulting Hex instance created from the provided string.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromHexString(str: string): Hex {\n    let input = str;\n\n    if (input.startsWith(\"0x\")) {\n      input = input.slice(2);\n    }\n\n    if (input.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be at least 1 char long, excluding the optional leading 0x.\",\n        HexInvalidReason.TOO_SHORT,\n      );\n    }\n\n    if (input.length % 2 !== 0) {\n      throw new ParsingError(\"Hex string must be an even number of hex characters.\", HexInvalidReason.INVALID_LENGTH);\n    }\n\n    try {\n      return new Hex(hexToBytes(input));\n    } catch (error: any) {\n      throw new ParsingError(\n        `Hex string contains invalid hex characters: ${error?.message}`,\n        HexInvalidReason.INVALID_HEX_CHARS,\n      );\n    }\n  }\n\n  /**\n   * Converts an instance of HexInput, which can be a string or a Uint8Array, into a Hex instance.\n   * This function is useful for transforming hexadecimal representations into a structured Hex object for further manipulation.\n   *\n   * @param hexInput - A HexInput which can be a string or Uint8Array.\n   * @returns A Hex instance created from the provided hexInput.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromHexInput(hexInput: HexInput): Hex {\n    if (hexInput instanceof Uint8Array) return new Hex(hexInput);\n    return Hex.fromHexString(hexInput);\n  }\n\n  /**\n   * Converts an instance of HexInput, which can be a string or a Uint8Array, into a Uint8Array.\n   *\n   * @param hexInput - A HexInput which can be a string or Uint8Array.\n   * @returns A Uint8Array created from the provided hexInput.\n   */\n  static hexInputToUint8Array(hexInput: HexInput): Uint8Array {\n    if (hexInput instanceof Uint8Array) return hexInput;\n    return Hex.fromHexString(hexInput).toUint8Array();\n  }\n\n  /**\n   * Converts a HexInput (string or Uint8Array) to a hex string with '0x' prefix.\n   *\n   * @param hexInput - The input to convert, either a hex string (with/without '0x' prefix) or Uint8Array\n   * @returns A hex string with '0x' prefix (e.g., \"0x1234\")\n   *\n   * @example\n   * ```typescript\n   * Hex.hexInputToString(\"1234\")        // returns \"0x1234\"\n   * Hex.hexInputToString(\"0x1234\")      // returns \"0x1234\"\n   * Hex.hexInputToString(new Uint8Array([0x12, 0x34])) // returns \"0x1234\"\n   * ```\n   */\n  static hexInputToString(hexInput: HexInput): string {\n    return Hex.fromHexInput(hexInput).toString();\n  }\n\n  /**\n   * Converts a HexInput (string or Uint8Array) to a hex string without '0x' prefix.\n   *\n   * @param hexInput - The input to convert, either a hex string (with/without '0x' prefix) or Uint8Array\n   * @returns A hex string without '0x' prefix (e.g., \"1234\")\n   *\n   * @example\n   * ```typescript\n   * Hex.hexInputToStringWithoutPrefix(\"1234\")        // returns \"1234\"\n   * Hex.hexInputToStringWithoutPrefix(\"0x1234\")      // returns \"1234\"\n   * Hex.hexInputToStringWithoutPrefix(new Uint8Array([0x12, 0x34])) // returns \"1234\"\n   * ```\n   */\n  static hexInputToStringWithoutPrefix(hexInput: HexInput): string {\n    return Hex.fromHexInput(hexInput).toStringWithoutPrefix();\n  }\n\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the provided string is a valid hexadecimal representation.\n   *\n   * @param str - A hex string representing byte data.\n   *\n   * @returns An object containing:\n   *  - valid: A boolean indicating whether the string is valid.\n   *  - invalidReason: The reason for invalidity if the string is not valid.\n   *  - invalidReasonMessage: A message explaining why the string is invalid.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isValid(str: string): ParsingResult<HexInvalidReason> {\n    try {\n      Hex.fromHexString(str);\n      return { valid: true };\n    } catch (error: any) {\n      return {\n        valid: false,\n        invalidReason: error?.invalidReason,\n        invalidReasonMessage: error?.message,\n      };\n    }\n  }\n\n  /**\n   * Determine if two Hex instances are equal by comparing their underlying byte data.\n   *\n   * @param other The Hex instance to compare to.\n   * @returns true if the Hex instances are equal, false if not.\n   * @group Implementation\n   * @category Serialization\n   */\n  equals(other: Hex): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n\nexport const hexToAsciiString = (hex: string) => new TextDecoder().decode(Hex.fromHexInput(hex).toUint8Array());\n"],"names":["bytesToHex","hexToBytes","HexInvalidReason","Hex","_Hex","data","bytesToHex","str","input","ParsingError","hexToBytes","error","hexInput","other","value","index","hexToAsciiString","hex"],"mappings":";;;;;;AAGA,OAAS,cAAAA,EAAY,cAAAC,MAAkB;;;AAShC,IAAKC,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,EAAA,SAAA,GAAY,aACZA,EAAA,cAAA,GAAiB,kBACjBA,EAAA,iBAAA,GAAoB,qBAHVA,CAAAA,CAAAA,EAAAA,KAAA,CAAA,IAgCCC,IAAN,MAAMC,CAAI;IAUf,YAAYC,CAAAA,CAAkB;QAC5B,IAAA,CAAK,IAAA,GAAOA;IACd;IAaA,eAA2B;QACzB,OAAO,IAAA,CAAK;IACd;IASA,wBAAgC;QAC9B,WAAOC,kKAAAA,EAAW,IAAA,CAAK,IAAI;IAC7B;IASA,WAAmB;QACjB,OAAO,CAAA,EAAA,EAAK,IAAA,CAAK,qBAAA,CAAsB,CAAC;IAC1C;IAiBA,OAAO,cAAcC,CAAAA,EAAkB;QACrC,IAAIC,IAAQD;QAMZ,IAJIC,EAAM,UAAA,CAAW,IAAI,KAAA,CACvBA,IAAQA,EAAM,KAAA,CAAM,CAAC,CAAA,GAGnBA,EAAM,MAAA,KAAW,GACnB,MAAM,iPAAIC,IAAAA,CACR,6FACA,WACF;QAGF,IAAID,EAAM,MAAA,GAAS,MAAM,GACvB,MAAM,iPAAIC,IAAAA,CAAa,wDAAwD,gBAA+B;QAGhH,IAAI;YACF,OAAO,IAAIL,GAAIM,qKAAAA,EAAWF,CAAK,CAAC;QAClC,EAAA,OAASG,GAAY;YACnB,MAAM,iPAAIF,IAAAA,CACR,CAAA,4CAAA,EAA+CE,GAAO,OAAO,EAAA,EAC7D,mBACF;QACF;IACF;IAWA,OAAO,aAAaC,CAAAA,EAAyB;QAC3C,OAAIA,aAAoB,aAAmB,IAAIR,EAAIQ,CAAQ,IACpDR,EAAI,aAAA,CAAcQ,CAAQ;IACnC;IAQA,OAAO,qBAAqBA,CAAAA,EAAgC;QAC1D,OAAIA,aAAoB,aAAmBA,IACpCR,EAAI,aAAA,CAAcQ,CAAQ,EAAE,YAAA,CAAa;IAClD;IAeA,OAAO,iBAAiBA,CAAAA,EAA4B;QAClD,OAAOR,EAAI,YAAA,CAAaQ,CAAQ,EAAE,QAAA,CAAS;IAC7C;IAeA,OAAO,8BAA8BA,CAAAA,EAA4B;QAC/D,OAAOR,EAAI,YAAA,CAAaQ,CAAQ,EAAE,qBAAA,CAAsB;IAC1D;IAkBA,OAAO,QAAQL,CAAAA,EAA8C;QAC3D,IAAI;YACF,OAAAH,EAAI,aAAA,CAAcG,CAAG,GACd;gBAAE,OAAO,CAAA;YAAK;QACvB,EAAA,OAASI,GAAY;YACnB,OAAO;gBACL,OAAO,CAAA;gBACP,eAAeA,GAAO;gBACtB,sBAAsBA,GAAO;YAC/B;QACF;IACF;IAUA,OAAOE,CAAAA,EAAqB;QAC1B,OAAI,IAAA,CAAK,IAAA,CAAK,MAAA,KAAWA,EAAM,IAAA,CAAK,MAAA,GAAe,CAAA,IAC5C,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,CAACC,GAAOC,IAAUD,MAAUD,EAAM,IAAA,CAAKE,CAAK,CAAC;IACtE;AACF,GAEaC,KAAoBC,IAAgB,IAAI,YAAY,EAAE,MAAA,CAAOd,EAAI,YAAA,CAAac,CAAG,EAAE,YAAA,CAAa,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/serializer.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { Hex } from \"../core/hex\";\nimport { AnyNumber, Uint16, Uint32, Uint8 } from \"../types\";\n\n/**\n * This class serves as a base class for all serializable types. It facilitates\n * composable serialization of complex types and enables the serialization of\n * instances to their BCS (Binary Canonical Serialization) representation.\n * @group Implementation\n * @category BCS\n */\nexport abstract class Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Serializes a `Serializable` value to its BCS representation.\n   * This function is the TypeScript SDK equivalent of `bcs::to_bytes` in Move.\n   * @returns the BCS representation of the Serializable instance as a byte buffer.\n   * @group Implementation\n   * @category BCS\n   */\n  bcsToBytes(): Uint8Array {\n    const serializer = new Serializer();\n    this.serialize(serializer);\n    return serializer.toUint8Array();\n  }\n\n  /**\n   * Converts the BCS-serialized bytes of a value into a Hex instance.\n   * This function provides a Hex representation of the BCS-serialized data for easier handling and manipulation.\n   * @returns A Hex instance with the BCS-serialized bytes loaded into its underlying Uint8Array.\n   * @group Implementation\n   * @category BCS\n   */\n  bcsToHex(): Hex {\n    const bcsBytes = this.bcsToBytes();\n    return Hex.fromHexInput(bcsBytes);\n  }\n\n  /**\n   * Returns the hex string representation of the `Serializable` value without the 0x prefix.\n   * @returns the hex format as a string without `0x` prefix.\n   */\n  toStringWithoutPrefix(): string {\n    return this.bcsToHex().toStringWithoutPrefix();\n  }\n\n  /**\n   * Returns the hex string representation of the `Serializable` value with the 0x prefix.\n   * @returns the hex formatas a string prefixed by `0x`.\n   */\n  toString(): string {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n}\n\n/**\n * A class for serializing various data types into a binary format.\n * It provides methods to serialize strings, bytes, numbers, and other serializable objects\n * using the Binary Coded Serialization (BCS) layout. The serialized data can be retrieved as a\n * Uint8Array.\n * @group Implementation\n * @category BCS\n */\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  /**\n   * Constructs a serializer with a buffer of size `length` bytes, 64 bytes by default.\n   * The `length` must be greater than 0.\n   *\n   * @param length - The size of the buffer in bytes.\n   * @group Implementation\n   * @category BCS\n   */\n  constructor(length: number = 64) {\n    if (length <= 0) {\n      throw new Error(\"Length needs to be greater than 0\");\n    }\n    this.buffer = new ArrayBuffer(length);\n    this.offset = 0;\n  }\n\n  /**\n   * Ensures that the internal buffer can accommodate the specified number of bytes.\n   * This function dynamically resizes the buffer if the current size is insufficient.\n   *\n   * @param bytes - The number of bytes to ensure the buffer can handle.\n   * @group Implementation\n   * @category BCS\n   */\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  /**\n   * Appends the specified values to the buffer, ensuring that the buffer can accommodate the new data.\n   *\n   * @param {Uint8Array} values - The values to be appended to the buffer.\n   * @group Implementation\n   * @category BCS\n   */\n  protected appendToBuffer(values: Uint8Array) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  /**\n   * Serializes a value into the buffer using the provided function, ensuring the buffer can accommodate the size.\n   *\n   * @param fn - The function to serialize the value, which takes a byte offset, the value to serialize, and an optional little-endian flag.\n   * @param fn.byteOffset - The byte offset at which to write the value.\n   * @param fn.value - The numeric value to serialize into the buffer.\n   * @param fn.littleEndian - Optional flag indicating whether to use little-endian byte order (defaults to true).\n   * @group Implementation\n   * @category BCS\n   */\n  // TODO: JSDoc bytesLength and value\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported.\n   * The number of bytes in the string content is serialized first, as a uleb128-encoded u32 integer.\n   * Then the string content is serialized as UTF8 encoded bytes.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @param value - The string to serialize.\n   *\n   * @example\n   * ```typescript\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"1234abcd\");\n   * assert(serializer.toUint8Array() === new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  serializeStr(value: string) {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * This function encodes the length of the byte array as a u32 integer in uleb128 format, followed by the byte array itself.\n   * BCS layout for \"bytes\": bytes_length | bytes\n   * where bytes_length is a u32 integer encoded as a uleb128 integer, equal to the length of the bytes array.\n   * @param value - The byte array to serialize.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeBytes(value: Uint8Array) {\n    this.serializeU32AsUleb128(value.length);\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes an array of bytes with a known length, allowing for efficient deserialization without needing to serialize the\n   * length itself.\n   * When deserializing, the number of bytes to deserialize needs to be passed in.\n\n   * @param value - The Uint8Array to be serialized.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeFixedBytes(value: Uint8Array) {\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes a boolean value into a byte representation.\n   *\n   * The BCS layout for a boolean uses one byte, where \"0x01\" represents true and \"0x00\" represents false.\n   *\n   * @param value - The boolean value to serialize.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeBool(value: boolean) {\n    /**\n     * Ensures that the provided value is a boolean.\n     * This function throws an error if the value is not a boolean, helping to enforce type safety in your code.\n     *\n     * @param value - The value to be checked for boolean type.\n     * @throws {Error} Throws an error if the value is not a boolean.\n     * @group Implementation\n     * @category BCS\n     */\n    ensureBoolean(value);\n    const byteValue = value ? 1 : 0;\n    this.appendToBuffer(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a Uint8 value and appends it to the buffer.\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   *\n   * @param value - The Uint8 value to serialize.\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8) {\n    this.appendToBuffer(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * @group Implementation\n   * @category BCS\n\n   */\n\n  /**\n   * Serializes a 16-bit unsigned integer value into a binary format.\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   *\n   * @param value - The 16-bit unsigned integer value to serialize.\n   * @example\n   * ```typescript\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x34, 0x12]));\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16) {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a 32-bit unsigned integer value into a binary format.\n   * This function is useful for encoding data that needs to be stored or transmitted in a compact form.\n   * @example\n   * ```typescript\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   * @param value - The 32-bit unsigned integer value to serialize.\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32) {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a 64-bit unsigned integer into a format suitable for storage or transmission.\n   * This function breaks down the value into two 32-bit components and writes them in little-endian order.\n   *\n   * @param value - The 64-bit unsigned integer to serialize, represented as a number.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber) {\n    const low = BigInt(value) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a U128 value into a format suitable for storage or transmission.\n   *\n   * @param value - The U128 value to serialize, represented as a number.\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U64_BIG_INT;\n    const high = BigInt(value) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a U256 value into a byte representation.\n   * This function is essential for encoding large numbers in a compact format suitable for transmission or storage.\n   *\n   * @param value - The U256 value to serialize, represented as an AnyNumber.\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U128_BIG_INT;\n    const high = BigInt(value) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a 32-bit unsigned integer as a variable-length ULEB128 encoded byte array.\n   * BCS uses uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   *\n   * @param val - The 32-bit unsigned integer value to be serialized.\n   * @group Implementation\n   * @category BCS\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32) {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.appendToBuffer(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes as a Uint8Array.\n   *\n   * This function allows you to retrieve the byte representation of the buffer up to the current offset.\n   *\n   * @returns Uint8Array - The byte array representation of the buffer.\n   * @group Implementation\n   * @category BCS\n   */\n  toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n\n  /**\n   * Serializes a `Serializable` value, facilitating composable serialization.\n   *\n   * @param value The Serializable value to serialize.\n   *\n   * @returns the serializer instance\n   * @group Implementation\n   * @category BCS\n   */\n  serialize<T extends Serializable>(value: T): void {\n    // NOTE: The `serialize` method called by `value` is defined in `value`'s\n    // Serializable interface, not the one defined in this class.\n    value.serialize(this);\n  }\n\n  /**\n   * Serializes an array of BCS Serializable values to a serializer instance.\n   * The bytes are added to the serializer instance's byte buffer.\n   *\n   * @param values The array of BCS Serializable values\n   * @example\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.from(\"0x1\"),\n   *   AccountAddress.from(\"0x2\"),\n   *   AccountAddress.from(\"0xa\"),\n   *   AccountAddress.from(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   * // serializedBytes is now the BCS-serialized bytes\n   * // The equivalent value in Move would be:\n   * // `bcs::to_bytes(&vector<address> [@0x1, @0x2, @0xa, @0xb])`;\n   * @group Implementation\n   * @category BCS\n   */\n  serializeVector<T extends Serializable>(values: Array<T>): void {\n    this.serializeU32AsUleb128(values.length);\n    values.forEach((item) => {\n      item.serialize(this);\n    });\n  }\n\n  /**\n   * Serializes an optional value which can be a Serializable, string, or Uint8Array.\n   * For strings and Uint8Arrays, it uses the appropriate serialization method.\n   *\n   * @param value The value to serialize (Serializable, string, Uint8Array, or undefined)\n   * @param len Optional fixed length for Uint8Array serialization. If provided, uses serializeFixedBytes instead of serializeBytes\n   *\n   * @example\n   * ```typescript\n   * const serializer = new Serializer();\n   * serializer.serializeOption(\"hello\");  // Serializes optional string\n   * serializer.serializeOption(new Uint8Array([1, 2, 3]));  // Serializes optional bytes\n   * serializer.serializeOption(new Uint8Array([1, 2, 3]), 3);  // Serializes optional fixed-length bytes\n   * serializer.serializeOption(new AccountAddress(...));  // Serializes optional Serializable\n   * serializer.serializeOption(undefined);  // Serializes none case\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  serializeOption<T extends Serializable | string | Uint8Array>(value?: T, len?: number): void {\n    const hasValue = value !== undefined;\n    this.serializeBool(hasValue);\n    if (hasValue) {\n      if (typeof value === \"string\") {\n        this.serializeStr(value);\n      } else if (value instanceof Uint8Array) {\n        if (len !== undefined) {\n          this.serializeFixedBytes(value);\n        } else {\n          this.serializeBytes(value);\n        }\n      } else {\n        value.serialize(this);\n      }\n    }\n  }\n\n  /**\n   * @deprecated use `serializeOption` instead.\n   * Serializes an optional string, supporting UTF8 encoding.\n   * The function encodes the existence of the string first, followed by the length and content if it exists.\n   *\n   * BCS layout for optional \"string\": 1 | string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   * BCS layout for undefined: 0\n   *\n   * @param value - The optional string to serialize. If undefined, it will serialize as 0.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeOptionStr(value?: string): void {\n    if (value === undefined) {\n      this.serializeU32AsUleb128(0);\n    } else {\n      this.serializeU32AsUleb128(1);\n      this.serializeStr(value);\n    }\n  }\n}\n\n/**\n * @group Implementation\n * @category BCS\n */\nexport function ensureBoolean(value: unknown): asserts value is boolean {\n  if (typeof value !== \"boolean\") {\n    throw new Error(`${value} is not a boolean value`);\n  }\n}\n/**\n * @group Implementation\n * @category BCS\n */\nexport const outOfRangeErrorMessage = (value: AnyNumber, min: AnyNumber, max: AnyNumber) =>\n  `${value} is out of range: [${min}, ${max}]`;\n\n/**\n * Validates that a given number is within a specified range.\n * This function throws an error if the value is outside the defined minimum and maximum bounds.\n *\n * @param value - The number to validate.\n * @param minValue - The minimum allowable value (inclusive).\n * @param maxValue - The maximum allowable value (inclusive).\n * @group Implementation\n * @category BCS\n */\nexport function validateNumberInRange<T extends AnyNumber>(value: T, minValue: T, maxValue: T) {\n  const valueBigInt = BigInt(value);\n  if (valueBigInt > BigInt(maxValue) || valueBigInt < BigInt(minValue)) {\n    throw new Error(outOfRangeErrorMessage(value, minValue, maxValue));\n  }\n}\n\n/**\n * A decorator that validates that the input argument for a function is within a specified range.\n * This ensures that the function is only called with valid input values, preventing potential errors.\n *\n * @param minValue - The input argument must be greater than or equal to this value.\n * @param maxValue - The input argument must be less than or equal to this value.\n * @group Implementation\n * @category BCS\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      validateNumberInRange(value, minValue, maxValue);\n      return childFunction.apply(this, [value]);\n    };\n\n    return descriptor;\n  };\n}\n"],"names":["Serializable","serializer","Serializer","bcsBytes","Hex","length","bytes","newBuffer","values","fn","bytesLength","value","dv","textEncoder","ensureBoolean","byteValue","low","MAX_U32_NUMBER","high","MAX_U64_BIG_INT","MAX_U128_BIG_INT","val","valueArray","item","len","hasValue","__decorateClass","checkNumberRange","MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U256_BIG_INT","outOfRangeErrorMessage","min","max","validateNumberInRange","minValue","maxValue","valueBigInt","target","propertyKey","descriptor","childFunction"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/serializable/movePrimitives.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"../consts\";\nimport { Deserializer } from \"../deserializer\";\nimport { Serializable, Serializer, ensureBoolean, validateNumberInRange } from \"../serializer\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { AnyNumber, Uint16, Uint32, Uint8, ScriptTransactionArgumentVariants } from \"../../types\";\n\n/**\n * Represents a boolean value that can be serialized and deserialized.\n * This class extends the Serializable class and provides methods to serialize\n * the boolean value for different contexts, such as entry functions and script functions.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class Bool extends Serializable implements TransactionArgument {\n  public readonly value: boolean;\n\n  /**\n   * Constructs a new instance with a specified value.\n   * This ensures that the value is validated to be within the acceptable range.\n   *\n   * @param value - The number to be validated and assigned, which must be between 0 and MAX_U256_BIG_INT.\n   * @group Implementation\n   * @category BCS\n   */\n  constructor(value: boolean) {\n    super();\n\n    /**\n     * Ensures that the provided value is of type boolean.\n     * This function throws an error if the value is not a boolean, helping to enforce type safety in your code.\n     *\n     * @param value - The value to be checked for boolean type.\n     * @throws {Error} Throws an error if the value is not a boolean.\n     * @group Implementation\n     * @category BCS\n     */\n    ensureBoolean(value);\n    this.value = value;\n  }\n\n  /**\n   * Serializes the value using the provided serializer.\n   * This function is essential for converting the value into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeBool(this.value);\n  }\n\n  /**\n   * Serializes the current instance for use in an entry function by converting it to a byte sequence.\n   * This allows the instance to be properly formatted for serialization in transactions.\n   *\n   * @param serializer - The serializer instance used to serialize the byte sequence.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * Serializes the current instance for use in a script function.\n   * This allows for the conversion of the instance into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Bool);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Deserializes a U256 value from the provided deserializer.\n   *\n   * @param deserializer - The deserializer instance used to read the U256 data.\n   * @group Implementation\n   * @category BCS\n   */\n  // eslint-disable-next-line class-methods-use-this\n  deserialize(deserializer: Deserializer) {\n    return new U256(deserializer.deserializeU256());\n  }\n\n  static deserialize(deserializer: Deserializer): Bool {\n    return new Bool(deserializer.deserializeBool());\n  }\n}\n\n/**\n * Represents an unsigned 8-bit integer (U8) value.\n * This class extends the Serializable class and provides methods for serialization and deserialization of U8 values.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U8 extends Serializable implements TransactionArgument {\n  public readonly value: Uint8;\n\n  constructor(value: Uint8) {\n    super();\n    validateNumberInRange(value, 0, MAX_U8_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U8 {\n    return new U8(deserializer.deserializeU8());\n  }\n}\n\n/**\n * Represents a 16-bit unsigned integer (U16) value.\n * This class extends the Serializable class and provides methods for serialization\n * and deserialization of the U16 value.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U16 extends Serializable implements TransactionArgument {\n  public readonly value: Uint16;\n\n  constructor(value: Uint16) {\n    super();\n    validateNumberInRange(value, 0, MAX_U16_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU16(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U16);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U16 {\n    return new U16(deserializer.deserializeU16());\n  }\n}\n\n/**\n * Represents a 32-bit unsigned integer (U32) that can be serialized and deserialized.\n * This class ensures that the value is within the valid range for a U32.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U32 extends Serializable implements TransactionArgument {\n  public readonly value: Uint32;\n\n  constructor(value: Uint32) {\n    super();\n    validateNumberInRange(value, 0, MAX_U32_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U32);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U32 {\n    return new U32(deserializer.deserializeU32());\n  }\n}\n\n/**\n * Represents a 64-bit unsigned integer (U64) and provides methods for serialization.\n *\n * This class ensures that the value is within the valid range for a U64 and provides\n * functionality to serialize the value for various use cases, including entry functions\n * and script functions.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U64 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U64_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU64(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U64);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U64 {\n    return new U64(deserializer.deserializeU64());\n  }\n}\n\n/**\n * Represents a 128-bit unsigned integer value.\n * This class provides methods for serialization and deserialization\n * of U128 values, ensuring that the values are within the valid range.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U128 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U128_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU128(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U128);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U128 {\n    return new U128(deserializer.deserializeU128());\n  }\n}\n\n/**\n * Represents a 256-bit unsigned integer (U256) that extends the Serializable class.\n * This class provides methods for serialization and deserialization of U256 values,\n * ensuring that the values are within the valid range.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class U256 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U256_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU256(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U256);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U256 {\n    return new U256(deserializer.deserializeU256());\n  }\n}\n"],"names":["Bool","_Bool","Serializable","value","ensureBoolean","serializer","bcsBytes","deserializer","U256","U8","_U8","validateNumberInRange","MAX_U8_NUMBER","U16","_U16","MAX_U16_NUMBER","U32","_U32","MAX_U32_NUMBER","U64","_U64","MAX_U64_BIG_INT","U128","_U128","MAX_U128_BIG_INT","_U256","MAX_U256_BIG_INT"],"mappings":";;;;;;;;;;;;;AAyBO,IAAMA,IAAN,MAAMC,uPAAaC,IAA4C;IAWpE,YAAYC,CAAAA,CAAgB;QAC1B,KAAA,CAAM,wPAWNC,EAAcD,CAAK,GACnB,IAAA,CAAK,KAAA,GAAQA;IACf;IAUA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,aAAA,CAAc,IAAA,CAAK,KAAK;IACrC;IAUA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAUA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA4D,GACvEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAUA,YAAYE,CAAAA,EAA4B;QACtC,OAAO,IAAIC,EAAKD,EAAa,eAAA,CAAgB,CAAC;IAChD;IAEA,OAAO,YAAYA,CAAAA,EAAkC;QACnD,OAAO,IAAIN,EAAKM,EAAa,eAAA,CAAgB,CAAC;IAChD;AACF,GAUaE,IAAN,MAAMC,uPAAWR,IAA4C;IAGlE,YAAYC,CAAAA,CAAc;QACxB,KAAA,CAAM,GACNQ,qPAAAA,EAAsBR,GAAO,gPAAGS,IAAa,GAC7C,IAAA,CAAK,KAAA,GAAQT;IACf;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,WAAA,CAAY,IAAA,CAAK,KAAK;IACnC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA0D,GACrEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAgC;QACjD,OAAO,IAAIG,EAAGH,EAAa,aAAA,CAAc,CAAC;IAC5C;AACF,GAWaM,IAAN,MAAMC,uPAAYZ,IAA4C;IAGnE,YAAYC,CAAAA,CAAe;QACzB,KAAA,CAAM,GACNQ,qPAAAA,EAAsBR,GAAO,gPAAGY,IAAc,GAC9C,IAAA,CAAK,KAAA,GAAQZ;IACf;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,YAAA,CAAa,IAAA,CAAK,KAAK;IACpC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA2D,GACtEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAiC;QAClD,OAAO,IAAIO,EAAIP,EAAa,cAAA,CAAe,CAAC;IAC9C;AACF,GAUaS,IAAN,MAAMC,uPAAYf,IAA4C;IAGnE,YAAYC,CAAAA,CAAe;QACzB,KAAA,CAAM,GACNQ,qPAAAA,EAAsBR,GAAO,gPAAGe,IAAc,GAC9C,IAAA,CAAK,KAAA,GAAQf;IACf;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,YAAA,CAAa,IAAA,CAAK,KAAK;IACpC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA2D,GACtEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAiC;QAClD,OAAO,IAAIU,EAAIV,EAAa,cAAA,CAAe,CAAC;IAC9C;AACF,GAaaY,IAAN,MAAMC,uPAAYlB,IAA4C;IAGnE,YAAYC,CAAAA,CAAkB;QAC5B,KAAA,CAAM,mPACNQ,KAAAA,EAAsBR,GAAO,OAAO,CAAC,gPAAGkB,IAAe,GACvD,IAAA,CAAK,KAAA,GAAQ,OAAOlB,CAAK;IAC3B;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,YAAA,CAAa,IAAA,CAAK,KAAK;IACpC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA2D,GACtEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAiC;QAClD,OAAO,IAAIa,EAAIb,EAAa,cAAA,CAAe,CAAC;IAC9C;AACF,GAWae,IAAN,MAAMC,uPAAarB,IAA4C;IAGpE,YAAYC,CAAAA,CAAkB;QAC5B,KAAA,CAAM,wPACNQ,EAAsBR,GAAO,OAAO,CAAC,gPAAGqB,IAAgB,GACxD,IAAA,CAAK,KAAA,GAAQ,OAAOrB,CAAK;IAC3B;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,aAAA,CAAc,IAAA,CAAK,KAAK;IACrC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA4D,GACvEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAkC;QACnD,OAAO,IAAIgB,EAAKhB,EAAa,eAAA,CAAgB,CAAC;IAChD;AACF,GAWaC,IAAN,MAAMiB,uPAAavB,IAA4C;IAGpE,YAAYC,CAAAA,CAAkB;QAC5B,KAAA,CAAM,wPACNQ,EAAsBR,GAAO,OAAO,CAAC,gPAAGuB,IAAgB,GACxD,IAAA,CAAK,KAAA,GAAQ,OAAOvB,CAAK;IAC3B;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,aAAA,CAAc,IAAA,CAAK,KAAK;IACrC;IAEA,0BAA0BA,CAAAA,EAA8B;QACtD,IAAMC,IAAW,IAAA,CAAK,UAAA,CAAW;QACjCD,EAAW,cAAA,CAAeC,CAAQ;IACpC;IAEA,2BAA2BD,CAAAA,EAA8B;QACvDA,EAAW,qBAAA,CAAA,CAA4D,GACvEA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAEA,OAAO,YAAYE,CAAAA,EAAkC;QACnD,OAAO,IAAIkB,EAAKlB,EAAa,eAAA,CAAgB,CAAC;IAChD;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/deserializer.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256, HexInput } from \"../types\";\nimport { Hex } from \"../core/hex\";\n\n/**\n * This interface exists to define Deserializable<T> inputs for functions that\n * deserialize a byte buffer into a type T.\n * It is not intended to be implemented or extended, because Typescript has no support\n * for static methods in interfaces.\n *\n * @template T - The type that this will deserialize into.\n * @group Implementation\n * @category BCS\n */\nexport interface Deserializable<T> {\n  /**\n   * Deserializes the buffered bytes into an instance of the specified class type.\n   * This function provides an alternative syntax for deserialization, allowing users to call\n   * `deserializer.deserialize(MyClass)` instead of `MyClass.deserialize(deserializer)`.\n   *\n   * @param deserializer - The deserializer instance with the buffered bytes.\n   * @returns The deserialized value of class type T.\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([1, 2, 3]));\n   * const value = deserializer.deserialize(MyClass); // where MyClass has a `deserialize` function\n   * // value is now an instance of MyClass\n   * // equivalent to `const value = MyClass.deserialize(deserializer)`\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserialize(deserializer: Deserializer): T;\n}\n\n/**\n * A class that provides methods for deserializing various data types from a byte buffer.\n * It supports deserialization of primitive types, strings, and complex objects using a BCS (Binary Common Serialization) layout.\n * @group Implementation\n * @category BCS\n */\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  /**\n   * Creates a new instance of the class with a copy of the provided data buffer.\n   * This prevents outside mutation of the buffer.\n   *\n   * @param data - The data to be copied into the internal buffer as a Uint8Array.\n   * @group Implementation\n   * @category BCS\n   */\n  constructor(data: Uint8Array) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  static fromHex(hex: HexInput): Deserializer {\n    const data = Hex.hexInputToUint8Array(hex);\n    return new Deserializer(data);\n  }\n\n  /**\n   * Reads a specified number of bytes from the buffer and advances the offset.\n   *\n   * @param length - The number of bytes to read from the buffer.\n   * @throws Throws an error if the read operation exceeds the buffer's length.\n   * @group Implementation\n   * @category BCS\n   */\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Returns the number of bytes remaining in the buffer.\n   *\n   * This information is useful to determine if there's more data to be read.\n   *\n   * @returns The number of bytes remaining in the buffer.\n   * @group Implementation\n   * @category BCS\n   */\n  remaining(): number {\n    return this.buffer.byteLength - this.offset;\n  }\n\n  /**\n   * Deserializes a UTF-8 encoded string from a byte array. It first reads the length of the string in bytes,\n   * followed by the actual byte content, and decodes it into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * assert(deserializer.deserializeStr() === \"1234abcd\");\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * @deprecated use `deserializeOption(\"string\")` instead.\n   *\n   * The BCS layout for Optional<String> is 0 if none, else 1 followed by the string length and string content.\n   * @returns The deserialized string if it exists, otherwise undefined.\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([0x00]));\n   * assert(deserializer.deserializeOptionStr() === undefined);\n   * const deserializer = new Deserializer(new Uint8Array([1, 8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * assert(deserializer.deserializeOptionStr() === \"1234abcd\");\n   * ```\n   */\n  deserializeOptionStr(): string | undefined {\n    return this.deserializeOption(\"string\");\n  }\n\n  /**\n   * Deserializes an optional value from the buffer.\n   *\n   * The BCS layout for Optional<T> starts with a boolean byte (0 if none, 1 if some),\n   * followed by the value if present.\n   *\n   * @template T - The type of the value to deserialize\n   * @param type - Either a Deserializable class or one of the string literals: \"string\", \"bytes\", or \"fixedBytes\"\n   * @param len - Required length when type is \"fixedBytes\", ignored otherwise\n   * @returns The deserialized value if present, undefined otherwise\n   *\n   * @throws {Error} When \"fixedBytes\" is specified without a length\n   *\n   * @example\n   * ```typescript\n   * // Deserialize an optional string\n   * const deserializer = new Deserializer(new Uint8Array([1, 3, 97, 98, 99]));\n   * const optStr = deserializer.deserializeOption(\"string\");\n   * // optStr === \"abc\"\n   *\n   * // Deserialize an optional custom type\n   * const deserializer = new Deserializer(new Uint8Array([0]));\n   * const optValue = deserializer.deserializeOption(MyClass);\n   * // optValue === undefined\n   *\n   * // Deserialize optional bytes\n   * const deserializer = new Deserializer(new Uint8Array([1, 3, 1, 2, 3]));\n   * const optBytes = deserializer.deserializeOption(\"bytes\");\n   * // optBytes === Uint8Array[1, 2, 3]\n   *\n   * // Deserialize optional fixed bytes\n   * const deserializer = new Deserializer(new Uint8Array([1, 1, 2, 3, 4]));\n   * const optBytes = deserializer.deserializeOption(\"fixedBytes\", 4);\n   * // optBytes === Uint8Array[1, 2, 3, 4]\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeOption(type: \"string\"): string | undefined;\n  deserializeOption(type: \"bytes\"): Uint8Array | undefined;\n  deserializeOption(type: \"fixedBytes\", len: number): Uint8Array | undefined;\n  deserializeOption<T>(type: Deserializable<T>): T | undefined;\n  deserializeOption<T>(\n    type: Deserializable<T> | \"string\" | \"bytes\" | \"fixedBytes\",\n    len?: number,\n  ): T | string | Uint8Array | undefined {\n    const exists = this.deserializeBool();\n    if (!exists) return undefined;\n\n    if (type === \"string\") {\n      return this.deserializeStr();\n    }\n    if (type === \"bytes\") {\n      return this.deserializeBytes();\n    }\n    if (type === \"fixedBytes\") {\n      if (len === undefined) {\n        throw new Error(\"Fixed bytes length not provided\");\n      }\n      return this.deserializeFixedBytes(len);\n    }\n\n    return this.deserialize(type);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * The BCS layout for \"bytes\" consists of a bytes_length followed by the bytes themselves, where bytes_length is a u32 integer\n   * encoded as a uleb128 integer, indicating the length of the bytes array.\n   *\n   * @returns {Uint8Array} The deserialized array of bytes.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeBytes(): Uint8Array {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes of a specified length.\n   *\n   * @param len - The number of bytes to read from the source.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeFixedBytes(len: number): Uint8Array {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value from a byte stream.\n   *\n   * The BCS layout for a boolean uses one byte, where \"0x01\" represents true and \"0x00\" represents false.\n   * An error is thrown if the byte value is not valid.\n   *\n   * @returns The deserialized boolean value.\n   * @throws Throws an error if the boolean value is invalid.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number from the binary data.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   *\n   * @returns {number} The deserialized uint8 number.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number from a binary format in little-endian representation.\n   *\n   * BCS layout for \"uint16\": Two bytes.\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number from a binary format in little-endian representation.\n   *\n   * BCS layout for \"uint32\": Four bytes.\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * This function combines two 32-bit values to return a 64-bit unsigned integer in little-endian representation.\n   * @example\n   * ```typescript\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number from its binary representation.\n   * This function combines two 64-bit values to return a single uint128 value in little-endian format.\n   *\n   * @returns {BigInt} The deserialized uint128 number.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number from its binary representation.\n   *\n   * The BCS layout for \"uint256\" consists of thirty-two bytes in little-endian format.\n   *\n   * @returns {BigInt} The deserialized uint256 number.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * This function is used for interpreting lengths of variable-length sequences and tags of enum values in BCS encoding.\n   *\n   * @throws {Error} Throws an error if the parsed value exceeds the maximum uint32 number.\n   * @returns {number} The deserialized uint32 value.\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n\n  /**\n   * Helper function that primarily exists to support alternative syntax for deserialization.\n   * That is, if we have a `const deserializer: new Deserializer(...)`, instead of having to use\n   * `MyClass.deserialize(deserializer)`, we can call `deserializer.deserialize(MyClass)`.\n   *\n   * @example const deserializer = new Deserializer(new Uint8Array([1, 2, 3]));\n   * const value = deserializer.deserialize(MyClass); // where MyClass has a `deserialize` function\n   * // value is now an instance of MyClass\n   * // equivalent to `const value = MyClass.deserialize(deserializer)`\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   *\n   * @returns the deserialized value of class type T\n   * @group Implementation\n   * @category BCS\n   */\n  deserialize<T>(cls: Deserializable<T>): T {\n    // NOTE: `deserialize` in `cls.deserialize(this)` here is a static method defined in `cls`,\n    // It is separate from the `deserialize` instance method defined here in Deserializer.\n    return cls.deserialize(this);\n  }\n\n  /**\n   * Deserializes an array of BCS Deserializable values given an existing Deserializer instance with a loaded byte buffer.\n   *\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   * @returns An array of deserialized values of type T.\n   * @example\n   * // serialize a vector of addresses\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.from(\"0x1\"),\n   *   AccountAddress.from(\"0x2\"),\n   *   AccountAddress.from(\"0xa\"),\n   *   AccountAddress.from(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   *\n   * // deserialize the bytes into an array of addresses\n   * const deserializer = new Deserializer(serializedBytes);\n   * const deserializedAddresses = deserializer.deserializeVector(AccountAddress);\n   * // deserializedAddresses is now an array of AccountAddress instances\n   * @group Implementation\n   * @category BCS\n   */\n  deserializeVector<T>(cls: Deserializable<T>): Array<T> {\n    const length = this.deserializeUleb128AsU32();\n    const vector = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      vector.push(this.deserialize(cls));\n    }\n    return vector;\n  }\n}\n"],"names":["Deserializer","_Deserializer","data","hex","Hex","length","bytes","value","type","len","bool","low","high","shift","MAX_U32_NUMBER","byte","cls","vector","i"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/serializable/moveStructs.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"./movePrimitives\";\nimport { Serializable, Serializer } from \"../serializer\";\nimport { Deserializable, Deserializer } from \"../deserializer\";\nimport { AnyNumber, HexInput, ScriptTransactionArgumentVariants } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { EntryFunctionArgument, TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n * This class is the Aptos Typescript SDK representation of a Move `vector<T>`,\n * where `T` represents either a primitive type (`bool`, `u8`, `u64`, ...)\n * or a BCS-serializable struct itself.\n *\n * It is a BCS-serializable, array-like type that contains an array of values of type `T`,\n * where `T` is a class that implements `Serializable`.\n *\n * The purpose of this class is to facilitate easy construction of BCS-serializable\n * Move `vector<T>` types.\n *\n * @example\n * // in Move: `vector<u8> [1, 2, 3, 4];`\n * const vecOfU8s = new MoveVector<U8>([new U8(1), new U8(2), new U8(3), new U8(4)]);\n * // in Move: `std::bcs::to_bytes(vector<u8> [1, 2, 3, 4]);`\n * const bcsBytes = vecOfU8s.toUint8Array();\n *\n * // vector<vector<u8>> [ vector<u8> [1], vector<u8> [1, 2, 3, 4], vector<u8> [5, 6, 7, 8] ];\n * const vecOfVecs = new MoveVector<MoveVector<U8>>([\n *   new MoveVector<U8>([new U8(1)]),\n *   MoveVector.U8([1, 2, 3, 4]),\n *   MoveVector.U8([5, 6, 7, 8]),\n * ]);\n *\n * // vector<Option<u8>> [ std::option::some<u8>(1), std::option::some<u8>(2) ];\n * const vecOfOptionU8s = new MoveVector<MoveOption<U8>>([\n *    MoveOption.U8(1),\n *    MoveOption.U8(2),\n * ]);\n *\n * // vector<MoveString> [ std::string::utf8(b\"hello\"), std::string::utf8(b\"world\") ];\n * const vecOfStrings = new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]);\n * const vecOfStrings2 = MoveVector.MoveString([\"hello\", \"world\"]);\n *\n * @param values an Array<T> of values where T is a class that implements Serializable\n * @returns a `MoveVector<T>` with the values `values`\n * @group Implementation\n * @category BCS\n */\nexport class MoveVector<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements TransactionArgument\n{\n  public values: Array<T>;\n\n  /**\n   * Initializes a new instance of the class with an optional value.\n   * This constructor sets up the internal vector based on the provided value.\n   *\n   * @param values - The initial value to be stored in the vector, or null to initialize an empty vector.\n   * @group Implementation\n   * @category BCS\n   */\n  constructor(values: Array<T>) {\n    super();\n    this.values = values;\n  }\n\n  /**\n   * Serializes the current instance into a byte sequence suitable for entry functions.\n   * This allows the data to be properly formatted for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to serialize the byte sequence.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * NOTE: This function will only work when the inner values in the `MoveVector` are `U8`s.\n   * @param serializer\n   * @group Implementation\n   * @category BCS\n   */\n\n  /**\n   * Serialize the string as a fixed byte string without the length prefix for use in a script function.\n   * @param serializer - The serializer used to convert the byte vector into a format suitable for a script function.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    // This checks if the type of a non-empty vector is of type other than U8.  If so, we use the Serialized\n    // transaction argument type to serialize the argument.\n    if (this.values[0] !== undefined && !(this.values[0] instanceof U8)) {\n      const serialized = new Serialized(this.bcsToBytes());\n      serialized.serializeForScriptFunction(serializer);\n      return;\n    }\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8Vector);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Factory method to generate a MoveVector<U8> from a `number` or `undefined`.\n   *\n   * This method allows you to create a MoveVector that encapsulates a U8 value, enabling you to handle optional U8 values\n   * effectively.\n   *\n   * @param values - The values used to fill the MoveVector. If `values` is undefined or null, the resulting MoveVector's\n   * `.isSome()` method will return false.\n   * @returns A MoveVector<U8> with an inner value `value`.\n   *\n   * @example\n   * ```typescript\n   * const v = MoveVector.U8([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  static U8(values: Array<number> | HexInput): MoveVector<U8> {\n    let numbers: Array<number>;\n\n    if (Array.isArray(values) && values.length === 0) {\n      // Handle empty array, since it won't have a \"first value\"\n      numbers = [];\n    } else if (Array.isArray(values) && typeof values[0] === \"number\") {\n      numbers = values;\n    } else if (typeof values === \"string\") {\n      const hex = Hex.fromHexInput(values);\n      numbers = Array.from(hex.toUint8Array());\n    } else if (values instanceof Uint8Array) {\n      numbers = Array.from(values);\n    } else {\n      throw new Error(\"Invalid input type, must be an number[], Uint8Array, or hex string\");\n    }\n\n    return new MoveVector<U8>(numbers.map((v) => new U8(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U16> from a `number` or `null`.\n   *\n   * This method allows you to create a MoveVector that can either hold a U16 value or be empty.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is null or undefined, the resulting MoveVector's\n   * `.isSome()` method will return false.\n   * @returns A MoveVector<U16> with an inner value `value`.\n   * @example\n   * ```typescript\n   * const v = MoveVector.U16([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n\n   */\n  static U16(values: Array<number>): MoveVector<U16> {\n    return new MoveVector<U16>(values.map((v) => new U16(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<U32> from a `number` or `null`.\n   *\n   * This method allows you to create a MoveVector that can either hold a U32 value or be empty.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is null or undefined,\n   * the resulting MoveVector's .isSome() method will return false.\n   * @returns A MoveVector<U32> with an inner value `value`.\n   *\n   * @example\n   * ```\n   * const v = MoveVector.U32([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n\n   */\n  static U32(values: Array<number>): MoveVector<U32> {\n    return new MoveVector<U32>(values.map((v) => new U32(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<U64> from a number, bigint, or null/undefined.\n   * This allows for the creation of an optional U64 value that can be checked for presence.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is undefined or null, the resulting MoveVector's\n   * `.isSome()` method will return false.\n   * @returns A MoveVector<U64> with an inner value `value`.\n   *\n   * @example\n   * ```typescript\n   * const v = MoveVector.U64([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  static U64(values: Array<AnyNumber>): MoveVector<U64> {\n    return new MoveVector<U64>(values.map((v) => new U64(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<U128> from a number, bigint, or undefined.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is undefined, the resulting MoveVector's `.isSome()`\n   * method will return false.\n   * @returns A MoveVector<U128> with an inner value `value`.\n   *\n   * @example\n   * ```typescript\n   * const v = MoveVector.U128([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  static U128(values: Array<AnyNumber>): MoveVector<U128> {\n    return new MoveVector<U128>(values.map((v) => new U128(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<U256> from a number, bigint, or null/undefined.\n   * This allows for the creation of an optional U256 value, enabling checks for presence or absence of a value.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is undefined or null,\n   *                the resulting MoveVector's .isSome() method will return false.\n   * @returns A MoveVector<U256> with an inner value `value`.\n   *\n   * @example\n   * ```typescript\n   * const v = MoveVector.U256([1, 2, 3, 4]);\n   * ```\n   * @group Implementation\n   * @category BCS\n   */\n  static U256(values: Array<AnyNumber>): MoveVector<U256> {\n    return new MoveVector<U256>(values.map((v) => new U256(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<Bool> from a `boolean` or `undefined`.\n   * This method allows you to create an optional boolean value that can be used in various contexts where a boolean may or may\n   * not be present.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is undefined, the resulting MoveVector's .isSome() method\n   * will return false.\n   * @returns A MoveVector<Bool> with an inner value `value`.\n   *\n   * @example\n   *    * const v = MoveVector.Bool([true, false, true, false]);\n   * @group Implementation\n   * @category BCS\n   */\n  static Bool(values: Array<boolean>): MoveVector<Bool> {\n    return new MoveVector<Bool>(values.map((v) => new Bool(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector<MoveString> from a `string` or `undefined`.\n   * This function creates a MoveVector that encapsulates a MoveString if the provided value is not null or undefined.\n   *\n   * @param values - The value used to fill the MoveVector. If `value` is undefined, the resulting MoveVector's .isSome() method\n   * will return false.\n   * @returns A MoveVector<MoveString> with an inner value `value`.\n   *\n   * @example\n   * const v = MoveVector.MoveString([\"hello\", \"world\"]);\n   * @group Implementation\n   * @category BCS\n   */\n  static MoveString(values: Array<string>): MoveVector<MoveString> {\n    return new MoveVector<MoveString>(values.map((v) => new MoveString(v)));\n  }\n\n  /**\n   * Serializes the current object using the provided serializer.\n   * This function will serialize the value if it is present.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serialize(serializer: Serializer): void;\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.values);\n  }\n\n  /**\n   * Deserialize a MoveVector of type T, specifically where T is a Serializable and Deserializable type.\n   *\n   * NOTE: This only works with a depth of one. Generics will not work.\n   *\n   * NOTE: This will not work with types that aren't of the Serializable class.\n   *\n   * If you're looking for a more flexible deserialization function, you can use the deserializeVector function\n   * in the Deserializer class.\n   *\n   * @example\n   * const vec = MoveVector.deserialize(deserializer, U64);\n   * @param deserializer the Deserializer instance to use, with bytes loaded into it already.\n   * @param cls the class to typecast the input values to, must be a Serializable and Deserializable type.\n   * @returns a MoveVector of the corresponding class T\n   *\n   * @group Implementation\n   * @category BCS\n   */\n  static deserialize<T extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<T>,\n  ): MoveVector<T> {\n    const length = deserializer.deserializeUleb128AsU32();\n    const values = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      values.push(cls.deserialize(deserializer));\n    }\n    return new MoveVector(values);\n  }\n}\n\n/**\n * Represents a serialized data structure that encapsulates a byte array.\n * This class extends the Serializable class and provides methods for serialization\n * and deserialization of byte data, as well as converting to a MoveVector.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class Serialized extends Serializable implements TransactionArgument {\n  public readonly value: Uint8Array;\n\n  constructor(value: HexInput) {\n    super();\n    this.value = Hex.fromHexInput(value).toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    this.serialize(serializer);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Serialized);\n    this.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Serialized {\n    return new Serialized(deserializer.deserializeBytes());\n  }\n\n  /**\n   * Deserialize the bytecode into a MoveVector of the specified type.\n   * This function allows you to convert serialized data into a usable MoveVector format.\n   *\n   * @param cls - The class type of the elements in the MoveVector.\n   * @group Implementation\n   * @category BCS\n   */\n  toMoveVector<T extends Serializable & EntryFunctionArgument>(cls: Deserializable<T>): MoveVector<T> {\n    const deserializer = new Deserializer(this.bcsToBytes());\n    deserializer.deserializeUleb128AsU32();\n    const vec = deserializer.deserializeVector(cls);\n    return new MoveVector(vec);\n  }\n}\n\n/**\n * Represents a string value that can be serialized and deserialized.\n * This class extends the Serializable base class and provides methods\n * for serializing the string in different contexts, such as for entry\n * functions and script functions.\n *\n * @extends Serializable\n * @group Implementation\n * @category BCS\n */\nexport class MoveString extends Serializable implements TransactionArgument {\n  public value: string;\n\n  constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    // Serialize the string as a fixed byte string, i.e., without the length prefix\n    const textEncoder = new TextEncoder();\n    const fixedStringBytes = textEncoder.encode(this.value);\n    // Put those bytes into a vector<u8> and serialize it as a script function argument\n    const vectorU8 = MoveVector.U8(fixedStringBytes);\n    vectorU8.serializeForScriptFunction(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MoveString {\n    return new MoveString(deserializer.deserializeStr());\n  }\n}\n\nexport class MoveOption<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements EntryFunctionArgument\n{\n  private vec: MoveVector<T>;\n\n  public readonly value?: T;\n\n  constructor(value?: T | null) {\n    super();\n    if (typeof value !== \"undefined\" && value !== null) {\n      this.vec = new MoveVector([value]);\n    } else {\n      this.vec = new MoveVector([]);\n    }\n\n    [this.value] = this.vec.values;\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * Retrieves the inner value of the MoveOption.\n   *\n   * This method is inspired by Rust's `Option<T>.unwrap()`, where attempting to unwrap a `None` value results in a panic.\n   * This method will throw an error if the value is not present.\n   *\n   * @example\n   * const option = new MoveOption<Bool>(new Bool(true));\n   * const value = option.unwrap();  // Returns the Bool instance\n   *\n   * @throws {Error} Throws an error if the MoveOption does not contain a value.\n   *\n   * @returns {T} The contained value if present.\n   * @group Implementation\n   * @category BCS\n   */\n  unwrap(): T {\n    if (!this.isSome()) {\n      throw new Error(\"Called unwrap on a MoveOption with no value\");\n    } else {\n      return this.vec.values[0];\n    }\n  }\n\n  /**\n   * Check if the MoveOption has a value.\n   *\n   * @returns {boolean} Returns true if there is exactly one value in the MoveOption.\n   * @group Implementation\n   * @category BCS\n   */\n  isSome(): boolean {\n    return this.vec.values.length === 1;\n  }\n\n  serialize(serializer: Serializer): void {\n    // serialize 0 or 1\n    // if 1, serialize the value\n    this.vec.serialize(serializer);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U8> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U8(1).isSome() === true;\n   * MoveOption.U8().isSome() === false;\n   * MoveOption.U8(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U8> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U8(value?: number | null): MoveOption<U8> {\n    return new MoveOption<U8>(value !== null && value !== undefined ? new U8(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U16> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U16(1).isSome() === true;\n   * MoveOption.U16().isSome() === false;\n   * MoveOption.U16(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U16> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U16(value?: number | null): MoveOption<U16> {\n    return new MoveOption<U16>(value !== null && value !== undefined ? new U16(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U32> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U32(1).isSome() === true;\n   * MoveOption.U32().isSome() === false;\n   * MoveOption.U32(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U32> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U32(value?: number | null): MoveOption<U32> {\n    return new MoveOption<U32>(value !== null && value !== undefined ? new U32(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U64> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U64(1).isSome() === true;\n   * MoveOption.U64().isSome() === false;\n   * MoveOption.U64(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U64> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U64(value?: AnyNumber | null): MoveOption<U64> {\n    return new MoveOption<U64>(value !== null && value !== undefined ? new U64(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U128> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U128(1).isSome() === true;\n   * MoveOption.U128().isSome() === false;\n   * MoveOption.U128(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U128> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U128(value?: AnyNumber | null): MoveOption<U128> {\n    return new MoveOption<U128>(value !== null && value !== undefined ? new U128(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U256> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U256(1).isSome() === true;\n   * MoveOption.U256().isSome() === false;\n   * MoveOption.U256(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U256> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static U256(value?: AnyNumber | null): MoveOption<U256> {\n    return new MoveOption<U256>(value !== null && value !== undefined ? new U256(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<Bool> from a `boolean` or `undefined`.\n   *\n   * @example\n   * MoveOption.Bool(true).isSome() === true;\n   * MoveOption.Bool().isSome() === false;\n   * MoveOption.Bool(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<Bool> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static Bool(value?: boolean | null): MoveOption<Bool> {\n    return new MoveOption<Bool>(value !== null && value !== undefined ? new Bool(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<MoveString> from a `string` or `undefined`.\n   *\n   * @example\n   * MoveOption.MoveString(\"hello\").isSome() === true;\n   * MoveOption.MoveString(\"\").isSome() === true;\n   * MoveOption.MoveString().isSome() === false;\n   * MoveOption.MoveString(undefined).isSome() === false;\n   * @param value the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<MoveString> with an inner value `value`\n   * @group Implementation\n   * @category BCS\n   */\n  static MoveString(value?: string | null): MoveOption<MoveString> {\n    return new MoveOption<MoveString>(value !== null && value !== undefined ? new MoveString(value) : undefined);\n  }\n\n  static deserialize<U extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<U>,\n  ): MoveOption<U> {\n    const vector = MoveVector.deserialize(deserializer, cls);\n    return new MoveOption(vector.values[0]);\n  }\n}\n"],"names":["MoveVector","_MoveVector","Serializable","values","serializer","bcsBytes","U8","Serialized","numbers","hex","Hex","v","U16","U32","U64","U128","U256","Bool","MoveString","deserializer","cls","length","i","_Serialized","value","Deserializer","vec","_MoveString","fixedStringBytes","MoveOption","_MoveOption","vector"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/accountAddress.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { TransactionArgument } from \"../transactions/instances/transactionArgument\";\nimport { HexInput, ScriptTransactionArgumentVariants } from \"../types\";\n\n/**\n * Provides reasons for an address was invalid.\n * @group Implementation\n * @category Serialization\n */\nexport enum AddressInvalidReason {\n  INCORRECT_NUMBER_OF_BYTES = \"incorrect_number_of_bytes\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n  TOO_SHORT = \"too_short\",\n  TOO_LONG = \"too_long\",\n  LEADING_ZERO_X_REQUIRED = \"leading_zero_x_required\",\n  LONG_FORM_REQUIRED_UNLESS_SPECIAL = \"long_form_required_unless_special\",\n  INVALID_PADDING_ZEROES = \"INVALID_PADDING_ZEROES\",\n  INVALID_PADDING_STRICTNESS = \"INVALID_PADDING_STRICTNESS\",\n}\n\n/**\n * The input for an account address, which can be either a hexadecimal string or a standard account address.\n * @group Implementation\n * @category Serialization\n */\nexport type AccountAddressInput = HexInput | AccountAddress;\n\n/**\n * NOTE: Only use this class for account addresses. For other hex data, e.g. transaction\n * hashes, use the Hex class.\n *\n * AccountAddress is used for working with account addresses. Account addresses, when\n * represented as a string, generally look like these examples:\n * - 0x1\n * - 0xaa86fe99004361f747f91342ca13c426ca0cccb0c1217677180c9493bad6ef0c\n *\n * Proper formatting and parsing of account addresses is defined by AIP-40.\n * To learn more about the standard, read the AIP here:\n * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n *\n * The comments in this class make frequent reference to the LONG and SHORT formats,\n * as well as \"special\" addresses. To learn what these refer to see AIP-40.\n * @group Implementation\n * @category Serialization\n */\nexport class AccountAddress extends Serializable implements TransactionArgument {\n  /**\n   * This is the internal representation of an account address.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly data: Uint8Array;\n\n  /**\n   * The number of bytes that make up an account address.\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The length of an address string in LONG form without a leading 0x.\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LONG_STRING_LENGTH: number = 64;\n\n  static ZERO: AccountAddress = AccountAddress.from(\"0x0\");\n\n  static ONE: AccountAddress = AccountAddress.from(\"0x1\");\n\n  static TWO: AccountAddress = AccountAddress.from(\"0x2\");\n\n  static THREE: AccountAddress = AccountAddress.from(\"0x3\");\n\n  static FOUR: AccountAddress = AccountAddress.from(\"0x4\");\n\n  static A: AccountAddress = AccountAddress.from(\"0xA\");\n\n  /**\n   * Creates an instance of AccountAddress from a Uint8Array.\n   *\n   * This function ensures that the input data is exactly 32 bytes long, which is required for a valid account address.\n   *\n   * @param input A Uint8Array representing an account address.\n   * @throws ParsingError if the input length is not equal to 32 bytes.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(input: Uint8Array) {\n    super();\n    if (input.length !== AccountAddress.LENGTH) {\n      throw new ParsingError(\n        \"AccountAddress data should be exactly 32 bytes long\",\n        AddressInvalidReason.INCORRECT_NUMBER_OF_BYTES,\n      );\n    }\n    this.data = input;\n  }\n\n  /**\n   * Determines if the address is classified as special, which is defined as 0x0 to 0xf inclusive.\n   * In other words, the last byte of the address must be < 0b10000 (16)\n   * and every other byte must be zero.\n   *\n   * For more information on how special addresses are defined, see AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @returns true if the address is special, false otherwise.\n   * @group Implementation\n   * @category Serialization\n   */\n  isSpecial(): boolean {\n    return (\n      this.data.slice(0, this.data.length - 1).every((byte) => byte === 0) && this.data[this.data.length - 1] < 0b10000\n    );\n  }\n  // ===\n  // Methods for representing an instance of AccountAddress as other types.\n  // ===\n\n  /**\n   * Return the AccountAddress as a string as per AIP-40.\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   * This representation returns special addresses in SHORT form (0xf)\n   * and other addresses in LONG form (0x + 64 characters).\n   *\n   * @returns AccountAddress as a string conforming to AIP-40.\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): `0x${string}` {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  /**\n   * Return the AccountAddress as a string conforming to AIP-40 but without the leading 0x.\n   *\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * @returns AccountAddress as a string without the leading 0x.\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringWithoutPrefix(): string {\n    let hex = bytesToHex(this.data);\n    if (this.isSpecial()) {\n      hex = hex[hex.length - 1];\n    }\n    return hex;\n  }\n\n  /**\n   * Convert the account address to a string in LONG format, which is always 0x followed by 64 hex characters.\n   *\n   * NOTE: Prefer to use `toString` where possible, as it formats special addresses using the SHORT form (no leading 0s).\n   *\n   * @returns AccountAddress as a string in LONG form.\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringLong(): `0x${string}` {\n    return `0x${this.toStringLongWithoutPrefix()}`;\n  }\n\n  /**\n   * Returns the account address as a string in LONG form without a leading 0x.\n   * This function will include leading zeroes and will produce a string of 64 hex characters.\n   *\n   * NOTE: Prefer to use `toString` where possible, as it formats special addresses using the SHORT form (no leading 0s).\n   *\n   * @returns {string} The account address in LONG form.\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringLongWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Convert the account address to a string in SHORT format, which is 0x followed by the shortest\n   * possible representation (no leading zeros).\n   *\n   * @returns AccountAddress as a string in SHORT form.\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringShort(): `0x${string}` {\n    return `0x${this.toStringShortWithoutPrefix()}`;\n  }\n\n  /**\n   * Returns a lossless short string representation of the address by trimming leading zeros.\n   * If the address consists of all zeros, returns \"0\".\n   *\n   * @returns A string representation of the address without leading zeros\n   * @group Implementation\n   * @category Serialization\n   */\n  toStringShortWithoutPrefix(): string {\n    const hex = bytesToHex(this.data).replace(/^0+/, \"\");\n    return hex === \"\" ? \"0\" : hex;\n  }\n\n  /**\n   * Get the inner data as a Uint8Array.\n   * The inner data is already a Uint8Array, so no conversion takes place.\n   *\n   * @returns Hex data as Uint8Array\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Serialize the AccountAddress to a Serializer instance's data buffer.\n   * @param serializer The serializer to serialize the AccountAddress to.\n   * @returns void\n   * @example\n   * const serializer = new Serializer();\n   * const address = AccountAddress.fromString(\"0x1\");\n   * address.serialize(serializer);\n   * const bytes = serializer.toUint8Array();\n   * // `bytes` is now the BCS-serialized address.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  /**\n   * Serializes the current instance into a byte sequence suitable for entry functions.\n   * This allows for the proper encoding of data when interacting with entry functions in the blockchain.\n   *\n   * @param serializer - The serializer instance used to convert the data into bytes.\n   * @group Implementation\n   * @category Serialization\n   */\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * Serializes the current instance for use in a script function by encoding it into a byte sequence.\n   * This process involves serializing the variant index and the instance data, making it suitable for transmission.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Address);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Deserialize an AccountAddress from the byte buffer in a Deserializer instance.\n   * This function allows you to convert a byte representation of an AccountAddress into an instance of AccountAddress.\n   * @param deserializer The deserializer to deserialize the AccountAddress from.\n   * @returns An instance of AccountAddress.\n   * @example\n   * const bytes = hexToBytes(\"0x0102030405060708091011121314151617181920212223242526272829303132\");\n   * const deserializer = new Deserializer(bytes);\n   * const address = AccountAddress.deserialize(deserializer);\n   * // `address` is now an instance of AccountAddress.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    const bytes = deserializer.deserializeFixedBytes(AccountAddress.LENGTH);\n    return new AccountAddress(bytes);\n  }\n\n  // ===\n  // Methods for creating an instance of AccountAddress from other types.\n  // ===\n\n  /**\n   * NOTE: This function has strict parsing behavior. For relaxed behavior, please use\n   * the `fromString` function.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows only the strictest formats defined by AIP-40. In short this\n   * means only the following formats are accepted:\n   *\n   * - LONG\n   * - SHORT for special addresses\n   *\n   * Where:\n   * - LONG is defined as 0x + 64 hex characters.\n   * - SHORT for special addresses is 0x0 to 0xf inclusive without padding zeroes.\n   *\n   * This means the following are not accepted:\n   * - SHORT for non-special addresses.\n   * - Any address without a leading 0x.\n   *\n   * @param input - A hex string representing an account address.\n   *\n   * @throws {ParsingError} If the hex string does not start with 0x or is not in a valid format.\n   *\n   * @remarks\n   *\n   * This function has strict parsing behavior. For relaxed behavior, please use the `fromString` function.\n   *\n   * @see AIP-40 documentation for more details on address formats:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @returns An instance of AccountAddress.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromStringStrict(input: string): AccountAddress {\n    // Assert the string starts with 0x.\n    if (!input.startsWith(\"0x\")) {\n      throw new ParsingError(\"Hex string must start with a leading 0x.\", AddressInvalidReason.LEADING_ZERO_X_REQUIRED);\n    }\n\n    const address = AccountAddress.fromString(input);\n\n    // Check if the address is in LONG form. If it is not, this is only allowed for\n    // special addresses, in which case we check it is in proper SHORT form.\n    if (input.length !== AccountAddress.LONG_STRING_LENGTH + 2) {\n      if (!address.isSpecial()) {\n        throw new ParsingError(\n          `The given hex string ${input} is not a special address, it must be represented as 0x + 64 chars.`,\n          AddressInvalidReason.LONG_FORM_REQUIRED_UNLESS_SPECIAL,\n        );\n      } else if (input.length !== 3) {\n        // 0x + one hex char is the only valid SHORT form for special addresses.\n        throw new ParsingError(\n          // eslint-disable-next-line max-len\n          `The given hex string ${input} is a special address not in LONG form, it must be 0x0 to 0xf without padding zeroes.`,\n          AddressInvalidReason.INVALID_PADDING_ZEROES,\n        );\n      }\n    }\n\n    return address;\n  }\n\n  /**\n   * NOTE: This function has relaxed parsing behavior. For strict behavior, please use\n   * the `fromStringStrict` function. Where possible use `fromStringStrict` rather than this\n   * function, `fromString`.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows all formats defined by AIP-40. In short this means the\n   * following formats are accepted:\n   *\n   * - LONG, with or without leading 0x\n   * - SHORT*, with or without leading 0x\n   *\n   * Where:\n   * - LONG is 64 hex characters.\n   * - SHORT* is 1 to 63 hex characters inclusive. The address can have missing values up to `maxMissingChars` before it is padded.\n   * - Padding zeroes are allowed, e.g. 0x0123 is valid.\n   *\n   * Learn more about the different address formats by reading AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @param input A hex string representing an account address.\n   * @param args.maxMissingChars The number of characters that can be missing in a padded address before it is invalid.\n   *\n   * @returns An instance of AccountAddress.\n   *\n   * @throws ParsingError if the hex string is too short, too long, or contains invalid characters.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromString(input: string, { maxMissingChars = 4 }: { maxMissingChars?: number } = {}): AccountAddress {\n    let parsedInput = input;\n    // Remove leading 0x for parsing.\n    if (input.startsWith(\"0x\")) {\n      parsedInput = input.slice(2);\n    }\n\n    // Ensure the address string is at least 1 character long.\n    if (parsedInput.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_SHORT,\n      );\n    }\n\n    // Ensure the address string is not longer than 64 characters.\n    if (parsedInput.length > 64) {\n      throw new ParsingError(\n        \"Hex string is too long, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_LONG,\n      );\n    }\n\n    // Ensure that the maxMissingChars is between or equal to 0 and 63.\n    if (maxMissingChars > 63 || maxMissingChars < 0) {\n      throw new ParsingError(\n        `maxMissingChars must be between or equal to 0 and 63. Received ${maxMissingChars}`,\n        AddressInvalidReason.INVALID_PADDING_STRICTNESS,\n      );\n    }\n\n    let addressBytes: Uint8Array;\n    try {\n      // Pad the address with leading zeroes, so it is 64 chars long and then convert\n      // the hex string to bytes. Every two characters in a hex string constitutes a\n      // single byte. So a 64 length hex string becomes a 32 byte array.\n      addressBytes = hexToBytes(parsedInput.padStart(64, \"0\"));\n    } catch (error: any) {\n      // At this point the only way this can fail is if the hex string contains\n      // invalid characters.\n      throw new ParsingError(`Hex characters are invalid: ${error?.message}`, AddressInvalidReason.INVALID_HEX_CHARS);\n    }\n\n    const address = new AccountAddress(addressBytes);\n\n    // Cannot pad the address if it has more than maxMissingChars missing.\n    if (parsedInput.length < 64 - maxMissingChars) {\n      if (!address.isSpecial()) {\n        throw new ParsingError(\n          `Hex string is too short, must be ${64 - maxMissingChars} to 64 chars long, excluding the leading 0x. You may need to fix \nthe addresss by padding it with 0s before passing it to \\`fromString\\` (e.g. <addressString>.padStart(64, '0')). \nReceived ${input}`,\n          AddressInvalidReason.TOO_SHORT,\n        );\n      }\n    }\n\n    return address;\n  }\n\n  /**\n   * Convenience method for creating an AccountAddress from various input types.\n   * This function accepts a string, Uint8Array, or an existing AccountAddress instance and returns the corresponding\n   * AccountAddress.\n   *\n   * @param input - The input to convert into an AccountAddress. This can be a string representation of an address, a Uint8Array,\n   * or an existing AccountAddress.\n   * @param args.maxMissingChars The number of characters that can be missing in a padded address before it is invalid.\n   * @group Implementation\n   * @category Serialization\n   */\n  static from(input: AccountAddressInput, { maxMissingChars = 4 }: { maxMissingChars?: number } = {}): AccountAddress {\n    if (typeof input === \"string\") {\n      return AccountAddress.fromString(input, { maxMissingChars });\n    }\n    if (input instanceof Uint8Array) {\n      return new AccountAddress(input);\n    }\n    return input;\n  }\n\n  /**\n   * Create an AccountAddress from various input types, including strings, Uint8Array, and AccountAddress instances.\n   *\n   * @param input - The input to convert into an AccountAddress, which can be a string, a Uint8Array, or an AccountAddress.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromStrict(input: AccountAddressInput): AccountAddress {\n    if (typeof input === \"string\") {\n      return AccountAddress.fromStringStrict(input);\n    }\n    if (input instanceof Uint8Array) {\n      return new AccountAddress(input);\n    }\n    return input;\n  }\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the provided input is a valid AccountAddress.\n   *\n   * @param args - The arguments for validation.\n   * @param args.input - A hex string representing an account address.\n   * @param args.strict - If true, use strict parsing behavior; if false, use relaxed parsing behavior.\n   *\n   * @returns An object indicating whether the address is valid. If valid, valid = true; if not, valid = false with additional details.\n   * If the address is invalid, invalidReason will explain why it is invalid, and invalidReasonMessage will provide the error message.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isValid(args: { input: AccountAddressInput; strict?: boolean }): ParsingResult<AddressInvalidReason> {\n    try {\n      if (args.strict) {\n        AccountAddress.fromStrict(args.input);\n      } else {\n        AccountAddress.from(args.input);\n      }\n      return { valid: true };\n    } catch (error: any) {\n      return {\n        valid: false,\n        invalidReason: error?.invalidReason,\n        invalidReasonMessage: error?.message,\n      };\n    }\n  }\n\n  /**\n   * Determine if two AccountAddresses are equal based on their underlying byte data.\n   *\n   * @param other - The AccountAddress to compare to.\n   * @returns true if the AccountAddresses are equal, false if not.\n   * @group Implementation\n   * @category Serialization\n   */\n  equals(other: AccountAddress): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n"],"names":["bytesToHex","hexToBytes","AddressInvalidReason","_AccountAddress","Serializable","input","ParsingError","byte","hex","bytesToHex","serializer","bcsBytes","deserializer","bytes","address","maxMissingChars","parsedInput","addressBytes","hexToBytes","error","args","other","value","index","AccountAddress"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 857, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/rotationProofChallenge.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core/accountAddress\";\nimport { AnyNumber } from \"../../types\";\nimport { PublicKey } from \"../../core/crypto\";\nimport { MoveString, MoveVector, U64, U8 } from \"../../bcs\";\n\n/**\n * Represents a challenge required for the account owner to sign in order to rotate the authentication key.\n * @group Implementation\n * @category Transactions\n */\nexport class RotationProofChallenge extends Serializable {\n  // Resource account address\n  public readonly accountAddress: AccountAddress = AccountAddress.ONE;\n\n  // Module name, i.e: 0x1::account\n  public readonly moduleName: MoveString = new MoveString(\"account\");\n\n  // The rotation proof challenge struct name that live under the module\n  public readonly structName: MoveString = new MoveString(\"RotationProofChallenge\");\n\n  // Signer's address\n  public readonly originator: AccountAddress;\n\n  // Signer's current authentication key\n  public readonly currentAuthKey: AccountAddress;\n\n  // New public key to rotate to\n  public readonly newPublicKey: MoveVector<U8>;\n\n  // Sequence number of the account\n  public readonly sequenceNumber: U64;\n\n  /**\n   * Initializes a new instance of the class with the specified parameters.\n   * This constructor sets up the necessary attributes for managing account keys.\n   *\n   * @param args - The parameters required to create the instance.\n   * @param args.sequenceNumber - The sequence number associated with the transaction.\n   * @param args.originator - The account address of the originator.\n   * @param args.currentAuthKey - The current authentication key of the account.\n   * @param args.newPublicKey - The new public key to be set for the account.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(args: {\n    sequenceNumber: AnyNumber;\n    originator: AccountAddress;\n    currentAuthKey: AccountAddress;\n    newPublicKey: PublicKey;\n  }) {\n    super();\n    this.sequenceNumber = new U64(args.sequenceNumber);\n    this.originator = args.originator;\n    this.currentAuthKey = args.currentAuthKey;\n    this.newPublicKey = MoveVector.U8(args.newPublicKey.toUint8Array());\n  }\n\n  /**\n   * Serializes the properties of the current instance for transmission or storage.\n   * This function helps in converting the instance data into a format suitable for serialization.\n   *\n   * @param serializer - The serializer used to serialize the instance properties.\n   * @param serializer.accountAddress - The account address to serialize.\n   * @param serializer.moduleName - The module name to serialize.\n   * @param serializer.structName - The struct name to serialize.\n   * @param serializer.sequenceNumber - The sequence number to serialize.\n   * @param serializer.originator - The originator to serialize.\n   * @param serializer.currentAuthKey - The current authentication key to serialize.\n   * @param serializer.newPublicKey - The new public key to serialize.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.accountAddress);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.structName);\n    serializer.serialize(this.sequenceNumber);\n    serializer.serialize(this.originator);\n    serializer.serialize(this.currentAuthKey);\n    serializer.serialize(this.newPublicKey);\n  }\n}\n"],"names":["RotationProofChallenge","Serializable","args","AccountAddress","MoveString","U64","MoveVector","serializer"],"mappings":";;;;;;;;;;;AAcO,IAAMA,IAAN,2PAAqCC,IAAa;IAkCvD,YAAYC,CAAAA,CAKT;QACD,KAAA,CAAM;QAtCR,IAAA,CAAgB,cAAA,gPAAiCC,IAAAA,CAAe,GAAA;QAGhE,IAAA,CAAgB,UAAA,GAAyB,iPAAIC,IAAAA,CAAW,SAAS;QAGjE,IAAA,CAAgB,UAAA,GAAyB,iPAAIA,IAAAA,CAAW,wBAAwB;QAiC9E,IAAA,CAAK,cAAA,GAAiB,iPAAIC,IAAAA,CAAIH,EAAK,cAAc,GACjD,IAAA,CAAK,UAAA,GAAaA,EAAK,UAAA,EACvB,IAAA,CAAK,cAAA,GAAiBA,EAAK,cAAA,EAC3B,IAAA,CAAK,YAAA,gPAAeI,IAAAA,CAAW,EAAA,CAAGJ,EAAK,YAAA,CAAa,YAAA,CAAa,CAAC;IACpE;IAiBA,UAAUK,CAAAA,EAA8B;QACtCA,EAAW,SAAA,CAAU,IAAA,CAAK,cAAc,GACxCA,EAAW,SAAA,CAAU,IAAA,CAAK,UAAU,GACpCA,EAAW,SAAA,CAAU,IAAA,CAAK,UAAU,GACpCA,EAAW,SAAA,CAAU,IAAA,CAAK,cAAc,GACxCA,EAAW,SAAA,CAAU,IAAA,CAAK,UAAU,GACpCA,EAAW,SAAA,CAAU,IAAA,CAAK,cAAc,GACxCA,EAAW,SAAA,CAAU,IAAA,CAAK,YAAY;IACxC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 888, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/utils/memoize.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The global cache Map shared across all functions.  Must keep care to ensure that the\n * cache keys are unique across all functions.\n * @group Implementation\n * @category Utils\n */\nconst cache = new Map<string, { value: any; timestamp: number }>();\n\n/**\n * A memoize higher-order function to cache the response of an async function.\n * This function helps to improve performance by avoiding repeated calls to the same async function with the same arguments\n * within a specified time-to-live (TTL).\n *\n * @param func The async function to cache the result of.\n * @param key The cache key used to store the result.\n * @param ttlMs The time-to-live in milliseconds for cached data.\n * @returns The cached or latest result.\n * @group Implementation\n * @category Utils\n */\nexport function memoizeAsync<T>(\n  func: (...args: any[]) => Promise<T>,\n  key: string,\n  ttlMs?: number,\n): (...args: any[]) => Promise<T> {\n  return async (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = await func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n\n/**\n * Caches the result of a function call to improve performance on subsequent calls with the same arguments.\n *\n * @param key - The key to cache on, all accesses by this key will return the cached value.\n * @param func - The function whose result will be cached.\n * @param ttlMs - The time-to-live in milliseconds for cached data.\n * @returns A memoized version of the provided function that returns the cached result if available and within TTL.\n * @group Implementation\n * @category Utils\n */\nexport function memoize<T>(func: (...args: any[]) => T, key: string, ttlMs?: number): (...args: any[]) => T {\n  return (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n"],"names":["cache","memoizeAsync","func","key","ttlMs","args","value","timestamp","result","memoize"],"mappings":";;;;AASA,IAAMA,IAAQ,IAAI;AAcX,SAASC,EACdC,CAAAA,EACAC,CAAAA,EACAC,CAAAA,CACgC;IAChC,MAAO,CAAA,OAAA,GAAUC,IAAgB;QAE/B,IAAIL,EAAM,GAAA,CAAIG,CAAG,GAAG;YAClB,IAAM,EAAE,OAAAG,CAAAA,EAAO,WAAAC,CAAU,EAAA,GAAIP,EAAM,GAAA,CAAIG,CAAG;YAC1C,IAAIC,MAAU,KAAA,KAAa,KAAK,GAAA,CAAI,IAAIG,KAAaH,GACnD,OAAOE;QAEX;QAGA,IAAME,IAAS,MAAMN,EAAK,GAAGG,CAAI;QAGjC,OAAAL,EAAM,GAAA,CAAIG,GAAK;YAAE,OAAOK;YAAQ,WAAW,KAAK,GAAA,CAAI;QAAE,CAAC,GAEhDA;IACT;AACF;AAYO,SAASC,EAAWP,CAAAA,EAA6BC,CAAAA,EAAaC,CAAAA,CAAuC;IAC1G,OAAO,CAAA,GAAIC,IAAgB;QAEzB,IAAIL,EAAM,GAAA,CAAIG,CAAG,GAAG;YAClB,IAAM,EAAE,OAAAG,CAAAA,EAAO,WAAAC,CAAU,EAAA,GAAIP,EAAM,GAAA,CAAIG,CAAG;YAC1C,IAAIC,MAAU,KAAA,KAAa,KAAK,GAAA,CAAI,IAAIG,KAAaH,GACnD,OAAOE;QAEX;QAGA,IAAME,IAASN,EAAK,GAAGG,CAAI;QAG3B,OAAAL,EAAM,GAAA,CAAIG,GAAK;YAAE,OAAOK;YAAQ,WAAW,KAAK,GAAA,CAAI;QAAE,CAAC,GAEhDA;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 927, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/account/utils/address.ts"],"sourcesContent":["import { sha3_256 } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"../../accountAddress\";\nimport { DeriveScheme } from \"../../../types\";\n\n/**\n * Creates an object address from creator address and seed\n *\n * @param creatorAddress The object creator account address\n * @param seed The seed in either Uint8Array | string type\n *\n * @returns The object account address\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport const createObjectAddress = (creatorAddress: AccountAddress, seed: Uint8Array | string): AccountAddress => {\n  const creatorBytes = creatorAddress.bcsToBytes();\n\n  const seedBytes = typeof seed === \"string\" ? Buffer.from(seed, \"utf8\") : seed;\n\n  const bytes = new Uint8Array([...creatorBytes, ...seedBytes, DeriveScheme.DeriveObjectAddressFromSeed]);\n\n  return new AccountAddress(sha3_256(bytes));\n};\n\n/**\n * Creates a resource address from creator address and seed\n *\n * @param creatorAddress The creator account address\n * @param seed The seed in either Uint8Array | string type\n *\n * @returns The resource account address\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport const createResourceAddress = (creatorAddress: AccountAddress, seed: Uint8Array | string): AccountAddress => {\n  const creatorBytes = creatorAddress.bcsToBytes();\n\n  const seedBytes = typeof seed === \"string\" ? Buffer.from(seed, \"utf8\") : seed;\n\n  const bytes = new Uint8Array([...creatorBytes, ...seedBytes, DeriveScheme.DeriveResourceAccountAddress]);\n\n  return new AccountAddress(sha3_256(bytes));\n};\n\n/**\n * Creates a token object address from creator address, collection name and token name\n *\n * @param creatorAddress The token creator account address\n * @param collectionName The collection name\n * @param tokenName The token name\n *\n * @returns The token account address\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport const createTokenAddress = (\n  creatorAddress: AccountAddress,\n  collectionName: string,\n  tokenName: string,\n): AccountAddress => {\n  const seed = `${collectionName}::${tokenName}`;\n  return createObjectAddress(creatorAddress, seed);\n};\n"],"names":["sha3_256","createObjectAddress","creatorAddress","seed","creatorBytes","seedBytes","bytes","AccountAddress","sha3_256","createResourceAddress","createTokenAddress","collectionName","tokenName"],"mappings":";;;;;AAiB+C;;AAjB/C,OAAS,YAAAA,MAAgB;;;AAclB,IAAMC,IAAsB,CAACC,GAAgCC,IAA8C;IAChH,IAAMC,IAAeF,EAAe,UAAA,CAAW,GAEzCG,IAAY,OAAOF,KAAS,mLAAW,CAAO,IAAA,CAAKA,GAAM,MAAM,IAAIA,GAEnEG,IAAQ,IAAI,WAAW,CAAC;WAAGF,EAAc;WAAGC;QAAAA,GAAmD;KAAC;IAEtG,OAAO,iPAAIE,IAAAA,oKAAeC,EAASF,CAAK,CAAC;AAC3C,GAYaG,IAAwB,CAACP,GAAgCC,IAA8C;IAClH,IAAMC,IAAeF,EAAe,UAAA,CAAW,GAEzCG,IAAY,OAAOF,KAAS,0KAAW,SAAA,CAAO,IAAA,CAAKA,GAAM,MAAM,IAAIA,GAEnEG,IAAQ,IAAI,WAAW,CAAC;WAAGF,EAAc;WAAGC;QAAAA,GAAoD;KAAC;IAEvG,OAAO,iPAAIE,IAAAA,oKAAeC,EAASF,CAAK,CAAC;AAC3C,GAaaI,IAAqB,CAChCR,GACAS,GACAC,IACmB;IACnB,IAAMT,IAAO,GAAGQ,CAAc,CAAA,EAAA,EAAKC,CAAS,EAAA;IAC5C,OAAOX,EAAoBC,GAAgBC,CAAI;AACjD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 963, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/utils/helpers.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { decode } from \"js-base64\";\nimport { MoveFunctionId, MoveStructId } from \"../types\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { createObjectAddress } from \"../core/account/utils/address\";\n\n/**\n * Sleep for the specified amount of time in milliseconds.\n * This function can be used to introduce delays in asynchronous operations.\n *\n * @param timeMs - The time in milliseconds to sleep.\n * @group Implementation\n * @category Utils\n */\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n\n/**\n * Get the error message from an unknown error.\n *\n * @param error The error to get the message from\n * @returns The error message\n * @group Implementation\n * @category Utils\n */\nexport function getErrorMessage(error: unknown): string {\n  return error instanceof Error ? error.message : String(error);\n}\n\n/**\n * @group Implementation\n * @category Utils\n */\nexport const nowInSeconds = () => Math.floor(Date.now() / 1000);\n\n/**\n * Floors the given timestamp to the nearest whole hour.\n * This function is useful for normalizing timestamps to hourly intervals.\n *\n * @param timestampInSeconds - The timestamp in seconds to be floored.\n * @group Implementation\n * @category Utils\n */\nexport function floorToWholeHour(timestampInSeconds: number): number {\n  const date = new Date(timestampInSeconds * 1000);\n  // Reset minutes and seconds to zero\n  date.setMinutes(0);\n  date.setSeconds(0);\n  date.setMilliseconds(0);\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Decodes a base64 URL-encoded string into its original form.\n * This function is useful for converting base64 URL-encoded data back to a readable format.\n *\n * @param base64Url - The base64 URL-encoded string to decode.\n * @returns The decoded string.\n * @group Implementation\n * @category Utils\n */\nexport function base64UrlDecode(base64Url: string): string {\n  // Replace base64url-specific characters\n  const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Pad the string with '=' characters if needed\n  const paddedBase64 = base64 + \"==\".substring(0, (3 - (base64.length % 3)) % 3);\n  const decodedString = decode(paddedBase64);\n  return decodedString;\n}\n\nexport function base64UrlToBytes(base64Url: string): Uint8Array {\n  // Convert Base64Url to Base64\n  let base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Add padding if needed\n  while (base64.length % 4 !== 0) {\n    base64 += \"=\";\n  }\n  // Use Buffer to convert base64 to Uint8Array\n  return new Uint8Array(Buffer.from(base64, \"base64\"));\n}\n\n/**\n * Amount is represented in the smallest unit format on chain, this function converts\n * a human-readable amount format to the smallest unit format\n * @example\n * human-readable amount format: 500\n * on chain amount format when decimal is 8: 50000000000\n *\n * @param value The value in human-readable format\n * @param decimal The token decimal\n * @returns The value in the smallest units\n * @group Implementation\n * @category Utils\n */\nexport const convertAmountFromHumanReadableToOnChain = (value: number, decimal: number) => value * 10 ** decimal;\n\n/**\n * Amount is represented in the smallest unit format on chain, this function converts\n * the smallest unit format to a human-readable amount format\n * @example\n * human-readable amount format: 500\n * on chain amount format when decimal is 8: 50000000000\n *\n * @param value The value in human-readable format\n * @param decimal The token decimal\n * @returns The value in the smallest units\n * @group Implementation\n * @category Utils\n */\nexport const convertAmountFromOnChainToHumanReadable = (value: number, decimal: number) => value / 10 ** decimal;\n\n/**\n * Convert a hex string to an ascii string with the `0x` prefix.\n *\n * `0x6170746f735f636f696e` --> `aptos_coin`\n *\n * @param hex The hex string to convert (e.g. `0x6170746f735f636f696e`)\n * @returns The ascii string\n * @group Implementation\n * @category Utils\n */\nconst hexToAscii = (hex: string) => {\n  let str = \"\";\n  for (let n = 2; n < hex.length; n += 2) {\n    str += String.fromCharCode(parseInt(hex.substring(n, n + 2), 16));\n  }\n  return str;\n};\n\n/**\n * Convert an encoded struct to a MoveStructId.\n *\n * @example\n * const structObj = {\n *   account_address: \"0x1\",\n *   module_name: \"0x6170746f735f636f696e\",\n *   struct_name: \"0x4170746f73436f696e\",\n * };\n * // structId is \"0x1::aptos_coin::AptosCoin\"\n * const structId = parseEncodedStruct(structObj);\n *\n * @param structObj The struct with account_address, module_name, and struct_name properties\n * @returns The MoveStructId\n * @group Implementation\n * @category Utils\n */\nexport const parseEncodedStruct = (structObj: {\n  account_address: string;\n  module_name: string;\n  struct_name: string;\n}): MoveStructId => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { account_address, module_name, struct_name } = structObj;\n  const moduleName = hexToAscii(module_name);\n  const structName = hexToAscii(struct_name);\n  return `${account_address}::${moduleName}::${structName}`;\n};\n\n/**\n * Determines whether the given object is an encoded struct type with the following properties:\n * - account_address: string\n * - module_name: string\n * - struct_name: string\n *\n * @param structObj The object to check\n * @returns Whether the object is an encoded struct type\n * @group Implementation\n * @category Utils\n */\nexport const isEncodedStruct = (\n  structObj: any,\n): structObj is {\n  account_address: string;\n  module_name: string;\n  struct_name: string;\n} =>\n  typeof structObj === \"object\" &&\n  !Array.isArray(structObj) &&\n  structObj !== null &&\n  \"account_address\" in structObj &&\n  \"module_name\" in structObj &&\n  \"struct_name\" in structObj &&\n  typeof structObj.account_address === \"string\" &&\n  typeof structObj.module_name === \"string\" &&\n  typeof structObj.struct_name === \"string\";\n\n/**\n * Splits a function identifier into its constituent parts: module address, module name, and function name.\n * This function helps in validating and extracting details from a function identifier string.\n *\n * @param functionArg - The function identifier string in the format \"moduleAddress::moduleName::functionName\".\n * @returns An object containing the module address, module name, and function name.\n * @throws Error if the function identifier does not contain exactly three parts.\n * @group Implementation\n * @category Transactions\n */\nexport function getFunctionParts(functionArg: MoveFunctionId) {\n  const funcNameParts = functionArg.split(\"::\");\n  if (funcNameParts.length !== 3) {\n    throw new Error(`Invalid function ${functionArg}`);\n  }\n  const moduleAddress = funcNameParts[0];\n  const moduleName = funcNameParts[1];\n  const functionName = funcNameParts[2];\n  return { moduleAddress, moduleName, functionName };\n}\n\n/**\n * Validates the provided function information.\n *\n * @param functionInfo - The function information to validate.\n * @returns Whether the function information is valid.\n * @group Implementation\n * @category Utils\n */\nexport function isValidFunctionInfo(functionInfo: string): boolean {\n  const parts = functionInfo.split(\"::\");\n  return parts.length === 3 && AccountAddress.isValid({ input: parts[0] }).valid;\n}\n\n/**\n * Truncates the provided wallet address at the middle with an ellipsis.\n *\n * @param address - The wallet address to truncate.\n * @param start - The number of characters to show at the beginning of the address.\n * @param end - The number of characters to show at the end of the address.\n * @returns The truncated address.\n * @group Implementation\n * @category Utils\n */\nexport function truncateAddress(address: string, start: number = 6, end: number = 5) {\n  return `${address.slice(0, start)}...${address.slice(-end)}`;\n}\n\n/**\n * Constants for metadata address calculation\n */\nconst APTOS_COIN_TYPE_STR = \"0x1::aptos_coin::AptosCoin\";\nconst APT_METADATA_ADDRESS_HEX = AccountAddress.A.toStringLong();\n\n/**\n * Helper function to standardize Move type string by converting all addresses to short form,\n * including addresses within nested type parameters\n */\nfunction standardizeMoveTypeString(input: string): string {\n  // Regular expression to match addresses in the type string, including those within type parameters\n  // This regex matches \"0x\" followed by hex digits, handling both standalone addresses and those within <>\n  const addressRegex = /0x[0-9a-fA-F]+/g;\n\n  return input.replace(addressRegex, (match) => {\n    // Use AccountAddress to handle the address\n    return AccountAddress.from(match, { maxMissingChars: 63 }).toStringShort();\n  });\n}\n\n/**\n * Calculates the paired FA metadata address for a given coin type.\n * This function is tolerant of various address formats in the coin type string,\n * including complex nested types.\n *\n * @example\n * // All these formats are valid and will produce the same result:\n * pairedFaMetadataAddress(\"0x1::aptos_coin::AptosCoin\")  // simple form\n * pairedFaMetadataAddress(\"0x0000000000000000000000000000000000000000000000000000000000000001::aptos_coin::AptosCoin\")  // long form\n * pairedFaMetadataAddress(\"0x00001::aptos_coin::AptosCoin\")  // with leading zeros\n * pairedFaMetadataAddress(\"0x1::coin::Coin<0x1412::a::struct<0x0001::aptos_coin::AptosCoin>>\")  // nested type parameters\n *\n * @param coinType - The coin type string in any of these formats:\n *   - Short form address: \"0x1::aptos_coin::AptosCoin\"\n *   - Long form address: \"0x0000000000000000000000000000000000000000000000000000000000000001::aptos_coin::AptosCoin\"\n *   - With leading zeros: \"0x00001::aptos_coin::AptosCoin\"\n *   - With nested types: \"0x1::coin::Coin<0x1412::a::struct<0x0001::aptos_coin::AptosCoin>>\"\n * @returns The calculated metadata address as an AccountAddress instance\n */\nexport function pairedFaMetadataAddress(coinType: `0x${string}::${string}::${string}`): AccountAddress {\n  // Standardize the coin type string to handle any address format\n  const standardizedMoveTypeName = standardizeMoveTypeString(coinType);\n\n  return standardizedMoveTypeName === APTOS_COIN_TYPE_STR\n    ? AccountAddress.A\n    : createObjectAddress(AccountAddress.A, standardizedMoveTypeName);\n}\n"],"names":["decode","sleep","timeMs","resolve","getErrorMessage","error","nowInSeconds","floorToWholeHour","timestampInSeconds","date","base64UrlDecode","base64Url","base64","paddedBase64","decode","base64UrlToBytes","convertAmountFromHumanReadableToOnChain","value","decimal","convertAmountFromOnChainToHumanReadable","hexToAscii","hex","str","n","parseEncodedStruct","structObj","account_address","module_name","struct_name","moduleName","structName","isEncodedStruct","getFunctionParts","functionArg","funcNameParts","moduleAddress","functionName","isValidFunctionInfo","functionInfo","parts","AccountAddress","truncateAddress","address","start","end","APTOS_COIN_TYPE_STR","APT_METADATA_ADDRESS_HEX","standardizeMoveTypeString","input","addressRegex","match","pairedFaMetadataAddress","coinType","standardizedMoveTypeName","createObjectAddress"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1054, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/errors/index.ts"],"sourcesContent":["import { AptosApiType } from \"../utils/const\";\nimport { getErrorMessage } from \"../utils/helpers\";\nimport { AptosRequest, AptosResponse } from \"../types\";\n\nexport enum KeylessErrorCategory {\n  API_ERROR,\n  EXTERNAL_API_ERROR,\n  SESSION_EXPIRED,\n  INVALID_STATE,\n  INVALID_SIGNATURE,\n  UNKNOWN,\n}\n\nexport enum KeylessErrorResolutionTip {\n  REAUTHENTICATE = \"Re-authentiate to continue using your keyless account\",\n  // eslint-disable-next-line max-len\n  REAUTHENTICATE_UNSURE = \"Try re-authentiating. If the error persists join the telegram group at https://t.me/+h5CN-W35yUFiYzkx for further support\",\n  UPDATE_REQUEST_PARAMS = \"Update the invalid request parameters and reauthenticate.\",\n  // eslint-disable-next-line max-len\n  RATE_LIMIT_EXCEEDED = \"Cache the keyless account and reuse it to avoid making too many requests.  Keyless accounts are valid until either the EphemeralKeyPair expires, when the JWK is rotated, or when the proof verifying key is changed, whichever comes soonest.\",\n  // eslint-disable-next-line max-len\n  SERVER_ERROR = \"Try again later.  See aptosApiError error for more context. For additional support join the telegram group at https://t.me/+h5CN-W35yUFiYzkx\",\n  // eslint-disable-next-line max-len\n  CALL_PRECHECK = \"Call `await account.checkKeylessAccountValidity()` to wait for asyncronous changes and check for account validity before signing or serializing.\",\n  REINSTANTIATE = \"Try instantiating the account again.  Avoid manipulating the account object directly\",\n  JOIN_SUPPORT_GROUP = \"For support join the telegram group at https://t.me/+h5CN-W35yUFiYzkx\",\n  UNKNOWN = \"Error unknown. For support join the telegram group at https://t.me/+h5CN-W35yUFiYzkx\",\n}\n\nexport enum KeylessErrorType {\n  EPHEMERAL_KEY_PAIR_EXPIRED,\n\n  PROOF_NOT_FOUND,\n\n  ASYNC_PROOF_FETCH_FAILED,\n\n  INVALID_PROOF_VERIFICATION_FAILED,\n\n  INVALID_PROOF_VERIFICATION_KEY_NOT_FOUND,\n\n  INVALID_JWT_SIG,\n\n  INVALID_JWT_JWK_NOT_FOUND,\n\n  INVALID_JWT_ISS_NOT_RECOGNIZED,\n\n  INVALID_JWT_FEDERATED_ISS_NOT_SUPPORTED,\n\n  INVALID_TW_SIG_VERIFICATION_FAILED,\n\n  INVALID_TW_SIG_PUBLIC_KEY_NOT_FOUND,\n\n  INVALID_EXPIRY_HORIZON,\n\n  JWT_PARSING_ERROR,\n\n  JWK_FETCH_FAILED,\n\n  JWK_FETCH_FAILED_FEDERATED,\n\n  RATE_LIMIT_EXCEEDED,\n\n  PEPPER_SERVICE_INTERNAL_ERROR,\n\n  PEPPER_SERVICE_BAD_REQUEST,\n\n  PEPPER_SERVICE_OTHER,\n\n  PROVER_SERVICE_INTERNAL_ERROR,\n\n  PROVER_SERVICE_BAD_REQUEST,\n\n  PROVER_SERVICE_OTHER,\n\n  FULL_NODE_CONFIG_LOOKUP_ERROR,\n\n  FULL_NODE_VERIFICATION_KEY_LOOKUP_ERROR,\n\n  FULL_NODE_JWKS_LOOKUP_ERROR,\n\n  FULL_NODE_OTHER,\n\n  SIGNATURE_TYPE_INVALID,\n\n  SIGNATURE_EXPIRED,\n\n  MAX_EXPIRY_HORIZON_EXCEEDED,\n\n  EPHEMERAL_SIGNATURE_VERIFICATION_FAILED,\n\n  TRAINING_WHEELS_SIGNATURE_MISSING,\n\n  TRAINING_WHEELS_SIGNATURE_VERIFICATION_FAILED,\n\n  PROOF_VERIFICATION_FAILED,\n\n  UNKNOWN,\n}\n\nconst KeylessErrors: { [key in KeylessErrorType]: [string, KeylessErrorCategory, KeylessErrorResolutionTip] } = {\n  [KeylessErrorType.EPHEMERAL_KEY_PAIR_EXPIRED]: [\n    \"The ephemeral keypair has expired.\",\n    KeylessErrorCategory.SESSION_EXPIRED,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.PROOF_NOT_FOUND]: [\n    \"The required proof could not be found.\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.CALL_PRECHECK,\n  ],\n  [KeylessErrorType.ASYNC_PROOF_FETCH_FAILED]: [\n    \"The required proof failed to fetch.\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.REAUTHENTICATE_UNSURE,\n  ],\n  [KeylessErrorType.INVALID_PROOF_VERIFICATION_FAILED]: [\n    \"The provided proof is invalid.\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.REAUTHENTICATE_UNSURE,\n  ],\n  [KeylessErrorType.INVALID_PROOF_VERIFICATION_KEY_NOT_FOUND]: [\n    \"The verification key used to authenticate was updated.\",\n    KeylessErrorCategory.SESSION_EXPIRED,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.INVALID_JWT_SIG]: [\n    \"The JWK was found, but JWT failed verification\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.REAUTHENTICATE_UNSURE,\n  ],\n  [KeylessErrorType.INVALID_JWT_JWK_NOT_FOUND]: [\n    \"The JWK required to verify the JWT could not be found. The JWK may have been rotated out.\",\n    KeylessErrorCategory.SESSION_EXPIRED,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.INVALID_JWT_ISS_NOT_RECOGNIZED]: [\n    \"The JWT issuer is not recognized.\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.UPDATE_REQUEST_PARAMS,\n  ],\n  [KeylessErrorType.INVALID_JWT_FEDERATED_ISS_NOT_SUPPORTED]: [\n    \"The JWT issuer is not supported by the Federated Keyless \",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.REAUTHENTICATE_UNSURE,\n  ],\n  [KeylessErrorType.INVALID_TW_SIG_VERIFICATION_FAILED]: [\n    \"The training wheels signature is invalid.\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.REAUTHENTICATE_UNSURE,\n  ],\n  [KeylessErrorType.INVALID_TW_SIG_PUBLIC_KEY_NOT_FOUND]: [\n    \"The public key used to verify the training wheels signature was not found.\",\n    KeylessErrorCategory.SESSION_EXPIRED,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.INVALID_EXPIRY_HORIZON]: [\n    \"The expiry horizon is invalid.\",\n    KeylessErrorCategory.SESSION_EXPIRED,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.JWK_FETCH_FAILED]: [\n    \"Failed to fetch JWKS.\",\n    KeylessErrorCategory.EXTERNAL_API_ERROR,\n    KeylessErrorResolutionTip.JOIN_SUPPORT_GROUP,\n  ],\n  [KeylessErrorType.JWK_FETCH_FAILED_FEDERATED]: [\n    \"Failed to fetch JWKS for Federated Keyless provider.\",\n    KeylessErrorCategory.EXTERNAL_API_ERROR,\n    KeylessErrorResolutionTip.JOIN_SUPPORT_GROUP,\n  ],\n  [KeylessErrorType.RATE_LIMIT_EXCEEDED]: [\n    \"Rate limit exceeded. Too many requests in a short period.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.RATE_LIMIT_EXCEEDED,\n  ],\n  [KeylessErrorType.PEPPER_SERVICE_INTERNAL_ERROR]: [\n    \"Internal error from Pepper service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.PEPPER_SERVICE_BAD_REQUEST]: [\n    \"Bad request sent to Pepper service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.UPDATE_REQUEST_PARAMS,\n  ],\n  [KeylessErrorType.PEPPER_SERVICE_OTHER]: [\n    \"Unknown error from Pepper service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.PROVER_SERVICE_INTERNAL_ERROR]: [\n    \"Internal error from Prover service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.PROVER_SERVICE_BAD_REQUEST]: [\n    \"Bad request sent to Prover service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.UPDATE_REQUEST_PARAMS,\n  ],\n  [KeylessErrorType.PROVER_SERVICE_OTHER]: [\n    \"Unknown error from Prover service.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.JWT_PARSING_ERROR]: [\n    \"Error when parsing JWT. This should never happen. Join https://t.me/+h5CN-W35yUFiYzkx for support\",\n    KeylessErrorCategory.INVALID_STATE,\n    KeylessErrorResolutionTip.REINSTANTIATE,\n  ],\n  [KeylessErrorType.FULL_NODE_CONFIG_LOOKUP_ERROR]: [\n    \"Error when looking up on-chain keyless configuration.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.FULL_NODE_VERIFICATION_KEY_LOOKUP_ERROR]: [\n    \"Error when looking up on-chain verification key.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.FULL_NODE_JWKS_LOOKUP_ERROR]: [\n    \"Error when looking up on-chain JWKS.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.FULL_NODE_OTHER]: [\n    \"Unknown error from full node.\",\n    KeylessErrorCategory.API_ERROR,\n    KeylessErrorResolutionTip.SERVER_ERROR,\n  ],\n  [KeylessErrorType.SIGNATURE_TYPE_INVALID]: [\n    \"The signature is not a valid Keyless signature.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.JOIN_SUPPORT_GROUP,\n  ],\n  [KeylessErrorType.SIGNATURE_EXPIRED]: [\n    \"The ephemeral key pair used to sign the message has expired.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.MAX_EXPIRY_HORIZON_EXCEEDED]: [\n    \"The expiry horizon on the signature exceeds the maximum allowed value.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.EPHEMERAL_SIGNATURE_VERIFICATION_FAILED]: [\n    \"Failed to verify the ephemeral signature with the ephemeral public key.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.TRAINING_WHEELS_SIGNATURE_MISSING]: [\n    \"The training wheels signature is missing but is required by the Keyless configuration.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.TRAINING_WHEELS_SIGNATURE_VERIFICATION_FAILED]: [\n    \"Failed to verify the training wheels signature with the training wheels public key.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.PROOF_VERIFICATION_FAILED]: [\n    \"The proof verification failed.\",\n    KeylessErrorCategory.INVALID_SIGNATURE,\n    KeylessErrorResolutionTip.REAUTHENTICATE,\n  ],\n  [KeylessErrorType.UNKNOWN]: [\n    \"An unknown error has occurred.\",\n    KeylessErrorCategory.UNKNOWN,\n    KeylessErrorResolutionTip.UNKNOWN,\n  ],\n};\n\nexport class KeylessError extends Error {\n  readonly innerError?: unknown;\n\n  readonly category: KeylessErrorCategory;\n\n  readonly resolutionTip: KeylessErrorResolutionTip;\n\n  readonly type: KeylessErrorType;\n\n  readonly details?: string;\n\n  /** @internal this constructor is for sdk internal use - do not instantiate outside of the SDK codebase */\n  constructor(args: {\n    innerError?: unknown;\n    category: KeylessErrorCategory;\n    resolutionTip: KeylessErrorResolutionTip;\n    type: KeylessErrorType;\n    message?: string;\n    details?: string;\n  }) {\n    const { innerError, category, resolutionTip, type, message = KeylessErrors[type][0], details } = args;\n    super(message);\n    this.name = \"KeylessError\";\n    this.innerError = innerError;\n    this.category = category;\n    this.resolutionTip = resolutionTip;\n    this.type = type;\n    this.details = details;\n    this.message = KeylessError.constructMessage(message, resolutionTip, innerError, details);\n  }\n\n  static constructMessage(\n    message: string,\n    tip: KeylessErrorResolutionTip,\n    innerError?: unknown,\n    details?: string,\n  ): string {\n    let result = `\\nMessage: ${message}`;\n    if (details) {\n      result += `\\nDetails: ${details}`;\n    }\n    if (innerError instanceof AptosApiError) {\n      result += `\\nAptosApiError: ${innerError.message}`;\n    } else if (innerError !== undefined) {\n      result += `\\nError: ${getErrorMessage(innerError)}`;\n    }\n    result += `\\nKeylessErrorResolutionTip: ${tip}`;\n    return result;\n  }\n\n  /**\n   * Static constructor that creates a KeylessError instance using the KeylessErrors constant\n   * @param args.type The type of KeylessError\n   * @param args.aptosApiError optional AptosApiError supplied for api errors\n   * @param args.details optional details to include in the error message\n   * @returns A new KeylessError instance\n   */\n  static fromErrorType(args: { type: KeylessErrorType; error?: unknown; details?: string }): KeylessError {\n    const { error, type, details } = args;\n\n    const [message, category, resolutionTip] = KeylessErrors[type];\n    return new KeylessError({\n      message,\n      details,\n      innerError: error,\n      category,\n      resolutionTip,\n      type,\n    });\n  }\n}\n\n/**\n * Options for handling errors in the Aptos API.\n */\ntype AptosApiErrorOpts = {\n  apiType: AptosApiType;\n  aptosRequest: AptosRequest;\n  aptosResponse: AptosResponse<any, any>;\n};\n\n/**\n * Represents an error returned from the Aptos API.\n * This class encapsulates the details of the error, including the request URL, response status, and additional data.\n *\n * @param name - The name of the error, which is always \"AptosApiError\".\n * @param url - The URL to which the request was made.\n * @param status - The HTTP response status code (e.g., 400).\n * @param statusText - The message associated with the response status.\n * @param data - The response data returned from the API.\n * @param request - The original AptosRequest that triggered the error.\n */\nexport class AptosApiError extends Error {\n  readonly url: string;\n\n  readonly status: number;\n\n  readonly statusText: string;\n\n  readonly data: any;\n\n  readonly request: AptosRequest;\n\n  /**\n   * Constructs an instance of AptosApiError with relevant error details.\n   *\n   * @param opts - The options for creating the AptosApiError.\n   * @param opts.apiType - The type of API that generated the error.\n   * @param opts.aptosRequest - The request object that caused the error.\n   * @param opts.aptosResponse - The response object containing error details.\n   *\n   * @internal This constructor is for SDK internal use - do not instantiate outside the SDK codebase.\n   */\n  constructor({ apiType, aptosRequest, aptosResponse }: AptosApiErrorOpts) {\n    super(deriveErrorMessage({ apiType, aptosRequest, aptosResponse }));\n\n    this.name = \"AptosApiError\";\n    this.url = aptosResponse.url;\n    this.status = aptosResponse.status;\n    this.statusText = aptosResponse.statusText;\n    this.data = aptosResponse.data;\n    this.request = aptosRequest;\n  }\n}\n\n/**\n * Derives an error message from the Aptos API response, providing context for debugging.\n * This function helps in understanding the nature of the error encountered during an API request.\n *\n * @param {AptosApiErrorOpts} opts - The options for deriving the error message.\n * @param {AptosApiType} opts.apiType - The type of API being called.\n * @param {AptosRequest} opts.aptosRequest - The original request made to the Aptos API.\n * @param {AptosResponse} opts.aptosResponse - The response received from the Aptos API.\n */\nfunction deriveErrorMessage({ apiType, aptosRequest, aptosResponse }: AptosApiErrorOpts): string {\n  // eslint-disable-next-line max-len\n  // extract the W3C trace_id from the response headers if it exists. Some services set this in the response, and it's useful for debugging.\n  // See https://www.w3.org/TR/trace-context/#relationship-between-the-headers .\n  const traceId = aptosResponse.headers?.traceparent?.split(\"-\")[1];\n  const traceIdString = traceId ? `(trace_id:${traceId}) ` : \"\";\n\n  const errorPrelude: string = `Request to [${apiType}]: ${aptosRequest.method} ${\n    aptosResponse.url ?? aptosRequest.url\n  } ${traceIdString}failed with`;\n\n  // handle graphql responses from indexer api and extract the error message of the first error\n  if (apiType === AptosApiType.INDEXER && aptosResponse.data?.errors?.[0]?.message != null) {\n    return `${errorPrelude}: ${aptosResponse.data.errors[0].message}`;\n  }\n\n  // Received well-known structured error response body - simply serialize and return it.\n  // We don't need http status codes etc. in this case.\n  if (aptosResponse.data?.message != null && aptosResponse.data?.error_code != null) {\n    return `${errorPrelude}: ${JSON.stringify(aptosResponse.data)}`;\n  }\n\n  // This is the generic/catch-all case. We received some response from the API, but it doesn't appear to be a well-known structure.\n  // We print http status codes and the response body (after some trimming),\n  // in the hope that this gives enough context what went wrong without printing overly huge messages.\n  return `${errorPrelude} status: ${aptosResponse.statusText}(code:${\n    aptosResponse.status\n  }) and response body: ${serializeAnyPayloadForErrorMessage(aptosResponse.data)}`;\n}\n\nconst SERIALIZED_PAYLOAD_TRIM_TO_MAX_LENGTH = 400;\n\n/**\n * This function accepts a payload of any type (probably an object) and serializes it to a string\n * Since we don't know the type or size of the payload, and we don't want to add a huge object in full to the error message\n * we limit the to the first 200 and last 200 characters of the serialized payload and put a \"...\" in the middle.\n * @param payload - The payload to serialize, which can be of any type.\n *\n * @returns A string representation of the serialized payload, potentially truncated.\n */\nfunction serializeAnyPayloadForErrorMessage(payload: any): string {\n  const serializedPayload = JSON.stringify(payload);\n  if (serializedPayload.length <= SERIALIZED_PAYLOAD_TRIM_TO_MAX_LENGTH) {\n    return serializedPayload;\n  }\n  return `truncated(original_size:${serializedPayload.length}): ${serializedPayload.slice(\n    0,\n    SERIALIZED_PAYLOAD_TRIM_TO_MAX_LENGTH / 2,\n  )}...${serializedPayload.slice(-SERIALIZED_PAYLOAD_TRIM_TO_MAX_LENGTH / 2)}`;\n}\n"],"names":["KeylessErrorCategory","KeylessErrorResolutionTip","KeylessErrorType","KeylessErrors","KeylessError","_KeylessError","args","innerError","category","resolutionTip","type","message","details","tip","result","AptosApiError","getErrorMessage","error","apiType","aptosRequest","aptosResponse","deriveErrorMessage","traceId","traceIdString","errorPrelude","serializeAnyPayloadForErrorMessage","SERIALIZED_PAYLOAD_TRIM_TO_MAX_LENGTH","payload","serializedPayload"],"mappings":"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;QACA,uDACF;KAAA;IACC,GAAmC;QAClC;QACA;QACA,2HACF;KAAA;IACC,GAA6C;QAC5C;QACA;QACA,uDACF;KAAA;IACC,GAAkD;QACjD;QACA;QACA,2DACF;KAAA;IACC,GAA2D;QAC1D;QACA;QACA,2HACF;KAAA;IACC,GAAsD;QACrD;QACA;QACA,2HACF;KAAA;IACC,IAAuD;QACtD;QACA;QACA,uDACF;KAAA;IACC,IAA0C;QACzC;QACA;QACA,uDACF;KAAA;IACC,IAAoC;QACnC;QACA;QACA,uEACF;KAAA;IACC,IAA8C;QAC7C;QACA;QACA,uEACF;KAAA;IACC,IAAuC;QACtC;QACA;QACA,gPACF;KAAA;IACC,IAAiD;QAChD;QACA;QACA,8IACF;KAAA;IACC,IAA8C;QAC7C;QACA;QACA,2DACF;KAAA;IACC,IAAwC;QACvC;QACA;QACA,8IACF;KAAA;IACC,IAAiD;QAChD;QACA;QACA,8IACF;KAAA;IACC,IAA8C;QAC7C;QACA;QACA,2DACF;KAAA;IACC,IAAwC;QACvC;QACA;QACA,8IACF;KAAA;IACC,IAAqC;QACpC;QACA;QACA,sFACF;KAAA;IACC,IAAiD;QAChD;QACA;QACA,8IACF;KAAA;IACC,IAA2D;QAC1D;QACA;QACA,8IACF;KAAA;IACC,IAA+C;QAC9C;QACA;QACA,8IACF;KAAA;IACC,IAAmC;QAClC;QACA;QACA,8IACF;KAAA;IACC,IAA0C;QACzC;QACA;QACA,uEACF;KAAA;IACC,IAAqC;QACpC;QACA;QACA,uDACF;KAAA;IACC,IAA+C;QAC9C;QACA;QACA,uDACF;KAAA;IACC,IAA2D;QAC1D;QACA;QACA,uDACF;KAAA;IACC,IAAqD;QACpD;QACA;QACA,uDACF;KAAA;IACC,IAAiE;QAChE;QACA;QACA,uDACF;KAAA;IACC,IAA6C;QAC5C;QACA;QACA,uDACF;KAAA;IACC,IAA2B;QAC1B;QACA;QACA,sFACF;KACF;GAEaC,IAAN,MAAMC,UAAqB,KAAM;IAYtC,YAAYC,CAAAA,CAOT;QACD,IAAM,EAAE,YAAAC,CAAAA,EAA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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/version.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The current version of the SDK\n *\n * hardcoded for now, we would want to have it injected dynamically\n */\nexport const VERSION = \"1.39.0\";\n"],"names":["VERSION"],"mappings":";;;AAQO,IAAMA,IAAU","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1297, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/client/core.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { VERSION } from \"../version\";\nimport { AnyNumber, AptosRequest, AptosResponse, Client, ClientRequest, ClientResponse, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils\";\nimport { AptosApiError } from \"../errors\";\n\n/**\n * Sends a request using the specified options and returns the response.\n *\n * @param options - The options for the request.\n * @param options.url - The URL to send the request to.\n * @param options.method - The HTTP method to use for the request.\n * @param options.body - The body of the request.\n * @param options.contentType - The content type of the request.\n * @param options.params - The query parameters to include in the request.\n * @param options.overrides - Additional overrides for the request.\n * @param options.overrides.HEADERS - Custom headers to include in the request.\n * @param options.overrides.AUTH_TOKEN - The authorization token for the request.\n * @param options.overrides.API_KEY - The API key for the request.\n * @param options.originMethod - The origin method for the request.\n * @param client - The client used to make the request.\n *\n * @returns The response from the request.\n * @group Implementation\n * @category Client\n */\nexport async function request<Req, Res>(options: ClientRequest<Req>, client: Client): Promise<ClientResponse<Res>> {\n  const { url, method, body, contentType, params, overrides, originMethod } = options;\n  const headers: Record<string, string | AnyNumber | boolean | undefined> = {\n    ...overrides?.HEADERS,\n    \"x-aptos-client\": `aptos-typescript-sdk/${VERSION}`,\n    \"content-type\": contentType ?? MimeType.JSON,\n    \"x-aptos-typescript-sdk-origin-method\": originMethod,\n  };\n\n  if (overrides?.AUTH_TOKEN) {\n    headers.Authorization = `Bearer ${overrides?.AUTH_TOKEN}`;\n  }\n  if (overrides?.API_KEY) {\n    headers.Authorization = `Bearer ${overrides?.API_KEY}`;\n  }\n\n  /*\n   * make a call using the @aptos-labs/aptos-client package\n   * {@link https://www.npmjs.com/package/@aptos-labs/aptos-client}\n   */\n  return client.provider<Req, Res>({\n    url,\n    method,\n    body,\n    params,\n    headers,\n    overrides,\n  });\n}\n\n/**\n * The main function to use when making an API request, returning the response or throwing an AptosApiError on failure.\n *\n * @param aptosRequestOpts - Options for the Aptos request, including the URL and path.\n * @param aptosConfig - The configuration information for the SDK client instance.\n * @param apiType - The type of API being accessed, which determines how the response is handled.\n * @returns The response from the API request or throws an AptosApiError if the request fails.\n * @group Implementation\n * @category Client\n */\nexport async function aptosRequest<Req extends {}, Res extends {}>(\n  aptosRequestOpts: AptosRequest,\n  aptosConfig: AptosConfig,\n  apiType: AptosApiType,\n): Promise<AptosResponse<Req, Res>> {\n  const { url, path } = aptosRequestOpts;\n  const fullUrl = path ? `${url}/${path}` : url;\n  const clientResponse = await request<Req, Res>({ ...aptosRequestOpts, url: fullUrl }, aptosConfig.client);\n\n  const aptosResponse: AptosResponse<Req, Res> = {\n    status: clientResponse.status,\n    statusText: clientResponse.statusText ?? \"No status text provided\",\n    data: clientResponse.data,\n    headers: clientResponse.headers,\n    config: clientResponse.config,\n    request: clientResponse.request,\n    url: fullUrl,\n  };\n\n  // Handle case for `Unauthorized` error (i.e. API_KEY error)\n  if (aptosResponse.status === 401) {\n    throw new AptosApiError({ apiType, aptosRequest: aptosRequestOpts, aptosResponse });\n  }\n\n  // to support both fullnode and indexer responses,\n  // check if it is an indexer query, and adjust response.data\n  if (apiType === AptosApiType.INDEXER) {\n    const indexerResponse = aptosResponse.data as any;\n    // Handle Indexer general errors\n    if (indexerResponse.errors) {\n      throw new AptosApiError({\n        apiType,\n        aptosRequest: aptosRequestOpts,\n        aptosResponse,\n      });\n    }\n    aptosResponse.data = indexerResponse.data as Res;\n  } else if (apiType === AptosApiType.PEPPER || apiType === AptosApiType.PROVER) {\n    if (aptosResponse.status >= 400) {\n      throw new AptosApiError({ apiType, aptosRequest: aptosRequestOpts, aptosResponse });\n    }\n  }\n\n  if (aptosResponse.status >= 200 && aptosResponse.status < 300) {\n    return aptosResponse;\n  }\n\n  // We have to explicitly check for all request types, because if the error is a non-indexer error, but\n  // comes from an indexer request (e.g. 404), we'll need to mention it appropriately\n  throw new AptosApiError({ apiType, aptosRequest: aptosRequestOpts, aptosResponse });\n}\n"],"names":["request","options","client","url","method","body","contentType","params","overrides","originMethod","headers","VERSION","aptosRequest","aptosRequestOpts","aptosConfig","apiType","path","fullUrl","clientResponse","aptosResponse","AptosApiError","indexerResponse"],"mappings":";;;;;;;;AA6BA,eAAsBA,EAAkBC,CAAAA,EAA6BC,CAAAA,CAA8C;IACjH,IAAM,EAAE,KAAAC,CAAAA,EAAK,QAAAC,CAAAA,EAAQ,MAAAC,CAAAA,EAAM,aAAAC,CAAAA,EAAa,QAAAC,CAAAA,EAAQ,WAAAC,CAAAA,EAAW,cAAAC,CAAa,EAAA,GAAIR,GACtES,IAAoE;QACxE,GAAGF,GAAW,OAAA;QACd,kBAAkB,CAAA,qBAAA,+OAAwBG,IAAO,EAAA;QACjD,gBAAgBL,KAAe;QAC/B,wCAAwCG;IAC1C;IAEA,OAAID,GAAW,cAAA,CACbE,EAAQ,aAAA,GAAgB,CAAA,OAAA,EAAUF,GAAW,UAAU,EAAA,GAErDA,GAAW,WAAA,CACbE,EAAQ,aAAA,GAAgB,CAAA,OAAA,EAAUF,GAAW,OAAO,EAAA,GAO/CN,EAAO,QAAA,CAAmB;QAC/B,KAAAC;QACA,QAAAC;QACA,MAAAC;QACA,QAAAE;QACA,SAAAG;QACA,WAAAF;IACF,CAAC;AACH;AAYA,eAAsBI,EACpBC,CAAAA,EACAC,CAAAA,EACAC,CAAAA,CACkC;IAClC,IAAM,EAAE,KAAAZ,CAAAA,EAAK,MAAAa,CAAK,EAAA,GAAIH,GAChBI,IAAUD,IAAO,GAAGb,CAAG,CAAA,CAAA,EAAIa,CAAI,EAAA,GAAKb,GACpCe,IAAiB,MAAMlB,EAAkB;QAAE,GAAGa,CAAAA;QAAkB,KAAKI;IAAQ,GAAGH,EAAY,MAAM,GAElGK,IAAyC;QAC7C,QAAQD,EAAe,MAAA;QACvB,YAAYA,EAAe,UAAA,IAAc;QACzC,MAAMA,EAAe,IAAA;QACrB,SAASA,EAAe,OAAA;QACxB,QAAQA,EAAe,MAAA;QACvB,SAASA,EAAe,OAAA;QACxB,KAAKD;IACP;IAGA,IAAIE,EAAc,MAAA,KAAW,KAC3B,MAAM,iPAAIC,IAAAA,CAAc;QAAE,SAAAL;QAAS,cAAcF;QAAkB,eAAAM;IAAc,CAAC;IAKpF,IAAIJ,MAAY,WAAsB;QACpC,IAAMM,IAAkBF,EAAc,IAAA;QAEtC,IAAIE,EAAgB,MAAA,EAClB,MAAM,iPAAID,IAAAA,CAAc;YACtB,SAAAL;YACA,cAAcF;YACd,eAAAM;QACF,CAAC;QAEHA,EAAc,IAAA,GAAOE,EAAgB;IACvC,OAAA,IAAA,CAAWN,MAAY,YAAuBA,MAAY,QAAA,KACpDI,EAAc,MAAA,IAAU,KAC1B,MAAM,iPAAIC,IAAAA,CAAc;QAAE,SAAAL;QAAS,cAAcF;QAAkB,eAAAM;IAAc,CAAC;IAItF,IAAIA,EAAc,MAAA,IAAU,OAAOA,EAAc,MAAA,GAAS,KACxD,OAAOA;IAKT,MAAM,iPAAIC,IAAAA,CAAc;QAAE,SAAAL;QAAS,cAAcF;QAAkB,eAAAM;IAAc,CAAC;AACpF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1367, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/client/get.ts"],"sourcesContent":["import { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse, AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * Options for making a GET request, including configuration for the API client.\n * @group Implementation\n * @category Client\n */\nexport type GetRequestOptions = {\n  /**\n   * The config for the API client\n   * @group Implementation\n   * @category Client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   * @group Implementation\n   * @category Client\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   * @group Implementation\n   * @category Client\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   * @group Implementation\n   * @category Client\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   * @group Implementation\n   * @category Client\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   * @group Implementation\n   * @category Client\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   * @group Implementation\n   * @category Client\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   * @group Implementation\n   * @category Client\n   */\n  overrides?: ClientConfig;\n};\n\n/**\n * Options for making a request to the Aptos API, excluding the \"type\" field.\n * @group Implementation\n * @category Client\n */\nexport type GetAptosRequestOptions = Omit<GetRequestOptions, \"type\">;\n\n/**\n * Executes a GET request to retrieve data based on the provided options.\n *\n * @param options - The options for the GET request.\n * @param options.aptosConfig - The configuration object for Aptos requests.\n * @param options.overrides - Optional overrides for the request configuration.\n * @param options.params - Query parameters to include in the request.\n * @param options.contentType - The content type of the request.\n * @param options.acceptType - The accepted response type.\n * @param options.path - The specific path for the request.\n * @param options.originMethod - The original method of the request.\n * @param options.type - The type of request being made.\n * @returns The response from the GET request.\n * @group Implementation\n * @category Client\n */\nexport async function get<Req extends {}, Res extends {}>(\n  options: GetRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig, overrides, params, contentType, acceptType, path, originMethod, type } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"GET\",\n      originMethod,\n      path,\n      contentType,\n      acceptType,\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n    options.type,\n  );\n}\n\n/**\n * Retrieves data from the Aptos full node using the provided options.\n *\n * @param options - The options for the request to the Aptos full node.\n * @param options.aptosConfig - Configuration settings specific to the Aptos client and full node.\n * @param options.aptosConfig.clientConfig - The client configuration settings.\n * @param options.aptosConfig.fullnodeConfig - The full node configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @param options.type - The type of API request being made.\n *\n * @returns A promise that resolves with the response from the Aptos full node.\n * @group Implementation\n * @category Client\n */\nexport async function getAptosFullNode<Req extends {}, Res extends {}>(\n  options: GetAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return get<Req, Res>({\n    ...options,\n    type: AptosApiType.FULLNODE,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.fullnodeConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.fullnodeConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Makes a GET request to the Aptos Pepper service to retrieve data.\n *\n * @param options - The options for the request.\n * @param options.param1 - Description of param1.\n * @param options.param2 - Description of param2.\n * @returns AptosResponse - The response from the Aptos Pepper service.\n * @group Implementation\n * @category Client\n */\nexport async function getAptosPepperService<Req extends {}, Res extends {}>(\n  options: GetAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return get<Req, Res>({ ...options, type: AptosApiType.PEPPER });\n}\n\n/**\n * This function is a helper for paginating using a function wrapping an API\n * @group Implementation\n * @category Client\n */\nexport async function paginateWithCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out: Res = new Array(0) as Res;\n  let cursor: string | undefined;\n  const requestParams = options.params as { start?: string; limit?: number };\n  do {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await get<Req, Res>({\n      type: AptosApiType.FULLNODE,\n      aptosConfig: options.aptosConfig,\n      originMethod: options.originMethod,\n      path: options.path,\n      params: requestParams,\n      overrides: options.overrides,\n    });\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     * @group Implementation\n     * @category Client\n     */\n    cursor = response.headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    delete response.headers;\n    out.push(...response.data);\n    requestParams.start = cursor;\n  } while (cursor !== null && cursor !== undefined);\n  return out;\n}\n\n/// This function is a helper for paginating using a function wrapping an API using offset instead of start\nexport async function paginateWithObfuscatedCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out: Res = new Array(0) as Res;\n  let cursor: string | undefined;\n  const requestParams = options.params as { start?: string; limit?: number };\n  const totalLimit = requestParams.limit;\n  do {\n    // eslint-disable-next-line no-await-in-loop\n    const { response, cursor: newCursor } = await getPageWithObfuscatedCursor<Req, Res>({ ...options });\n\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     */\n    cursor = newCursor;\n    out.push(...response.data);\n    if (options?.params) {\n      options.params.start = cursor;\n    }\n\n    // Re-evaluate length\n    if (totalLimit !== undefined) {\n      const newLimit = totalLimit - out.length;\n      if (newLimit <= 0) {\n        break;\n      }\n      requestParams.limit = newLimit;\n    }\n  } while (cursor !== null && cursor !== undefined);\n  return out;\n}\n\nexport async function getPageWithObfuscatedCursor<Req extends Record<string, any>, Res extends Array<{}>>(\n  options: GetAptosRequestOptions,\n): Promise<{ response: AptosResponse<Req, Res>; cursor: string | undefined }> {\n  let cursor: string | undefined;\n  let requestParams: { start?: string; limit?: number } = {};\n\n  // Drop any other values\n  // TODO: Throw error if cursor is not a string\n  if (typeof options.params?.cursor === \"string\") {\n    requestParams.start = options.params.cursor;\n  }\n  if (typeof options.params?.limit === \"number\") {\n    requestParams.limit = options.params.limit;\n  }\n\n  // eslint-disable-next-line no-await-in-loop\n  const response = await get<Req, Res>({\n    type: AptosApiType.FULLNODE,\n    aptosConfig: options.aptosConfig,\n    originMethod: options.originMethod,\n    path: options.path,\n    params: requestParams,\n    overrides: options.overrides,\n  });\n\n  /**\n   * the cursor is a \"state key\" from the API perspective. Client\n   * should not need to \"care\" what it represents but just use it\n   * to query the next chunk of data.\n   */\n  cursor = response.headers[\"x-aptos-cursor\"];\n  return { response, cursor };\n}\n"],"names":["get","options","aptosConfig","overrides","params","contentType","acceptType","path","originMethod","type","url","aptosRequest","getAptosFullNode","getAptosPepperService","paginateWithCursor","out","cursor","requestParams","response","paginateWithObfuscatedCursor","totalLimit","newCursor","getPageWithObfuscatedCursor","newLimit"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1468, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/utils/utils.ts"],"sourcesContent":["import { AccountAddress, AccountAddressInput } from \"../../core/accountAddress\";\nimport { MoveModuleBytecode, LedgerVersionArg, AccountData } from \"../../types/types\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { getAptosFullNode } from \"../../client\";\nimport { memoizeAsync } from \"../../utils/memoize\";\n\n/**\n * Retrieves account information for a specified account address.\n *\n * @param args - The arguments for retrieving account information.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.accountAddress - The address of the account to retrieve information for.\n * @group Implementation\n */\nexport async function getInfo(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<AccountData> {\n  const { aptosConfig, accountAddress } = args;\n  const { data } = await getAptosFullNode<{}, AccountData>({\n    aptosConfig,\n    originMethod: \"getInfo\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}`,\n  });\n  return data;\n}\n\n/**\n * Queries for a move module given an account address and module name.\n * This function can help you retrieve the module's ABI and other relevant information.\n *\n * @param args - The arguments for retrieving the module.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The account address in hex-encoded 32 byte format.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - Specifies the ledger version of transactions. By default, the latest version will be used.\n * @returns The move module.\n * @group Implementation\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  // We don't memoize the account module by ledger version, as it's not a common use case, this would be handled\n  // by the developer directly\n  if (args.options?.ledgerVersion !== undefined) {\n    return getModuleInner(args);\n  }\n\n  return memoizeAsync(\n    async () => getModuleInner(args),\n    `module-${args.accountAddress}-${args.moduleName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\n/**\n * Retrieves the bytecode of a specified module from a given account address.\n *\n * @param args - The parameters for retrieving the module bytecode.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account from which to retrieve the module.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nasync function getModuleInner(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  const { aptosConfig, accountAddress, moduleName, options } = args;\n\n  const { data } = await getAptosFullNode<{}, MoveModuleBytecode>({\n    aptosConfig,\n    originMethod: \"getModule\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/module/${moduleName}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data;\n}\n"],"names":["getInfo","args","aptosConfig","accountAddress","data","getAptosFullNode","AccountAddress","getModule","getModuleInner","memoizeAsync","moduleName","options"],"mappings":";;;;;;;;;;AAcA,eAAsBA,EAAQC,CAAAA,CAGL;IACvB,IAAM,EAAE,aAAAC,CAAAA,EAAa,gBAAAC,CAAe,EAAA,GAAIF,GAClC,EAAE,MAAAG,CAAK,EAAA,GAAI,OAAMC,oPAAAA,EAAkC;QACvD,aAAAH;QACA,cAAc;QACd,MAAM,CAAA,SAAA,+OAAYI,IAAAA,CAAe,IAAA,CAAKH,CAAc,EAAE,QAAA,CAAS,CAAC;IAClE,CAAC;IACD,OAAOC;AACT;AAeA,eAAsBG,EAAUN,CAAAA,CAKA;IAG9B,OAAIA,EAAK,OAAA,EAAS,kBAAkB,KAAA,IAC3BO,EAAeP,CAAI,yPAGrBQ,EACL,UAAYD,EAAeP,CAAI,GAC/B,CAAA,OAAA,EAAUA,EAAK,cAAc,CAAA,CAAA,EAAIA,EAAK,UAAU,EAAA,EAChD,MAAO,KAAK,CACd,EAAE;AACJ;AAaA,eAAeO,EAAeP,CAAAA,CAKE;IAC9B,IAAM,EAAE,aAAAC,CAAAA,EAAa,gBAAAC,CAAAA,EAAgB,YAAAO,CAAAA,EAAY,SAAAC,CAAQ,EAAA,GAAIV,GAEvD,EAAE,MAAAG,CAAK,EAAA,GAAI,2PAAMC,EAAyC;QAC9D,aAAAH;QACA,cAAc;QACd,MAAM,CAAA,SAAA,+OAAYI,IAAAA,CAAe,IAAA,CAAKH,CAAc,EAAE,QAAA,CAAS,CAAC,CAAA,QAAA,EAAWO,CAAU,EAAA;QACrF,QAAQ;YAAE,gBAAgBC,GAAS;QAAc;IACnD,CAAC;IACD,OAAOP;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1508, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/chainId.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\n\n/**\n * Represents a ChainId that can be serialized and deserialized.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport class ChainId extends Serializable {\n  public readonly chainId: number;\n\n  /**\n   * Initializes a new instance of the class with the specified chain ID.\n   *\n   * @param chainId - The ID of the blockchain network to be used.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(chainId: number) {\n    super();\n    this.chainId = chainId;\n  }\n\n  /**\n   * Serializes the current object using the provided serializer.\n   * This function helps in converting the object into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.chainId);\n  }\n\n  /**\n   * Deserializes a ChainId from the provided deserializer.\n   * This function allows you to reconstruct a ChainId object from serialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): ChainId {\n    const chainId = deserializer.deserializeU8();\n    return new ChainId(chainId);\n  }\n}\n"],"names":["ChainId","_ChainId","Serializable","chainId","serializer","deserializer"],"mappings":";;;;;AAaO,IAAMA,IAAN,MAAMC,uPAAgBC,IAAa;IAUxC,YAAYC,CAAAA,CAAiB;QAC3B,KAAA,CAAM,GACN,IAAA,CAAK,OAAA,GAAUA;IACjB;IAUA,UAAUC,CAAAA,EAA8B;QACtCA,EAAW,WAAA,CAAY,IAAA,CAAK,OAAO;IACrC;IAUA,OAAO,YAAYC,CAAAA,EAAqC;QACtD,IAAMF,IAAUE,EAAa,aAAA,CAAc;QAC3C,OAAO,IAAIJ,EAAQE,CAAO;IAC5B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1533, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/identifier.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\n\n/**\n * Represents an Identifier that can be serialized and deserialized.\n * This class is used to denote the module \"name\" in \"ModuleId\" and\n * the \"function name\" in \"EntryFunction\".\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport class Identifier extends Serializable {\n  public identifier: string;\n\n  /**\n   * Creates an instance of the class with a specified identifier.\n   *\n   * @param identifier - The unique identifier for the instance.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(identifier: string) {\n    super();\n    this.identifier = identifier;\n  }\n\n  /**\n   * Serializes the identifier of the current instance using the provided serializer.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.identifier);\n  }\n\n  /**\n   * Deserializes an identifier from the provided deserializer.\n   * This function is useful for reconstructing an Identifier object from a serialized format.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): Identifier {\n    const identifier = deserializer.deserializeStr();\n    return new Identifier(identifier);\n  }\n}\n"],"names":["Identifier","_Identifier","Serializable","identifier","serializer","deserializer"],"mappings":";;;;;AAeO,IAAMA,IAAN,MAAMC,uPAAmBC,IAAa;IAU3C,YAAYC,CAAAA,CAAoB;QAC9B,KAAA,CAAM,GACN,IAAA,CAAK,UAAA,GAAaA;IACpB;IASO,UAAUC,CAAAA,EAA8B;QAC7CA,EAAW,YAAA,CAAa,IAAA,CAAK,UAAU;IACzC;IAUA,OAAO,YAAYC,CAAAA,EAAwC;QACzD,IAAMF,IAAaE,EAAa,cAAA,CAAe;QAC/C,OAAO,IAAIJ,EAAWE,CAAU;IAClC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1558, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/poseidon.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\nimport {\n  poseidon1,\n  poseidon2,\n  poseidon3,\n  poseidon4,\n  poseidon5,\n  poseidon6,\n  poseidon7,\n  poseidon8,\n  poseidon9,\n  poseidon10,\n  poseidon11,\n  poseidon12,\n  poseidon13,\n  poseidon14,\n  poseidon15,\n  poseidon16,\n} from \"poseidon-lite\";\n\nconst numInputsToPoseidonFunc = [\n  poseidon1,\n  poseidon2,\n  poseidon3,\n  poseidon4,\n  poseidon5,\n  poseidon6,\n  poseidon7,\n  poseidon8,\n  poseidon9,\n  poseidon10,\n  poseidon11,\n  poseidon12,\n  poseidon13,\n  poseidon14,\n  poseidon15,\n  poseidon16,\n];\n\nconst BYTES_PACKED_PER_SCALAR = 31;\nconst MAX_NUM_INPUT_SCALARS = 16;\nconst MAX_NUM_INPUT_BYTES = (MAX_NUM_INPUT_SCALARS - 1) * BYTES_PACKED_PER_SCALAR;\n\n/**\n * Hashes a string to a field element via Poseidon hashing.\n * This function is useful for converting a string into a fixed-size hash that can be used in cryptographic applications.\n *\n * @param str - The string to be hashed.\n * @param maxSizeBytes - The maximum size in bytes for the resulting hash.\n * @returns bigint - The result of the hash.\n * @group Implementation\n * @category Serialization\n */\nexport function hashStrToField(str: string, maxSizeBytes: number): bigint {\n  const textEncoder = new TextEncoder();\n  const strBytes = textEncoder.encode(str);\n  return hashBytesWithLen(strBytes, maxSizeBytes);\n}\n\n/**\n * Computes a Poseidon hash of the provided byte array, ensuring that the byte array does not exceed the specified maximum size.\n * This function is useful for generating a hash from a byte array while enforcing size constraints.\n *\n * @param bytes - The byte array to be hashed.\n * @param maxSizeBytes - The maximum allowed size for the byte array.\n * @throws Error if the length of the inputted bytes exceeds the specified maximum size.\n * @group Implementation\n * @category Serialization\n */\nfunction hashBytesWithLen(bytes: Uint8Array, maxSizeBytes: number): bigint {\n  if (bytes.length > maxSizeBytes) {\n    throw new Error(`Inputted bytes of length ${bytes} is longer than ${maxSizeBytes}`);\n  }\n  const packed = padAndPackBytesWithLen(bytes, maxSizeBytes);\n  return poseidonHash(packed);\n}\n\n/**\n * Pads the input byte array with zeros to a specified maximum size and then packs the bytes.\n * This function ensures that the byte array does not exceed the specified maximum size, throwing an error if it does.\n *\n * @param bytes - The byte array to be padded and packed.\n * @param maxSizeBytes - The maximum size in bytes that the input array can have.\n * @throws Error if the input byte array exceeds the specified maximum size.\n * @group Implementation\n * @category Serialization\n */\nfunction padAndPackBytesNoLen(bytes: Uint8Array, maxSizeBytes: number): bigint[] {\n  if (bytes.length > maxSizeBytes) {\n    throw new Error(`Input bytes of length ${bytes} is longer than ${maxSizeBytes}`);\n  }\n  const paddedStrBytes = padUint8ArrayWithZeros(bytes, maxSizeBytes);\n  return packBytes(paddedStrBytes);\n}\n\n/**\n * Pads and packs the given byte array to a specified maximum size and appends its length.\n * This function ensures that the byte array does not exceed the maximum size, throwing an error if it does.\n * It is useful for preparing byte data for further processing or transmission by ensuring a consistent format.\n *\n * @param bytes - The byte array to be padded and packed.\n * @param maxSizeBytes - The maximum allowed size for the byte array.\n * @throws Error if the length of the input bytes exceeds the maximum size.\n * @returns A new Uint8Array that contains the padded and packed bytes along with the length of the original byte array.\n * @group Implementation\n * @category Serialization\n */\nexport function padAndPackBytesWithLen(bytes: Uint8Array, maxSizeBytes: number): bigint[] {\n  if (bytes.length > maxSizeBytes) {\n    throw new Error(`Input bytes of length ${bytes} is longer than ${maxSizeBytes}`);\n  }\n  return padAndPackBytesNoLen(bytes, maxSizeBytes).concat([BigInt(bytes.length)]);\n}\n\n/**\n * Packs a Uint8Array into an array of BigInts, ensuring the input does not exceed the maximum allowed bytes.\n * @param bytes - The Uint8Array to be packed.\n * @throws {Error} Throws an error if the input exceeds the maximum number of bytes allowed.\n * @group Implementation\n * @category Serialization\n */\nfunction packBytes(bytes: Uint8Array): bigint[] {\n  if (bytes.length > MAX_NUM_INPUT_BYTES) {\n    throw new Error(`Can't pack more than ${MAX_NUM_INPUT_BYTES}.  Was given ${bytes.length} bytes`);\n  }\n  return chunkUint8Array(bytes, BYTES_PACKED_PER_SCALAR).map((chunk) => bytesToBigIntLE(chunk));\n}\n\n/**\n * Splits a Uint8Array into smaller chunks of the specified size.\n * This function is useful for processing large arrays in manageable segments.\n *\n * @param array - The Uint8Array to be split into chunks.\n * @param chunkSize - The size of each chunk.\n * @returns An array of Uint8Array chunks.\n * @group Implementation\n * @category Serialization\n */\nfunction chunkUint8Array(array: Uint8Array, chunkSize: number): Uint8Array[] {\n  const result: Uint8Array[] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.subarray(i, i + chunkSize));\n  }\n  return result;\n}\n\n/**\n * Converts a little-endian byte array into a BigInt.\n * This function is useful for interpreting byte data as a numerical value in a way that respects the little-endian format.\n *\n * @param bytes - The byte array to convert.\n * @returns The resulting BigInt representation of the byte array.\n * @group Implementation\n * @category Serialization\n */\nexport function bytesToBigIntLE(bytes: Uint8Array): bigint {\n  let result = BigInt(0);\n  for (let i = bytes.length - 1; i >= 0; i -= 1) {\n    result = (result << BigInt(8)) | BigInt(bytes[i]);\n  }\n  return result;\n}\n\n/**\n * Converts a bigint value into a little-endian byte array of a specified length.\n * This function is useful for representing large integers in a byte format, which is often required for cryptographic operations\n * or binary data manipulation.\n *\n * @param value - The number to convert into bytes.\n * @param length - The desired length of the resulting byte array.\n * @returns A Uint8Array containing the little-endian representation of the bigint value.\n * @group Implementation\n * @category Serialization\n */\nexport function bigIntToBytesLE(value: bigint | number, length: number): Uint8Array {\n  let val = BigInt(value);\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; i += 1) {\n    bytes[i] = Number(val & BigInt(0xff));\n    val >>= BigInt(8);\n  }\n  return bytes;\n}\n\n/**\n * Pads the input Uint8Array with zeros to achieve the specified size.\n * This function is useful for ensuring that a byte array meets a required length for further processing.\n *\n * @param inputArray - The Uint8Array to be padded.\n * @param paddedSize - The desired size of the padded array, which must be greater than or equal to the input array size.\n * @throws Error if paddedSize is less than the length of inputArray.\n * @group Implementation\n * @category Serialization\n */\nfunction padUint8ArrayWithZeros(inputArray: Uint8Array, paddedSize: number): Uint8Array {\n  if (paddedSize < inputArray.length) {\n    throw new Error(\"Padded size must be greater than or equal to the input array size.\");\n  }\n\n  // Create a new Uint8Array with the padded size\n  const paddedArray = new Uint8Array(paddedSize);\n\n  // Copy the content of the input array to the new array\n  paddedArray.set(inputArray);\n\n  // Fill the remaining space with zeros\n  for (let i = inputArray.length; i < paddedSize; i += 1) {\n    paddedArray[i] = 0;\n  }\n\n  return paddedArray;\n}\n\n/**\n * Hashes up to 16 scalar elements via the Poseidon hashing algorithm.\n * Each element must be scalar fields of the BN254 elliptic curve group.\n *\n * @param inputs - An array of elements to be hashed, which can be of type number, bigint, or string.\n * @returns bigint - The result of the hash.\n * @throws Error - Throws an error if the input length exceeds the maximum allowed.\n * @group Implementation\n * @category Serialization\n */\nexport function poseidonHash(inputs: (number | bigint | string)[]): bigint {\n  if (inputs.length > numInputsToPoseidonFunc.length) {\n    throw new Error(\n      `Unable to hash input of length ${inputs.length}.  Max input length is ${numInputsToPoseidonFunc.length}`,\n    );\n  }\n  return numInputsToPoseidonFunc[inputs.length - 1](inputs);\n}\n"],"names":["poseidon1","poseidon2","poseidon3","poseidon4","poseidon5","poseidon6","poseidon7","poseidon8","poseidon9","poseidon10","poseidon11","poseidon12","poseidon13","poseidon14","poseidon15","poseidon16","numInputsToPoseidonFunc","BYTES_PACKED_PER_SCALAR","MAX_NUM_INPUT_SCALARS","MAX_NUM_INPUT_BYTES","hashStrToField","str","maxSizeBytes","strBytes","hashBytesWithLen","bytes","packed","padAndPackBytesWithLen","poseidonHash","padAndPackBytesNoLen","paddedStrBytes","padUint8ArrayWithZeros","packBytes","chunkUint8Array","chunk","bytesToBigIntLE","array","chunkSize","result","i","bigIntToBytesLE","value","length","val","inputArray","paddedSize","paddedArray","inputs"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/proof.ts"],"sourcesContent":["import { Serializable } from \"../../bcs\";\n\n/**\n * An abstract representation of a cryptographic proof associated with specific\n * zero-knowledge proof schemes, such as Groth16 and PLONK.\n * @group Implementation\n * @category Serialization\n */\nexport abstract class Proof extends Serializable {}\n"],"names":["Proof","Serializable"],"mappings":";;;;;AAQO,IAAeA,IAAf,2PAA6BC,IAAa;AAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1658, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/privateKey.ts"],"sourcesContent":["/* eslint-disable max-len */\n\nimport { HexInput, PrivateKeyVariants } from \"../../types\";\nimport { Hex } from \"../hex\";\nimport { PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents a private key used for signing messages and deriving the associated public key.\n * @group Implementation\n * @category Serialization\n */\nexport interface PrivateKey {\n  /**\n   * Sign the given message with the private key to create a signature.\n   * @param message - The message to be signed, provided in HexInput format.\n   * @returns A Signature object representing the signed message.\n   * @group Implementation\n   * @category Serialization\n   */\n  sign(message: HexInput): Signature;\n\n  /**\n   * Derive the public key associated with the private key.\n   * @group Implementation\n   * @category Serialization\n   */\n  publicKey(): PublicKey;\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array;\n}\n\nexport class PrivateKey {\n  /**\n   * The AIP-80 compliant prefixes for each private key type. Append this to a private key's hex representation\n   * to get an AIP-80 compliant string.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   */\n  public static readonly AIP80_PREFIXES = {\n    [PrivateKeyVariants.Ed25519]: \"ed25519-priv-\",\n    [PrivateKeyVariants.Secp256k1]: \"secp256k1-priv-\",\n  };\n\n  /**\n   * Format a HexInput to an AIP-80 compliant string.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @param privateKey - The HexString or Uint8Array format of the private key.\n   * @param privateKeyType - The private key type\n   */\n  public static formatPrivateKey(privateKey: HexInput, type: PrivateKeyVariants): string {\n    const aip80Prefix = PrivateKey.AIP80_PREFIXES[type];\n\n    // Remove the prefix if it exists\n    let formattedPrivateKey = privateKey;\n    if (typeof formattedPrivateKey === \"string\" && formattedPrivateKey.startsWith(aip80Prefix)) {\n      // eslint-disable-next-line prefer-destructuring\n      formattedPrivateKey = formattedPrivateKey.split(\"-\")[2];\n    }\n\n    return `${aip80Prefix}${Hex.fromHexInput(formattedPrivateKey).toString()}`;\n  }\n\n  /**\n   * Parse a HexInput that may be a HexString, Uint8Array, or a AIP-80 compliant string to a Hex instance.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @param value - A HexString, Uint8Array, or a AIP-80 compliant string.\n   * @param privateKeyType - The private key type\n   * @param strict - If true, the value MUST be compliant with AIP-80.\n   */\n  public static parseHexInput(value: HexInput, type: PrivateKeyVariants, strict?: boolean): Hex {\n    let data: Hex;\n\n    const aip80Prefix = PrivateKey.AIP80_PREFIXES[type];\n    if (typeof value === \"string\") {\n      if (!strict && !value.startsWith(aip80Prefix)) {\n        // HexString input\n        data = Hex.fromHexInput(value);\n        // If the strictness is false, the user has opted into non-AIP-80 compliant private keys.\n        if (strict !== false) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            \"[Aptos SDK] It is recommended that private keys are AIP-80 compliant (https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md). You can fix the private key by formatting it with `PrivateKey.formatPrivateKey(privateKey: string, type: 'ed25519' | 'secp256k1'): string`.\",\n          );\n        }\n      } else if (value.startsWith(aip80Prefix)) {\n        // AIP-80 Compliant String input\n        data = Hex.fromHexString(value.split(\"-\")[2]);\n      } else {\n        if (strict) {\n          // The value does not start with the AIP-80 prefix, and strict is true.\n          throw new Error(\"Invalid HexString input while parsing private key. Must AIP-80 compliant string.\");\n        }\n\n        // This condition should never be reached.\n        throw new Error(\"Invalid HexString input while parsing private key.\");\n      }\n    } else {\n      // The value is an Uint8Array\n      data = Hex.fromHexInput(value);\n    }\n\n    return data;\n  }\n}\n"],"names":["_PrivateKey","privateKey","type","aip80Prefix","formattedPrivateKey","Hex","value","strict","data","PrivateKey"],"mappings":";;;;;AAqCO,IAAMA,IAAN,MAAMA,CAAW;IAoBtB,OAAc,iBAAiBC,CAAAA,EAAsBC,CAAAA,EAAkC;QACrF,IAAMC,IAAcH,EAAW,cAAA,CAAeE,CAAI,CAAA,EAG9CE,IAAsBH;QAC1B,OAAI,OAAOG,KAAwB,YAAYA,EAAoB,UAAA,CAAWD,CAAW,KAAA,CAEvFC,IAAsBA,EAAoB,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA,GAGjD,GAAGD,CAAW,gPAAGE,IAAAA,CAAI,YAAA,CAAaD,CAAmB,EAAE,QAAA,CAAS,CAAC;IAC1E;IAWA,OAAc,cAAcE,CAAAA,EAAiBJ,CAAAA,EAA0BK,CAAAA,EAAuB;QAC5F,IAAIC,GAEEL,IAAcH,EAAW,cAAA,CAAeE,CAAI,CAAA;QAClD,IAAI,OAAOI,KAAU,UACnB,IAAI,CAACC,KAAU,CAACD,EAAM,UAAA,CAAWH,CAAW,GAE1CK,iPAAOH,IAAAA,CAAI,YAAA,CAAaC,CAAK,GAEzBC,MAAW,CAAA,KAEb,QAAQ,IAAA,CACN,uRACF;aAAA,IAEOD,EAAM,UAAA,CAAWH,CAAW,GAErCK,iPAAOH,IAAAA,CAAI,aAAA,CAAcC,EAAM,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAC,MAE5C;aAAA,MAAIC,IAEI,IAAI,MAAM,kFAAkF,IAI9F,IAAI,MAAM,oDAAoD;aAItEC,iPAAOH,IAAAA,CAAI,YAAA,CAAaC,CAAK;QAG/B,OAAOE;IACT;AACF;AA5EaR,EAOY,cAAA,GAAiB;IACrC,SAA6B;IAC7B,WAA+B;AAClC;AAVK,IAAMS,IAANT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1690, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/utils.ts"],"sourcesContent":["import { HexInput } from \"../../types\";\nimport { Hex } from \"../hex\";\n\n/**\n * Helper function to convert a message to sign or to verify to a valid message input\n *\n * @param message a message as a string or Uint8Array\n *\n * @returns a valid HexInput - string or Uint8Array\n * @group Implementation\n * @category Serialization\n */\nexport const convertSigningMessage = (message: HexInput): HexInput => {\n  // if message is of type string, verify it is a valid Hex string\n  if (typeof message === \"string\") {\n    const isValid = Hex.isValid(message);\n    // If message is not a valid Hex string, convert it\n    if (!isValid.valid) {\n      return new TextEncoder().encode(message);\n    }\n    // If message is a valid Hex string, return it\n    return message;\n  }\n  // message is a Uint8Array\n  return message;\n};\n"],"names":["convertSigningMessage","message","Hex"],"mappings":";;;;;AAYO,IAAMA,KAAyBC,IAEhC,OAAOA,KAAY,wPACLC,IAAAA,CAAI,OAAA,CAAQD,CAAO,EAEtB,KAAA,GAINA,IAHE,IAAI,YAAY,EAAE,MAAA,CAAOA,CAAO,IAMpCA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1704, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/hdKey.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport * as bip39 from \"@scure/bip39\";\n\n/**\n * Contains the derived cryptographic key as a Uint8Array.\n * @group Implementation\n * @category Serialization\n */\nexport type DerivedKeys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\n/**\n * Aptos derive path is 637\n * @group Implementation\n * @category Serialization\n */\nexport const APTOS_HARDENED_REGEX = /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'?$/;\n\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const APTOS_BIP44_REGEX = /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+\\/[0-9]+$/;\n\n/**\n * Supported key types and their associated seeds.\n * @group Implementation\n * @category Serialization\n */\nexport enum KeyType {\n  ED25519 = \"ed25519 seed\",\n}\n\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const HARDENED_OFFSET = 0x80000000;\n\n/**\n * Validate a BIP-44 derivation path string to ensure it meets the required format.\n * This function checks if the provided path adheres to the BIP-44 standard for Secp256k1.\n * Parse and validate a path that is compliant to BIP-44 in form m/44'/637'/{account_index}'/{change_index}/{address_index}\n * for Secp256k1\n *\n * Note that for Secp256k1, the last two components must be non-hardened.\n *\n * @param path - The path string to validate (e.g. `m/44'/637'/0'/0/0`).\n * @group Implementation\n * @category Serialization\n */\nexport function isValidBIP44Path(path: string): boolean {\n  return APTOS_BIP44_REGEX.test(path);\n}\n\n/**\n * Aptos derive path is 637\n *\n * Parse and validate a path that is compliant to SLIP-0010 and BIP-44\n * in form m/44'/637'/{account_index}'/{change_index}'/{address_index}'.\n * See SLIP-0010 {@link https://github.com/satoshilabs/slips/blob/master/slip-0044.md}\n * See BIP-44 {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n *\n * Note that for Ed25519, all components must be hardened.\n * This is because non-hardened [PK] derivation would not work due to Ed25519's lack of a key homomorphism.\n * Specifically, you cannot derive the PK associated with derivation path a/b/c given the PK of a/b.\n * This is because the PK in Ed25519 is, more or less, computed as 𝑔𝐻(𝑠𝑘),\n * with the hash function breaking the homomorphism.\n *\n * @param path - The derivation path string to validate (e.g. `m/44'/637'/0'/0'/0'`).\n * @group Implementation\n * @category Serialization\n */\nexport function isValidHardenedPath(path: string): boolean {\n  return APTOS_HARDENED_REGEX.test(path);\n}\n\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const deriveKey = (hashSeed: Uint8Array | string, data: Uint8Array | string): DerivedKeys => {\n  const digest = hmac.create(sha512, hashSeed).update(data).digest();\n  return {\n    key: digest.slice(0, 32),\n    chainCode: digest.slice(32),\n  };\n};\n\n/**\n * Derive a child key from the private key\n * @param key\n * @param chainCode\n * @param index\n * @group Implementation\n * @category Serialization\n */\nexport const CKDPriv = ({ key, chainCode }: DerivedKeys, index: number): DerivedKeys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n  return deriveKey(chainCode, data);\n};\n\nconst removeApostrophes = (val: string): string => val.replace(/'/g, \"\");\n\n/**\n * Splits derive path into segments\n * @param path\n * @group Implementation\n * @category Serialization\n */\nexport const splitPath = (path: string): Array<string> => path.split(\"/\").slice(1).map(removeApostrophes);\n\n/**\n * Normalizes the mnemonic by removing extra whitespace and making it lowercase\n * @param mnemonic the mnemonic seed phrase\n * @group Implementation\n * @category Serialization\n */\nexport const mnemonicToSeed = (mnemonic: string): Uint8Array => {\n  const normalizedMnemonic = mnemonic\n    .trim()\n    .split(/\\s+/)\n    .map((part) => part.toLowerCase())\n    .join(\" \");\n  return bip39.mnemonicToSeedSync(normalizedMnemonic);\n};\n"],"names":["hmac","sha512","bip39","APTOS_HARDENED_REGEX","APTOS_BIP44_REGEX","KeyType","HARDENED_OFFSET","isValidBIP44Path","path","isValidHardenedPath","deriveKey","hashSeed","data","digest","CKDPriv","key","chainCode","index","buffer","indexBytes","zero","removeApostrophes","val","splitPath","mnemonicToSeed","mnemonic","normalizedMnemonic","part"],"mappings":";;;;;;;;;;;;AAGA,OAAS,QAAAA,MAAY;AACrB,OAAS,UAAAC,MAAc;AACvB,UAAYC,MAAW;;;;AAiBhB,IAAMC,IAAuB,8CAMvBC,IAAoB,2CAOrBC,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,EAAA,OAAA,GAAU,gBADAA,CAAAA,CAAAA,EAAAA,KAAA,CAAA,IAQCC,IAAkB;AAcxB,SAASC,EAAiBC,CAAAA,CAAuB;IACtD,OAAOJ,EAAkB,IAAA,CAAKI,CAAI;AACpC;AAoBO,SAASC,EAAoBD,CAAAA,CAAuB;IACzD,OAAOL,EAAqB,IAAA,CAAKK,CAAI;AACvC;AAMO,IAAME,IAAY,CAACC,GAA+BC,IAA2C;IAClG,IAAMC,IAASb,2JAAAA,CAAK,MAAA,uJAAOC,SAAAA,EAAQU,CAAQ,EAAE,MAAA,CAAOC,CAAI,EAAE,MAAA,CAAO;IACjE,OAAO;QACL,KAAKC,EAAO,KAAA,CAAM,GAAG,EAAE;QACvB,WAAWA,EAAO,KAAA,CAAM,EAAE;IAC5B;AACF,GAUaC,IAAU,CAAC,EAAE,KAAAC,CAAAA,EAAK,WAAAC,CAAU,EAAA,EAAgBC,IAA+B;IACtF,IAAMC,IAAS,IAAI,YAAY,CAAC;IAChC,IAAI,SAASA,CAAM,EAAE,SAAA,CAAU,GAAGD,CAAK;IACvC,IAAME,IAAa,IAAI,WAAWD,CAAM,GAClCE,IAAO,IAAI,WAAW;QAAC,CAAC;KAAC,GACzBR,IAAO,IAAI,WAAW,CAAC;WAAGQ,EAAM;WAAGL,EAAK;WAAGI,CAAU;KAAC;IAC5D,OAAOT,EAAUM,GAAWJ,CAAI;AAClC,GAEMS,KAAqBC,IAAwBA,EAAI,OAAA,CAAQ,MAAM,EAAE,GAQ1DC,KAAaf,IAAgCA,EAAK,KAAA,CAAM,GAAG,EAAE,KAAA,CAAM,CAAC,EAAE,GAAA,CAAIa,CAAiB,GAQ3FG,KAAkBC,GAAiC;IAC9D,IAAMC,IAAqBD,EACxB,IAAA,CAAK,EACL,KAAA,CAAM,KAAK,EACX,GAAA,EAAKE,IAASA,EAAK,WAAA,CAAY,CAAC,EAChC,IAAA,CAAK,GAAG;IACX,+JAAa,qBAAA,EAAmBD,CAAkB;AACpD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1758, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/publicKey.ts"],"sourcesContent":["import { AptosConfig } from \"../../api\";\nimport { Serializable } from \"../../bcs\";\nimport { HexInput } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Hex } from \"../hex\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the arguments required to verify a digital signature.\n *\n * @param message - The original message that was signed.\n * @param signature - The signature to be verified against the message.\n * @group Implementation\n * @category Serialization\n */\nexport interface VerifySignatureArgs {\n  message: HexInput;\n  signature: Signature;\n}\n\n/**\n * Represents the arguments required to verify a digital signature asynchronously.\n *\n * The validity of certain types of signatures are dependent on network state.  This is the case for\n * Keyless signatures which need to lookup the verification key and keyless configuration.\n *\n * @param aptosConfig - The Aptos configuration to use\n * @param message - The original message that was signed.\n * @param signature - The signature to be verified against the message.\n * @group Implementation\n * @category Serialization\n */\nexport type VerifySignatureAsyncArgs = VerifySignatureArgs & {\n  aptosConfig: AptosConfig;\n  options?: any;\n};\n\n/**\n * Represents an abstract public key.\n *\n * This class provides a common interface for verifying signatures associated with the public key.\n * It allows for the retrieval of the raw public key bytes and the public key in a hexadecimal string format.\n * @group Implementation\n * @category Serialization\n */\nexport abstract class PublicKey extends Serializable {\n  /**\n   * Verifies that the private key associated with this public key signed the message with the given signature.\n   * @param args.message The message that was signed\n   * @param args.signature The signature to verify\n   * @group Implementation\n   * @category Serialization\n   */\n  abstract verifySignature(args: VerifySignatureArgs): boolean;\n\n  /**\n   * Verifies signature with the public key and makes any network calls required to get state required to verify the signature.\n   * @param args.aptosConfig The Aptos configuration\n   * @param args.message The message that was signed\n   * @param args.signature The signature to verify\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: VerifySignatureAsyncArgs): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Get the raw public key bytes\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  /**\n   * Get the public key as a hex string with a 0x prefix.\n   *\n   * @returns The public key in hex format.\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    const bytes = this.toUint8Array();\n    return Hex.fromHexInput(bytes).toString();\n  }\n}\n\n/**\n * An abstract representation of an account public key.\n *\n * Provides a common interface for deriving an authentication key.\n *\n * @abstract\n * @group Implementation\n * @category Serialization\n */\nexport abstract class AccountPublicKey extends PublicKey {\n  /**\n   * Get the authentication key associated with this public key\n   * @group Implementation\n   * @category Serialization\n   */\n  abstract authKey(): AuthenticationKey;\n}\n"],"names":["PublicKey","Serializable","args","bytes","Hex","AccountPublicKey"],"mappings":";;;;;;;;AA6CO,IAAeA,IAAf,2PAAiCC,IAAa;IAkBnD,MAAM,qBAAqBC,CAAAA,EAAkD;QAC3E,OAAO,IAAA,CAAK,eAAA,CAAgBA,CAAI;IAClC;IAOA,eAA2B;QACzB,OAAO,IAAA,CAAK,UAAA,CAAW;IACzB;IASA,WAAmB;QACjB,IAAMC,IAAQ,IAAA,CAAK,YAAA,CAAa;QAChC,oPAAOC,IAAAA,CAAI,YAAA,CAAaD,CAAK,EAAE,QAAA,CAAS;IAC1C;AACF,GAWsBE,IAAf,cAAwCL,CAAU;AAOzD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1787, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/signature.ts"],"sourcesContent":["import { Serializable } from \"../../bcs\";\nimport { Hex } from \"../hex\";\n\n/**\n * An abstract representation of a crypto signature,\n * associated with a specific signature scheme, e.g., Ed25519 or Secp256k1.\n *\n * This class represents the product of signing a message directly from a\n * PrivateKey and can be verified against a CryptoPublicKey.\n * @group Implementation\n * @category Serialization\n */\nexport abstract class Signature extends Serializable {\n  /**\n   * Get the raw signature bytes\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  /**\n   * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n   * @returns The hex string representation of the signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    const bytes = this.toUint8Array();\n    return Hex.fromHexInput(bytes).toString();\n  }\n}\n\n/**\n * An abstract representation of an account signature,\n * associated to a specific authentication scheme e.g. Ed25519 or SingleKey\n *\n * This is the product of signing a message through an account,\n * and can be verified against an AccountPublicKey.\n * @group Implementation\n * @category Serialization\n */\n// export abstract class AccountSignature extends Serializable {\n//   /**\n//    * Get the raw signature bytes\n//    */\n//   abstract toUint8Array(): Uint8Array;\n//\n//   /**\n//    * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n//    */\n//   toString(): string {\n//     const bytes = this.toUint8Array();\n//     return Hex.fromHexInput(bytes).toString();\n//   }\n// }\n"],"names":["Signature","Serializable","bytes","Hex"],"mappings":";;;;;;;AAYO,IAAeA,IAAf,2PAAiCC,IAAa;IAMnD,eAA2B;QACzB,OAAO,IAAA,CAAK,UAAA,CAAW;IACzB;IAQA,WAAmB;QACjB,IAAMC,IAAQ,IAAA,CAAK,YAAA,CAAa;QAChC,oPAAOC,IAAAA,CAAI,YAAA,CAAaD,CAAK,EAAE,QAAA,CAAS;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1811, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/secp256k1.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { HDKey } from \"@scure/bip32\";\nimport { Serializable, Deserializer, Serializer } from \"../../bcs\";\nimport { Hex } from \"../hex\";\nimport { HexInput, PrivateKeyVariants } from \"../../types\";\nimport { isValidBIP44Path, mnemonicToSeed } from \"./hdKey\";\nimport { PrivateKey } from \"./privateKey\";\nimport { PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { convertSigningMessage } from \"./utils\";\nimport { AptosConfig } from \"../../api\";\n\n/**\n * Represents a Secp256k1 ECDSA public key.\n *\n * @extends PublicKey\n * @property LENGTH - The length of the Secp256k1 public key in bytes.\n * @group Implementation\n * @category Serialization\n */\nexport class Secp256k1PublicKey extends PublicKey {\n  // Secp256k1 ecdsa public keys contain a prefix indicating compression and two 32-byte coordinates.\n  static readonly LENGTH: number = 65;\n\n  // If it's compressed, it is only 33 bytes\n  static readonly COMPRESSED_LENGTH: number = 33;\n\n  // Hex value of the public key\n  private readonly key: Hex;\n\n  /**\n   * Create a new PublicKey instance from a HexInput, which can be a string or Uint8Array.\n   * This constructor validates the length of the provided signature data.\n   *\n   * @param hexInput - A HexInput (string or Uint8Array) representing the signature data.\n   * @throws Error if the length of the signature data is not equal to Secp256k1Signature.LENGTH.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    const { length } = hex.toUint8Array();\n    if (length === Secp256k1PublicKey.LENGTH) {\n      this.key = hex;\n    } else if (length === Secp256k1PublicKey.COMPRESSED_LENGTH) {\n      const point = secp256k1.ProjectivePoint.fromHex(hex.toUint8Array());\n      this.key = Hex.fromHexInput(point.toRawBytes(false));\n    } else {\n      throw new Error(\n        `PublicKey length should be ${Secp256k1PublicKey.LENGTH} or ${Secp256k1PublicKey.COMPRESSED_LENGTH}, received ${length}`,\n      );\n    }\n  }\n\n  // region PublicKey\n  /**\n   * Verifies a Secp256k1 signature against the public key.\n   *\n   * This function checks the validity of a signature for a given message, ensuring that the signature is canonical as a malleability check.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify against the public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: Secp256k1Signature }): boolean {\n    const { message, signature } = args;\n    const messageToVerify = convertSigningMessage(message);\n    const messageBytes = Hex.fromHexInput(messageToVerify).toUint8Array();\n    const messageSha3Bytes = sha3_256(messageBytes);\n    const signatureBytes = signature.toUint8Array();\n    return secp256k1.verify(signatureBytes, messageSha3Bytes, this.key.toUint8Array(), { lowS: true });\n  }\n\n  /**\n   * Note: Secp256k1Signatures can be verified syncronously.\n   *\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of Secp256k1Signature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Secp256k1Signature;\n  }): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Get the data as a Uint8Array representation.\n   *\n   * @returns Uint8Array representation of the data.\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the data into a byte array using the provided serializer.\n   * This function is essential for converting data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to convert the data.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  /**\n   * Deserializes a Secp256k1Signature from the provided deserializer.\n   * This function allows you to reconstruct a Secp256k1Signature object from its serialized byte representation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  // eslint-disable-next-line class-methods-use-this\n  deserialize(deserializer: Deserializer) {\n    const hex = deserializer.deserializeBytes();\n    return new Secp256k1Signature(hex);\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * Determine if the provided public key is an instance of Secp256k1PublicKey.\n   *\n   * @deprecated use `instanceof Secp256k1PublicKey` instead\n   * @param publicKey - The public key to check.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is Secp256k1PublicKey {\n    return publicKey instanceof Secp256k1PublicKey;\n  }\n\n  /**\n   * Determines if the provided public key is a valid instance of a Secp256k1 public key.\n   * This function checks for the presence of a \"key\" property and validates the length of the key data.\n   *\n   * @param publicKey - The public key to validate.\n   * @returns A boolean indicating whether the public key is a valid Secp256k1 public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey): publicKey is Secp256k1PublicKey {\n    return \"key\" in publicKey && (publicKey.key as any)?.data?.length === Secp256k1PublicKey.LENGTH;\n  }\n}\n\n/**\n * Represents a Secp256k1 ECDSA private key, providing functionality to create, sign messages,\n * derive public keys, and serialize/deserialize the key.\n * @group Implementation\n * @category Serialization\n */\nexport class Secp256k1PrivateKey extends Serializable implements PrivateKey {\n  /**\n   * Length of Secp256k1 ecdsa private key\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The private key bytes\n   * @private\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly key: Hex;\n\n  // region Constructors\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   * @param strict If true, private key must AIP-80 compliant.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(hexInput: HexInput, strict?: boolean) {\n    super();\n\n    const privateKeyHex = PrivateKey.parseHexInput(hexInput, PrivateKeyVariants.Secp256k1, strict);\n    if (privateKeyHex.toUint8Array().length !== Secp256k1PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Secp256k1PrivateKey.LENGTH}`);\n    }\n\n    this.key = privateKeyHex;\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Secp256k1PrivateKey - A newly generated Secp256k1 private key.\n   * @group Implementation\n   * @category Serialization\n   */\n  static generate(): Secp256k1PrivateKey {\n    const hexInput = secp256k1.utils.randomPrivateKey();\n    return new Secp256k1PrivateKey(hexInput, false);\n  }\n\n  /**\n   * Derives a private key from a mnemonic seed phrase using a specified BIP44 path.\n   *\n   * @param path - The BIP44 path to derive the key from.\n   * @param mnemonics - The mnemonic seed phrase used for key generation.\n   *\n   * @returns The generated private key.\n   *\n   * @throws Error if the provided path is not a valid BIP44 path.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromDerivationPath(path: string, mnemonics: string): Secp256k1PrivateKey {\n    if (!isValidBIP44Path(path)) {\n      throw new Error(`Invalid derivation path ${path}`);\n    }\n    return Secp256k1PrivateKey.fromDerivationPathInner(path, mnemonicToSeed(mnemonics));\n  }\n\n  /**\n   * Derives a private key from a specified BIP44 path using a given seed.\n   * This function is essential for generating keys that follow the hierarchical deterministic (HD) wallet structure.\n   *\n   * @param path - The BIP44 path used for key derivation.\n   * @param seed - The seed phrase created by the mnemonics, represented as a Uint8Array.\n   * @returns The generated private key as an instance of Secp256k1PrivateKey.\n   * @throws Error if the derived private key is invalid.\n   * @group Implementation\n   * @category Serialization\n   */\n  private static fromDerivationPathInner(path: string, seed: Uint8Array): Secp256k1PrivateKey {\n    const { privateKey } = HDKey.fromMasterSeed(seed).derive(path);\n    // library returns privateKey as Uint8Array | null\n    if (privateKey === null) {\n      throw new Error(\"Invalid key\");\n    }\n\n    return new Secp256k1PrivateKey(privateKey, false);\n  }\n\n  // endregion\n\n  // region PrivateKey\n\n  /**\n   * Sign the given message with the private key.\n   * This function generates a cryptographic signature for the provided message, ensuring the signature is canonical and non-malleable.\n   *\n   * @param message - A message in HexInput format to be signed.\n   * @returns Signature - The generated signature for the provided message.\n   * @group Implementation\n   * @category Serialization\n   */\n  sign(message: HexInput): Secp256k1Signature {\n    const messageToSign = convertSigningMessage(message);\n    const messageBytes = Hex.fromHexInput(messageToSign);\n    const messageHashBytes = sha3_256(messageBytes.toUint8Array());\n    const signature = secp256k1.sign(messageHashBytes, this.key.toUint8Array(), { lowS: true });\n    return new Secp256k1Signature(signature.toCompactRawBytes());\n  }\n\n  /**\n   * Derive the Secp256k1PublicKey from this private key.\n   *\n   * @returns Secp256k1PublicKey The derived public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  publicKey(): Secp256k1PublicKey {\n    const bytes = secp256k1.getPublicKey(this.key.toUint8Array(), false);\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  /**\n   * Get the private key as a string representation.\n   *\n   * @returns string representation of the private key\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    return this.toHexString();\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key.\n   */\n  toHexString(): string {\n    return this.key.toString();\n  }\n\n  /**\n   * Get the private key as a AIP-80 compliant hex string.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @returns AIP-80 compliant string representation of the private key.\n   */\n  toAIP80String(): string {\n    return PrivateKey.formatPrivateKey(this.key.toString(), PrivateKeyVariants.Secp256k1);\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PrivateKey(bytes, false);\n  }\n\n  // endregion\n\n  /**\n   * Determines if the provided private key is an instance of Secp256k1PrivateKey.\n   *\n   * @param privateKey - The private key to be checked.\n   *\n   * @deprecated use `instanceof Secp256k1PrivateKey` instead\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPrivateKey(privateKey: PrivateKey): privateKey is Secp256k1PrivateKey {\n    return privateKey instanceof Secp256k1PrivateKey;\n  }\n}\n\n/**\n * Represents a signature of a message signed using a Secp256k1 ECDSA private key.\n *\n * @group Implementation\n * @category Serialization\n */\nexport class Secp256k1Signature extends Signature {\n  /**\n   * Secp256k1 ecdsa signatures are 256-bit.\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly data: Hex;\n\n  // region Constructors\n\n  /**\n   * Create a new Signature instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(hexInput: HexInput) {\n    super();\n    const data = Hex.fromHexInput(hexInput);\n    if (data.toUint8Array().length !== Secp256k1Signature.LENGTH) {\n      throw new Error(\n        `Signature length should be ${Secp256k1Signature.LENGTH}, received ${data.toUint8Array().length}`,\n      );\n    }\n    this.data = data;\n  }\n\n  // endregion\n\n  // region Signature\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1Signature {\n    const hex = deserializer.deserializeBytes();\n    return new Secp256k1Signature(hex);\n  }\n\n  // endregion\n}\n"],"names":["sha3_256","secp256k1","HDKey","_Secp256k1PublicKey","PublicKey","hexInput","hex","Hex","length","point","secp256k1","args","message","signature","messageToVerify","convertSigningMessage","messageBytes","messageSha3Bytes","sha3_256","signatureBytes","serializer","deserializer","Secp256k1Signature","bytes","publicKey","Secp256k1PublicKey","_Secp256k1PrivateKey","Serializable","strict","privateKeyHex","PrivateKey","path","mnemonics","isValidBIP44Path","mnemonicToSeed","seed","privateKey","HDKey","messageToSign","messageHashBytes","Secp256k1PrivateKey","_Secp256k1Signature","Signature","data"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1959, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/authenticationKey.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"./accountAddress\";\nimport type { AccountPublicKey } from \"./crypto\";\nimport { Hex } from \"./hex\";\nimport { AuthenticationKeyScheme, HexInput } from \"../types\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\n\n/**\n * Represents an authentication key used for account management. Each account stores an authentication key that enables account\n * owners to rotate their private key(s) without changing the address that hosts their account. The authentication key is a\n * SHA3-256 hash of data and is always 32 bytes in length.\n *\n * @see {@link https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Account addresses can be derived from the AuthenticationKey.\n * @group Implementation\n * @category Serialization\n */\nexport class AuthenticationKey extends Serializable {\n  /**\n   * An authentication key is always a SHA3-256 hash of data, and is always 32 bytes.\n   *\n   * The data to hash depends on the underlying public key type and the derivation scheme.\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The raw bytes of the authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly data: Hex;\n\n  /**\n   * Creates an instance of the AuthenticationKey using the provided hex input.\n   * This ensures that the hex input is valid and conforms to the required length for an Authentication Key.\n   *\n   * @param args - The arguments for constructing the AuthenticationKey.\n   * @param args.data - The hex input data to be used for the Authentication Key.\n   * @throws {Error} Throws an error if the length of the provided hex input is not equal to the required Authentication Key\n   * length.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { data: HexInput }) {\n    super();\n    const { data } = args;\n    const hex = Hex.fromHexInput(data);\n    if (hex.toUint8Array().length !== AuthenticationKey.LENGTH) {\n      throw new Error(`Authentication Key length should be ${AuthenticationKey.LENGTH}`);\n    }\n    this.data = hex;\n  }\n\n  /**\n   * Serializes the fixed bytes data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data.toUint8Array());\n  }\n\n  /**\n   * Deserialize an AuthenticationKey from the byte buffer in a Deserializer instance.\n   * @param deserializer - The deserializer to deserialize the AuthenticationKey from.\n   * @returns An instance of AuthenticationKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): AuthenticationKey {\n    const bytes = deserializer.deserializeFixedBytes(AuthenticationKey.LENGTH);\n    return new AuthenticationKey({ data: bytes });\n  }\n\n  /**\n   * Convert the internal data representation to a Uint8Array.\n   *\n   * This function is useful for obtaining a byte representation of the data, which can be utilized for serialization or transmission.\n   *\n   * @returns Uint8Array representation of the internal data.\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  /**\n   * Generates an AuthenticationKey from the specified scheme and input bytes.\n   * This function is essential for creating a valid authentication key based on a given scheme.\n   *\n   * @param args - The arguments for generating the AuthenticationKey.\n   * @param args.scheme - The authentication key scheme to use.\n   * @param args.input - The input data in hexadecimal format to derive the key.\n   * @returns An instance of AuthenticationKey containing the generated key data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromSchemeAndBytes(args: { scheme: AuthenticationKeyScheme; input: HexInput }): AuthenticationKey {\n    const { scheme, input } = args;\n    const inputBytes = Hex.fromHexInput(input).toUint8Array();\n    const hashInput = new Uint8Array([...inputBytes, scheme]);\n    const hash = sha3Hash.create();\n    hash.update(hashInput);\n    const hashDigest = hash.digest();\n    return new AuthenticationKey({ data: hashDigest });\n  }\n\n  /**\n   * Derives an AuthenticationKey from the provided public key using a specified derivation scheme.\n   *\n   * @deprecated Use `fromPublicKey` instead.\n   * @param args - The arguments for deriving the authentication key.\n   * @param args.publicKey - The public key used for the derivation.\n   * @param args.scheme - The scheme to use for deriving the authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public static fromPublicKeyAndScheme(args: { publicKey: AccountPublicKey; scheme: AuthenticationKeyScheme }) {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Converts a PublicKey to an AuthenticationKey using the derivation scheme inferred from the provided PublicKey instance.\n   *\n   * @param args - The arguments for the function.\n   * @param args.publicKey - The PublicKey to be converted.\n   * @returns AuthenticationKey - The derived AuthenticationKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromPublicKey(args: { publicKey: AccountPublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Derives an account address from an AuthenticationKey by translating the AuthenticationKey bytes directly to an AccountAddress.\n   *\n   * @returns AccountAddress - The derived account address.\n   * @group Implementation\n   * @category Serialization\n   */\n  derivedAddress(): AccountAddress {\n    return new AccountAddress(this.data.toUint8Array());\n  }\n}\n"],"names":["sha3Hash","_AuthenticationKey","Serializable","args","data","hex","Hex","serializer","deserializer","bytes","scheme","input","inputBytes","hashInput","hash","sha3Hash","hashDigest","publicKey","AccountAddress","AuthenticationKey"],"mappings":";;;;;;AAGA,OAAS,YAAYA,MAAgB;;;;;AAmB9B,IAAMC,IAAN,MAAMA,uPAA0BC,IAAa;IA4BlD,YAAYC,CAAAA,CAA0B;QACpC,KAAA,CAAM;QACN,IAAM,EAAE,MAAAC,CAAK,EAAA,GAAID,GACXE,iPAAMC,IAAAA,CAAI,YAAA,CAAaF,CAAI;QACjC,IAAIC,EAAI,YAAA,CAAa,EAAE,MAAA,KAAWJ,EAAkB,MAAA,EAClD,MAAM,IAAI,MAAM,CAAA,oCAAA,EAAuCA,EAAkB,MAAM,EAAE;QAEnF,IAAA,CAAK,IAAA,GAAOI;IACd;IASA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,mBAAA,CAAoB,IAAA,CAAK,IAAA,CAAK,YAAA,CAAa,CAAC;IACzD;IASA,OAAO,YAAYC,CAAAA,EAA+C;QAChE,IAAMC,IAAQD,EAAa,qBAAA,CAAsBP,EAAkB,MAAM;QACzE,OAAO,IAAIA,EAAkB;YAAE,MAAMQ;QAAM,CAAC;IAC9C;IAWA,eAA2B;QACzB,OAAO,IAAA,CAAK,IAAA,CAAK,YAAA,CAAa;IAChC;IAaA,OAAO,mBAAmBN,CAAAA,EAA+E;QACvG,IAAM,EAAE,QAAAO,CAAAA,EAAQ,OAAAC,CAAM,EAAA,GAAIR,GACpBS,iPAAaN,IAAAA,CAAI,YAAA,CAAaK,CAAK,EAAE,YAAA,CAAa,GAClDE,IAAY,IAAI,WAAW,CAAC;eAAGD;YAAYF,CAAM;SAAC,GAClDI,wJAAOC,WAAAA,CAAS,MAAA,CAAO;QAC7BD,EAAK,MAAA,CAAOD,CAAS;QACrB,IAAMG,IAAaF,EAAK,MAAA,CAAO;QAC/B,OAAO,IAAIb,EAAkB;YAAE,MAAMe;QAAW,CAAC;IACnD;IAYA,OAAc,uBAAuBb,CAAAA,EAAwE;QAC3G,IAAM,EAAE,WAAAc,CAAU,EAAA,GAAId;QACtB,OAAOc,EAAU,OAAA,CAAQ;IAC3B;IAWA,OAAO,cAAcd,CAAAA,EAA0D;QAC7E,IAAM,EAAE,WAAAc,CAAU,EAAA,GAAId;QACtB,OAAOc,EAAU,OAAA,CAAQ;IAC3B;IASA,iBAAiC;QAC/B,OAAO,iPAAIC,IAAAA,CAAe,IAAA,CAAK,IAAA,CAAK,YAAA,CAAa,CAAC;IACpD;AACF;AAtIajB,EAQK,MAAA,GAAiB;AAR5B,IAAMkB,IAANlB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2022, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/ed25519.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ed25519 } from \"@noble/curves/ed25519\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Hex } from \"../hex\";\nimport { HexInput, SigningScheme as AuthenticationKeyScheme, PrivateKeyVariants } from \"../../types\";\nimport { CKDPriv, deriveKey, HARDENED_OFFSET, isValidHardenedPath, mnemonicToSeed, splitPath } from \"./hdKey\";\nimport { PrivateKey } from \"./privateKey\";\nimport { AccountPublicKey, PublicKey, VerifySignatureArgs, VerifySignatureAsyncArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { convertSigningMessage } from \"./utils\";\n\n/**\n * L is the value that greater than or equal to will produce a non-canonical signature, and must be rejected\n * @group Implementation\n * @category Serialization\n */\nconst L: number[] = [\n  0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,\n];\n\n/**\n * Checks if an ED25519 signature is non-canonical.\n * This function helps determine the validity of a signature by verifying its canonical form.\n *\n * @param signature - The signature to be checked for canonicality.\n * @returns A boolean indicating whether the signature is non-canonical.\n *\n * Comes from Aptos Core\n * https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-crypto/src/ed25519/ed25519_sigs.rs#L47-L85\n * @group Implementation\n * @category Serialization\n */\nexport function isCanonicalEd25519Signature(signature: Signature): boolean {\n  const s = signature.toUint8Array().slice(32);\n  for (let i = L.length - 1; i >= 0; i -= 1) {\n    if (s[i] < L[i]) {\n      return true;\n    }\n    if (s[i] > L[i]) {\n      return false;\n    }\n  }\n  // As this stage S == L which implies a non-canonical S.\n  return false;\n}\n\n/**\n * Represents the public key of an Ed25519 key pair.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Ed25519 scheme is represented in the SDK as `Legacy authentication key` and also\n * as `AnyPublicKey` that represents any `Unified authentication key`.\n * @group Implementation\n * @category Serialization\n */\nexport class Ed25519PublicKey extends AccountPublicKey {\n  /**\n   * Length of an Ed25519 public key\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * Bytes of the public key\n   * @private\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly key: Hex;\n\n  /**\n   * Creates an instance of the Ed25519Signature class from a hex input.\n   * This constructor validates the length of the signature to ensure it meets the required specifications.\n   *\n   * @param hexInput - The hex input representing the Ed25519 signature.\n   * @throws Error if the signature length is not equal to Ed25519Signature.LENGTH.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.key = hex;\n  }\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies a signed message using a public key.\n   *\n   * @param args - The arguments for verification.\n   * @param args.message - A signed message as a Hex string or Uint8Array.\n   * @param args.signature - The signature of the message.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: VerifySignatureArgs): boolean {\n    const { message, signature } = args;\n    // Verify malleability\n    if (!isCanonicalEd25519Signature(signature)) {\n      return false;\n    }\n\n    const messageToVerify = convertSigningMessage(message);\n    const messageBytes = Hex.fromHexInput(messageToVerify).toUint8Array();\n    const signatureBytes = signature.toUint8Array();\n    const publicKeyBytes = this.key.toUint8Array();\n    return ed25519.verify(signatureBytes, messageBytes, publicKeyBytes);\n  }\n\n  /**\n   * Note: Ed25519Signatures can be verified syncronously.\n   *\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of Secp256k1Signature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: VerifySignatureAsyncArgs): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Generates an authentication key from the public key using the Ed25519 scheme.\n   * This function is essential for creating a secure authentication key that can be used for further cryptographic operations.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.Ed25519,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Convert the internal data representation to a Uint8Array.\n   *\n   * @returns Uint8Array representation of the data.\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the data into a byte array using the provided serializer.\n   * This allows for the conversion of data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  /**\n   * Deserialize bytes into an Ed25519Signature object.\n   * This function is used to convert serialized byte data into a usable Ed25519Signature instance.\n   *\n   * @param deserializer - The deserializer instance used to read the byte data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(bytes);\n  }\n\n  // endregion\n\n  /**\n   * Determine if the provided public key is an instance of Ed25519PublicKey.\n   *\n   * @param publicKey - The public key to check.\n   * @returns True if the public key is an instance of Ed25519PublicKey, otherwise false.\n   * @deprecated use `instanceof Ed25519PublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: AccountPublicKey): publicKey is Ed25519PublicKey {\n    return publicKey instanceof Ed25519PublicKey;\n  }\n\n  /**\n   * Determines if the provided public key is a valid Ed25519 public key.\n   * This function checks for the presence of the \"key\" property and verifies that its data length matches the expected length\n   * for Ed25519 public keys.\n   *\n   * @param publicKey - The public key to validate.\n   * @returns A boolean indicating whether the public key is a valid Ed25519 public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey): publicKey is Ed25519PublicKey {\n    return \"key\" in publicKey && (publicKey.key as any)?.data?.length === Ed25519PublicKey.LENGTH;\n  }\n}\n\n/**\n * Represents the private key of an Ed25519 key pair.\n * @group Implementation\n * @category Serialization\n */\nexport class Ed25519PrivateKey extends Serializable implements PrivateKey {\n  /**\n   * Length of an Ed25519 private key\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The Ed25519 key seed to use for BIP-32 compatibility\n   * See more {@link https://github.com/satoshilabs/slips/blob/master/slip-0010.md}\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly SLIP_0010_SEED = \"ed25519 seed\";\n\n  /**\n   * The Ed25519 signing key\n   * @private\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly signingKey: Hex;\n\n  // region Constructors\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @param hexInput HexInput (string or Uint8Array)\n   * @param strict If true, private key must AIP-80 compliant.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(hexInput: HexInput, strict?: boolean) {\n    super();\n\n    const privateKeyHex = PrivateKey.parseHexInput(hexInput, PrivateKeyVariants.Ed25519, strict);\n    if (privateKeyHex.toUint8Array().length !== Ed25519PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Ed25519PrivateKey.LENGTH}`);\n    }\n\n    // Create keyPair from Private key in Uint8Array format\n    this.signingKey = privateKeyHex;\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Ed25519PrivateKey A newly generated Ed25519 private key.\n   * @group Implementation\n   * @category Serialization\n   */\n  static generate(): Ed25519PrivateKey {\n    const keyPair = ed25519.utils.randomPrivateKey();\n    return new Ed25519PrivateKey(keyPair, false);\n  }\n\n  /**\n   * Derives a private key from a mnemonic seed phrase using a specified BIP44 path.\n   * To derive multiple keys from the same phrase, change the path\n   *\n   * IMPORTANT: Ed25519 supports hardened derivation only, as it lacks a key homomorphism, making non-hardened derivation impossible.\n   *\n   * @param path - The BIP44 path used for key derivation.\n   * @param mnemonics - The mnemonic seed phrase from which the key will be derived.\n   * @throws Error if the provided path is not a valid hardened path.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromDerivationPath(path: string, mnemonics: string): Ed25519PrivateKey {\n    if (!isValidHardenedPath(path)) {\n      throw new Error(`Invalid derivation path ${path}`);\n    }\n    return Ed25519PrivateKey.fromDerivationPathInner(path, mnemonicToSeed(mnemonics));\n  }\n\n  /**\n   * Derives a child private key from a given BIP44 path and seed.\n   * A private inner function so we can separate from the main fromDerivationPath() method\n   * to add tests to verify we create the keys correctly.\n   *\n   * @param path - The BIP44 path used for key derivation.\n   * @param seed - The seed phrase created by the mnemonics, represented as a Uint8Array.\n   * @param offset - The offset used for key derivation, defaults to HARDENED_OFFSET.\n   * @returns An instance of Ed25519PrivateKey derived from the specified path and seed.\n   * @group Implementation\n   * @category Serialization\n   */\n  private static fromDerivationPathInner(path: string, seed: Uint8Array, offset = HARDENED_OFFSET): Ed25519PrivateKey {\n    const { key, chainCode } = deriveKey(Ed25519PrivateKey.SLIP_0010_SEED, seed);\n\n    const segments = splitPath(path).map((el) => parseInt(el, 10));\n\n    // Derive the child key based on the path\n    const { key: privateKey } = segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n      key,\n      chainCode,\n    });\n    return new Ed25519PrivateKey(privateKey, false);\n  }\n\n  // endregion\n\n  // region PrivateKey\n\n  /**\n   * Derive the Ed25519PublicKey for this private key.\n   *\n   * @returns Ed25519PublicKey - The derived public key corresponding to the private key.\n   * @group Implementation\n   * @category Serialization\n   */\n  publicKey(): Ed25519PublicKey {\n    const bytes = ed25519.getPublicKey(this.signingKey.toUint8Array());\n    return new Ed25519PublicKey(bytes);\n  }\n\n  /**\n   * Sign the given message with the private key.\n   * This function generates a digital signature for the specified message, ensuring its authenticity and integrity.\n   *\n   * @param message - A message as a string or Uint8Array in HexInput format.\n   * @returns A digital signature for the provided message.\n   * @group Implementation\n   * @category Serialization\n   */\n  sign(message: HexInput): Ed25519Signature {\n    const messageToSign = convertSigningMessage(message);\n    const messageBytes = Hex.fromHexInput(messageToSign).toUint8Array();\n    const signatureBytes = ed25519.sign(messageBytes, this.signingKey.toUint8Array());\n    return new Ed25519Signature(signatureBytes);\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the private key\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.signingKey.toUint8Array();\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key.\n   * @group Implementation\n   * @category Serialization\n   */\n  toString(): string {\n    return this.toHexString();\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key.\n   */\n  toHexString(): string {\n    return this.signingKey.toString();\n  }\n\n  /**\n   * Get the private key as a AIP-80 compliant hex string.\n   *\n   * [Read about AIP-80](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md)\n   *\n   * @returns AIP-80 compliant string representation of the private key.\n   */\n  toAIP80String(): string {\n    return PrivateKey.formatPrivateKey(this.signingKey.toString(), PrivateKeyVariants.Ed25519);\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PrivateKey(bytes, false);\n  }\n\n  // endregion\n\n  /**\n   * Determines if the provided private key is an instance of Ed25519PrivateKey.\n   *\n   * @param privateKey - The private key to check.\n   * @returns A boolean indicating whether the private key is an Ed25519PrivateKey.\n   *\n   * @deprecated Use `instanceof Ed25519PrivateKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPrivateKey(privateKey: PrivateKey): privateKey is Ed25519PrivateKey {\n    return privateKey instanceof Ed25519PrivateKey;\n  }\n}\n\n/**\n * Represents a signature of a message signed using an Ed25519 private key.\n * @group Implementation\n * @category Serialization\n */\nexport class Ed25519Signature extends Signature {\n  /**\n   * Length of an Ed25519 signature, which is 64 bytes.\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly data: Hex;\n\n  // region Constructors\n\n  constructor(hexInput: HexInput) {\n    super();\n    const data = Hex.fromHexInput(hexInput);\n    if (data.toUint8Array().length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n    this.data = data;\n  }\n\n  // endregion\n\n  // region Signature\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519Signature(bytes);\n  }\n\n  // endregion\n}\n"],"names":["ed25519","L","isCanonicalEd25519Signature","signature","s","i","_Ed25519PublicKey","AccountPublicKey","hexInput","hex","Hex","args","message","messageToVerify","convertSigningMessage","messageBytes","signatureBytes","publicKeyBytes","ed25519","AuthenticationKey","serializer","deserializer","bytes","publicKey","Ed25519PublicKey","_Ed25519PrivateKey","Serializable","strict","privateKeyHex","PrivateKey","keyPair","path","mnemonics","isValidHardenedPath","mnemonicToSeed","seed","offset","HARDENED_OFFSET","key","chainCode","deriveKey","segments","splitPath","el","privateKey","parentKeys","segment","CKDPriv","messageToSign","Ed25519Signature","Ed25519PrivateKey","_Ed25519Signature","Signature","data"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2210, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/ephemeral.ts"],"sourcesContent":["import { Serializer, Deserializer } from \"../../bcs\";\nimport { EphemeralPublicKeyVariant, EphemeralSignatureVariant, HexInput } from \"../../types\";\nimport { PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { Hex } from \"../hex\";\nimport { AptosConfig } from \"../../api\";\n\n/**\n * Represents ephemeral public keys for Aptos Keyless accounts.\n *\n * These keys are used only temporarily within Keyless accounts and are not utilized as public keys for account identification.\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralPublicKey extends PublicKey {\n  /**\n   * The public key itself\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKey: PublicKey;\n\n  /**\n   * An enum indicating the scheme of the ephemeral public key\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly variant: EphemeralPublicKeyVariant;\n\n  /**\n   * Creates an instance of EphemeralPublicKey using the provided public key.\n   * This constructor ensures that only supported signature types are accepted.\n   *\n   * @param publicKey - The public key to be used for the ephemeral public key.\n   * @throws Error if the signature type is unsupported.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(publicKey: PublicKey) {\n    super();\n    const publicKeyType = publicKey.constructor.name;\n    switch (publicKeyType) {\n      case Ed25519PublicKey.name:\n        this.publicKey = publicKey;\n        this.variant = EphemeralPublicKeyVariant.Ed25519;\n        break;\n      default:\n        throw new Error(`Unsupported key for EphemeralPublicKey - ${publicKeyType}`);\n    }\n  }\n\n  /**\n   * Verifies a signed message using the ephemeral public key.\n   *\n   * @param args - The arguments for the verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature that was signed by the private key of the ephemeral public key.\n   * @returns true if the signature is valid, otherwise false.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: EphemeralSignature }): boolean {\n    const { message, signature } = args;\n    return this.publicKey.verifySignature({ message, signature: signature.signature });\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: EphemeralSignature;\n  }): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Serializes the current instance, specifically handling the Ed25519 signature type.\n   * This function ensures that the signature is properly serialized using the provided serializer.\n   *\n   * @param serializer - The serializer instance used to serialize the signature.\n   * @throws Error if the signature type is unknown.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(EphemeralPublicKeyVariant.Ed25519);\n      this.publicKey.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown public key type\");\n    }\n  }\n\n  /**\n   * Deserializes an EphemeralSignature from the provided deserializer.\n   * This function allows you to retrieve an EphemeralSignature based on the deserialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): EphemeralPublicKey {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case EphemeralPublicKeyVariant.Ed25519:\n        return new EphemeralPublicKey(Ed25519PublicKey.deserialize(deserializer));\n      default:\n        throw new Error(`Unknown variant index for EphemeralPublicKey: ${index}`);\n    }\n  }\n\n  /**\n   * Determines if the provided public key is an instance of `EphemeralPublicKey`.\n   *\n   * @param publicKey - The public key to check.\n   * @returns A boolean indicating whether the public key is an ephemeral type.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is EphemeralPublicKey {\n    return publicKey instanceof EphemeralPublicKey;\n  }\n}\n\n/**\n * Represents ephemeral signatures used in Aptos Keyless accounts.\n *\n * These signatures are utilized within the KeylessSignature framework.\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralSignature extends Signature {\n  /**\n   * The signature signed by the private key of an EphemeralKeyPair\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signature: Signature;\n\n  constructor(signature: Signature) {\n    super();\n    const signatureType = signature.constructor.name;\n    switch (signatureType) {\n      case Ed25519Signature.name:\n        this.signature = signature;\n        break;\n      default:\n        throw new Error(`Unsupported signature for EphemeralSignature - ${signatureType}`);\n    }\n  }\n\n  /**\n   * Deserializes an ephemeral signature from a hexadecimal input.\n   * This function allows you to convert a hexadecimal representation of an ephemeral signature into its deserialized form for\n   * further processing.\n   *\n   * @param hexInput - The hexadecimal input representing the ephemeral signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromHex(hexInput: HexInput): EphemeralSignature {\n    const data = Hex.fromHexInput(hexInput);\n    const deserializer = new Deserializer(data.toUint8Array());\n    return EphemeralSignature.deserialize(deserializer);\n  }\n\n  serialize(serializer: Serializer): void {\n    if (this.signature instanceof Ed25519Signature) {\n      serializer.serializeU32AsUleb128(EphemeralSignatureVariant.Ed25519);\n      this.signature.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown signature type\");\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): EphemeralSignature {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case EphemeralSignatureVariant.Ed25519:\n        return new EphemeralSignature(Ed25519Signature.deserialize(deserializer));\n      default:\n        throw new Error(`Unknown variant index for EphemeralSignature: ${index}`);\n    }\n  }\n}\n"],"names":["EphemeralPublicKey","_EphemeralPublicKey","PublicKey","publicKey","publicKeyType","Ed25519PublicKey","args","message","signature","serializer","deserializer","index","EphemeralSignature","_EphemeralSignature","Signature","signatureType","Ed25519Signature","hexInput","data","Hex","Deserializer"],"mappings":";;;;;;;;;;;;;;AAeO,IAAMA,IAAN,MAAMC,uPAA2BC,IAAU;IAwBhD,YAAYC,CAAAA,CAAsB;QAChC,KAAA,CAAM;QACN,IAAMC,IAAgBD,EAAU,WAAA,CAAY,IAAA;QAC5C,OAAQC,EAAe;YACrB,kPAAKC,IAAAA,CAAiB,IAAA;gBACpB,IAAA,CAAK,SAAA,GAAYF,GACjB,IAAA,CAAK,OAAA,GAAU;gBACf;YACF;gBACE,MAAM,IAAI,MAAM,CAAA,yCAAA,EAA4CC,CAAa,EAAE;QAC/E;IACF;IAYA,gBAAgBE,CAAAA,EAAqE;QACnF,IAAM,EAAE,SAAAC,CAAAA,EAAS,WAAAC,CAAU,EAAA,GAAIF;QAC/B,OAAO,IAAA,CAAK,SAAA,CAAU,eAAA,CAAgB;YAAE,SAAAC;YAAS,WAAWC,EAAU;QAAU,CAAC;IACnF;IAEA,MAAM,qBAAqBF,CAAAA,EAIN;QACnB,OAAO,IAAA,CAAK,eAAA,CAAgBA,CAAI;IAClC;IAWA,UAAUG,CAAAA,EAA8B;QACtC,IAAI,IAAA,CAAK,SAAA,yPAAqBJ,IAAAA,EAC5BI,EAAW,qBAAA,CAAA,CAAuD,GAClE,IAAA,CAAK,SAAA,CAAU,SAAA,CAAUA,CAAU,MAEnC;aAAA,MAAM,IAAI,MAAM,yBAAyB;IAE7C;IAUA,OAAO,YAAYC,CAAAA,EAAgD;QACjE,IAAMC,IAAQD,EAAa,uBAAA,CAAwB;QACnD,OAAQC,EAAO;YACb,KAAA;gBACE,OAAO,IAAIV,+OAAmBI,IAAAA,CAAiB,WAAA,CAAYK,CAAY,CAAC;YAC1E;gBACE,MAAM,IAAI,MAAM,CAAA,8CAAA,EAAiDC,CAAK,EAAE;QAC5E;IACF;IAUA,OAAO,YAAYR,CAAAA,EAAuD;QACxE,OAAOA,aAAqBF;IAC9B;AACF,GASaW,IAAN,MAAMC,uPAA2BC,IAAU;IAQhD,YAAYN,CAAAA,CAAsB;QAChC,KAAA,CAAM;QACN,IAAMO,IAAgBP,EAAU,WAAA,CAAY,IAAA;QAC5C,OAAQO,EAAe;YACrB,kPAAKC,IAAAA,CAAiB,IAAA;gBACpB,IAAA,CAAK,SAAA,GAAYR;gBACjB;YACF;gBACE,MAAM,IAAI,MAAM,CAAA,+CAAA,EAAkDO,CAAa,EAAE;QACrF;IACF;IAWA,OAAO,QAAQE,CAAAA,EAAwC;QACrD,IAAMC,iPAAOC,IAAAA,CAAI,YAAA,CAAaF,CAAQ,GAChCP,IAAe,iPAAIU,IAAAA,CAAaF,EAAK,YAAA,CAAa,CAAC;QACzD,OAAOL,EAAmB,WAAA,CAAYH,CAAY;IACpD;IAEA,UAAUD,CAAAA,EAA8B;QACtC,IAAI,IAAA,CAAK,SAAA,yPAAqBO,IAAAA,EAC5BP,EAAW,qBAAA,CAAA,CAAuD,GAClE,IAAA,CAAK,SAAA,CAAU,SAAA,CAAUA,CAAU,MAEnC;aAAA,MAAM,IAAI,MAAM,wBAAwB;IAE5C;IAEA,OAAO,YAAYC,CAAAA,EAAgD;QACjE,IAAMC,IAAQD,EAAa,uBAAA,CAAwB;QACnD,OAAQC,EAAO;YACb,KAAA;gBACE,OAAO,IAAIE,+OAAmBG,IAAAA,CAAiB,WAAA,CAAYN,CAAY,CAAC;YAC1E;gBACE,MAAM,IAAI,MAAM,CAAA,8CAAA,EAAiDC,CAAK,EAAE;QAC5E;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2300, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transactionSubmission/helpers.ts"],"sourcesContent":["/**\n * Validates the fee payer data when submitting a transaction to ensure that the fee payer authenticator is provided if a fee\n * payer address is specified.\n * This helps prevent errors in transaction submission related to fee payer authentication.\n *\n * @param target - The target object where the method is defined.\n * @param propertyKey - The name of the method being decorated.\n * @param descriptor - The property descriptor for the method.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * const config = new AptosConfig({ network: Network.TESTNET });\n * const aptos = new Aptos(config);\n *\n * class TransactionHandler {\n *   @ValidateFeePayerDataOnSubmission\n *   async submitTransaction(methodArgs: { transaction: { feePayerAddress: string }, feePayerAuthenticator?: string }) {\n *     // Logic to submit the transaction\n *   }\n * }\n *\n * async function runExample() {\n *   const handler = new TransactionHandler();\n *\n *   // Attempt to submit a transaction without a fee payer authenticator\n *   try {\n *     await handler.submitTransaction({\n *       transaction: { feePayerAddress: \"0x1\" }, // replace with a real fee payer address\n *     });\n *   } catch (error) {\n *     console.error(error.message); // Should log the error message\n *   }\n *\n *   // Submit a transaction with a fee payer authenticator\n *   await handler.submitTransaction({\n *     transaction: { feePayerAddress: \"0x1\" }, // replace with a real fee payer address\n *     feePayerAuthenticator: \"authenticatorValue\", // replace with a real authenticator\n *   });\n *\n *   console.log(\"Transaction submitted successfully.\");\n * }\n * runExample().catch(console.error);\n * ```\n * @group Implementation\n */\nexport function ValidateFeePayerDataOnSubmission(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  /* eslint-disable-next-line func-names, no-param-reassign */\n  descriptor.value = async function (...args: any[]) {\n    const [methodArgs] = args;\n\n    if (methodArgs.transaction.feePayerAddress && !methodArgs.feePayerAuthenticator) {\n      throw new Error(\"You are submitting a Fee Payer transaction but missing the feePayerAuthenticator\");\n    }\n\n    return originalMethod.apply(this, args);\n  };\n\n  return descriptor;\n}\n\n/**\n * Validates that the fee payer public key is provided when simulating a Fee Payer transaction.\n * This ensures that all necessary data is present for the simulation to proceed correctly.\n *\n * @param target - The target object where the method is defined.\n * @param propertyKey - The name of the method being decorated.\n * @param descriptor - The property descriptor for the method.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * const config = new AptosConfig({ network: Network.TESTNET });\n * const aptos = new Aptos(config);\n *\n * async function runExample() {\n *   const methodArgs = {\n *     transaction: {\n *       feePayerAddress: \"0x1\", // replace with a real fee payer address\n *     },\n *     feePayerPublicKey: undefined, // missing fee payer public key\n *   };\n *\n *   try {\n *     // This will throw an error due to missing feePayerPublicKey\n *     await aptos.someMethod(methodArgs);\n *   } catch (error) {\n *     console.error(error.message); // Output the error message\n *   }\n * }\n * runExample().catch(console.error);\n * ```\n * @group Implementation\n */\nexport function ValidateFeePayerDataOnSimulation(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  /* eslint-disable-next-line func-names, no-param-reassign */\n  descriptor.value = async function (...args: any[]) {\n    return originalMethod.apply(this, args);\n  };\n\n  return descriptor;\n}\n"],"names":["ValidateFeePayerDataOnSubmission","target","propertyKey","descriptor","originalMethod","args","methodArgs","ValidateFeePayerDataOnSimulation"],"mappings":";;;;AA+CO,SAASA,EAAiCC,CAAAA,EAAiBC,CAAAA,EAAqBC,CAAAA,CAAgC;IACrH,IAAMC,IAAiBD,EAAW,KAAA;IAElC,OAAAA,EAAW,KAAA,GAAQ,eAAA,GAAmBE,CAAAA,CAAa;QACjD,IAAM,CAACC,CAAU,CAAA,GAAID;QAErB,IAAIC,EAAW,WAAA,CAAY,eAAA,IAAmB,CAACA,EAAW,qBAAA,EACxD,MAAM,IAAI,MAAM,kFAAkF;QAGpG,OAAOF,EAAe,KAAA,CAAM,IAAA,EAAMC,CAAI;IACxC,GAEOF;AACT;AAoCO,SAASI,EAAiCN,CAAAA,EAAiBC,CAAAA,EAAqBC,CAAAA,CAAgC;IACrH,IAAMC,IAAiBD,EAAW,KAAA;IAElC,OAAAA,EAAW,KAAA,GAAQ,eAAA,GAAmBE,CAAAA,CAAa;QACjD,OAAOD,EAAe,KAAA,CAAM,IAAA,EAAMC,CAAI;IACxC,GAEOF;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2326, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/abstraction.ts"],"sourcesContent":["import { Deserializer, Serializer } from \"../../bcs\";\nimport { HexInput } from \"../../types\";\nimport { AccountAddress } from \"../accountAddress\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Hex } from \"../hex\";\nimport { AccountPublicKey, VerifySignatureArgs, VerifySignatureAsyncArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\n\nexport class AbstractSignature extends Signature {\n  readonly value: Uint8Array;\n\n  constructor(value: HexInput) {\n    super();\n    this.value = Hex.fromHexInput(value).toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): AbstractSignature {\n    return new AbstractSignature(deserializer.deserializeBytes());\n  }\n}\n\nexport class AbstractPublicKey extends AccountPublicKey {\n  readonly accountAddress: AccountAddress;\n\n  constructor(accountAddress: AccountAddress) {\n    super();\n    this.accountAddress = accountAddress;\n  }\n\n  authKey(): AuthenticationKey {\n    return new AuthenticationKey({ data: this.accountAddress.toUint8Array() });\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  verifySignature(args: VerifySignatureArgs): boolean {\n    throw new Error(\"This function is not implemented for AbstractPublicKey.\");\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async verifySignatureAsync(args: VerifySignatureAsyncArgs): Promise<boolean> {\n    throw new Error(\"This function is not implemented for AbstractPublicKey.\");\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  serialize(serializer: Serializer): void {\n    throw new Error(\"This function is not implemented for AbstractPublicKey.\");\n  }\n}\n"],"names":["AbstractSignature","_AbstractSignature","Signature","value","Hex","serializer","deserializer","AbstractPublicKey","AccountPublicKey","accountAddress","AuthenticationKey","args"],"mappings":";;;;;;;;;;;;AAQO,IAAMA,IAAN,MAAMC,uPAA0BC,IAAU;IAG/C,YAAYC,CAAAA,CAAiB;QAC3B,KAAA,CAAM,GACN,IAAA,CAAK,KAAA,gPAAQC,IAAAA,CAAI,YAAA,CAAaD,CAAK,EAAE,YAAA,CAAa;IACpD;IAEA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,cAAA,CAAe,IAAA,CAAK,KAAK;IACtC;IAEA,OAAO,YAAYC,CAAAA,EAA+C;QAChE,OAAO,IAAIL,EAAkBK,EAAa,gBAAA,CAAiB,CAAC;IAC9D;AACF,GAEaC,IAAN,2PAAgCC,IAAiB;IAGtD,YAAYC,CAAAA,CAAgC;QAC1C,KAAA,CAAM,GACN,IAAA,CAAK,cAAA,GAAiBA;IACxB;IAEA,UAA6B;QAC3B,OAAO,iPAAIC,IAAAA,CAAkB;YAAE,MAAM,IAAA,CAAK,cAAA,CAAe,YAAA,CAAa;QAAE,CAAC;IAC3E;IAGA,gBAAgBC,CAAAA,EAAoC;QAClD,MAAM,IAAI,MAAM,yDAAyD;IAC3E;IAGA,MAAM,qBAAqBA,CAAAA,EAAkD;QAC3E,MAAM,IAAI,MAAM,yDAAyD;IAC3E;IAGA,UAAUN,CAAAA,EAA8B;QACtC,MAAM,IAAI,MAAM,yDAAyD;IAC3E;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2375, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/types/generated/queries.ts"],"sourcesContent":["import * as Types from \"./operations\";\n\nimport { GraphQLClient, RequestOptions } from \"graphql-request\";\ntype GraphQLClientRequestHeaders = RequestOptions[\"requestHeaders\"];\nexport const TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nexport const AnsTokenFragmentFragmentDoc = `\n    fragment AnsTokenFragment on current_aptos_names {\n  domain\n  expiration_timestamp\n  registered_address\n  subdomain\n  token_standard\n  is_primary\n  owner_address\n  subdomain_expiration_policy\n  domain_expiration_timestamp\n}\n    `;\nexport const CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsCount = `\n    query getAccountCoinsCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nexport const GetAccountCollectionsWithOwnedTokens = `\n    query getAccountCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nexport const GetAccountOwnedTokens = `\n    query getAccountOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensByTokenData = `\n    query getAccountOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensFromCollection = `\n    query getAccountOwnedTokensFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetChainTopUserTransactions = `\n    query getChainTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!) {\n  current_collections_v2(where: $where_condition) {\n    uri\n    total_minted_v2\n    token_standard\n    table_handle_v1\n    mutable_uri\n    mutable_description\n    max_supply\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    cdn_asset_uris {\n      cdn_image_uri\n      asset_uri\n      animation_optimizer_retry_count\n      cdn_animation_uri\n      cdn_json_uri\n      image_optimizer_retry_count\n      json_parser_retry_count\n      raw_animation_uri\n      raw_image_uri\n    }\n  }\n}\n    `;\nexport const GetCurrentFungibleAssetBalances = `\n    query getCurrentFungibleAssetBalances($where_condition: current_fungible_asset_balances_bool_exp, $offset: Int, $limit: Int) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetEvents = `\n    query getEvents($where_condition: events_bool_exp, $offset: Int, $limit: Int, $order_by: [events_order_by!]) {\n  events(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    account_address\n    creation_number\n    data\n    event_index\n    sequence_number\n    transaction_block_height\n    transaction_version\n    type\n    indexed_type\n  }\n}\n    `;\nexport const GetFungibleAssetActivities = `\n    query getFungibleAssetActivities($where_condition: fungible_asset_activities_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_activities(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    block_height\n    entry_function_id_str\n    event_index\n    gas_fee_payer_address\n    is_frozen\n    is_gas_fee\n    is_transaction_success\n    owner_address\n    storage_id\n    storage_refund_amount\n    token_standard\n    transaction_timestamp\n    transaction_version\n    type\n  }\n}\n    `;\nexport const GetFungibleAssetMetadata = `\n    query getFungibleAssetMetadata($where_condition: fungible_asset_metadata_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_metadata(where: $where_condition, offset: $offset, limit: $limit) {\n    icon_uri\n    project_uri\n    supply_aggregator_table_handle_v1\n    supply_aggregator_table_key_v1\n    creator_address\n    asset_type\n    decimals\n    last_transaction_timestamp\n    last_transaction_version\n    name\n    symbol\n    token_standard\n    supply_v2\n    maximum_v2\n  }\n}\n    `;\nexport const GetNames = `\n    query getNames($offset: Int, $limit: Int, $where_condition: current_aptos_names_bool_exp, $order_by: [current_aptos_names_order_by!]) {\n  current_aptos_names(\n    limit: $limit\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n  ) {\n    ...AnsTokenFragment\n  }\n}\n    ${AnsTokenFragmentFragmentDoc}`;\nexport const GetNumberOfDelegators = `\n    query getNumberOfDelegators($where_condition: num_active_delegator_per_pool_bool_exp, $order_by: [num_active_delegator_per_pool_order_by!]) {\n  num_active_delegator_per_pool(where: $where_condition, order_by: $order_by) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nexport const GetObjectData = `\n    query getObjectData($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nexport const GetProcessorStatus = `\n    query getProcessorStatus($where_condition: processor_status_bool_exp) {\n  processor_status(where: $where_condition) {\n    last_success_version\n    processor\n    last_updated\n  }\n}\n    `;\nexport const GetTableItemsData = `\n    query getTableItemsData($where_condition: table_items_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_items_order_by!]) {\n  table_items(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    decoded_key\n    decoded_value\n    key\n    table_handle\n    transaction_version\n    write_set_change_index\n  }\n}\n    `;\nexport const GetTableItemsMetadata = `\n    query getTableItemsMetadata($where_condition: table_metadatas_bool_exp!, $offset: Int, $limit: Int, $order_by: [table_metadatas_order_by!]) {\n  table_metadatas(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    handle\n    key_type\n    value_type\n  }\n}\n    `;\nexport const GetTokenActivity = `\n    query getTokenActivity($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetCurrentTokenOwnership = `\n    query getCurrentTokenOwnership($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    decimals\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(\n  action: (requestHeaders?: Record<string, string>) => Promise<T>,\n  operationName: string,\n  operationType?: string,\n  variables?: any,\n) => Promise<T>;\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountCoinsCount(\n      variables?: Types.GetAccountCoinsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsCountQuery>(GetAccountCoinsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountCoinsData(\n      variables: Types.GetAccountCoinsDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsData\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountCollectionsWithOwnedTokens(\n      variables: Types.GetAccountCollectionsWithOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountCollectionsWithOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCollectionsWithOwnedTokensQuery>(\n            GetAccountCollectionsWithOwnedTokens,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountCollectionsWithOwnedTokens\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokens(\n      variables: Types.GetAccountOwnedTokensQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensQuery>(GetAccountOwnedTokens, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokens\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokensByTokenData(\n      variables: Types.GetAccountOwnedTokensByTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensByTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensByTokenDataQuery>(GetAccountOwnedTokensByTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokensByTokenData\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountOwnedTokensFromCollection(\n      variables: Types.GetAccountOwnedTokensFromCollectionQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountOwnedTokensFromCollectionQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensFromCollectionQuery>(\n            GetAccountOwnedTokensFromCollection,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountOwnedTokensFromCollection\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountTokensCount(\n      variables?: Types.GetAccountTokensCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTokensCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getAccountTransactionsCount(\n      variables?: Types.GetAccountTransactionsCountQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTransactionsCount\",\n        \"query\",\n        variables,\n      );\n    },\n    getChainTopUserTransactions(\n      variables?: Types.GetChainTopUserTransactionsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetChainTopUserTransactionsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetChainTopUserTransactionsQuery>(GetChainTopUserTransactions, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getChainTopUserTransactions\",\n        \"query\",\n        variables,\n      );\n    },\n    getCollectionData(\n      variables: Types.GetCollectionDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCollectionDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCollectionDataQuery>(GetCollectionData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCollectionData\",\n        \"query\",\n        variables,\n      );\n    },\n    getCurrentFungibleAssetBalances(\n      variables?: Types.GetCurrentFungibleAssetBalancesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentFungibleAssetBalancesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentFungibleAssetBalancesQuery>(GetCurrentFungibleAssetBalances, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentFungibleAssetBalances\",\n        \"query\",\n        variables,\n      );\n    },\n    getDelegatedStakingActivities(\n      variables?: Types.GetDelegatedStakingActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getDelegatedStakingActivities\",\n        \"query\",\n        variables,\n      );\n    },\n    getEvents(\n      variables?: Types.GetEventsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetEventsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetEventsQuery>(GetEvents, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getEvents\",\n        \"query\",\n        variables,\n      );\n    },\n    getFungibleAssetActivities(\n      variables?: Types.GetFungibleAssetActivitiesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetActivitiesQuery>(GetFungibleAssetActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetActivities\",\n        \"query\",\n        variables,\n      );\n    },\n    getFungibleAssetMetadata(\n      variables?: Types.GetFungibleAssetMetadataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetFungibleAssetMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetMetadataQuery>(GetFungibleAssetMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetMetadata\",\n        \"query\",\n        variables,\n      );\n    },\n    getNames(\n      variables?: Types.GetNamesQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNamesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNamesQuery>(GetNames, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getNames\",\n        \"query\",\n        variables,\n      );\n    },\n    getNumberOfDelegators(\n      variables?: Types.GetNumberOfDelegatorsQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetNumberOfDelegatorsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNumberOfDelegatorsQuery>(GetNumberOfDelegators, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getNumberOfDelegators\",\n        \"query\",\n        variables,\n      );\n    },\n    getObjectData(\n      variables?: Types.GetObjectDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetObjectDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetObjectDataQuery>(GetObjectData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getObjectData\",\n        \"query\",\n        variables,\n      );\n    },\n    getProcessorStatus(\n      variables?: Types.GetProcessorStatusQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetProcessorStatusQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetProcessorStatusQuery>(GetProcessorStatus, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getProcessorStatus\",\n        \"query\",\n        variables,\n      );\n    },\n    getTableItemsData(\n      variables: Types.GetTableItemsDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTableItemsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTableItemsDataQuery>(GetTableItemsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTableItemsData\",\n        \"query\",\n        variables,\n      );\n    },\n    getTableItemsMetadata(\n      variables: Types.GetTableItemsMetadataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTableItemsMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTableItemsMetadataQuery>(GetTableItemsMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTableItemsMetadata\",\n        \"query\",\n        variables,\n      );\n    },\n    getTokenActivity(\n      variables: Types.GetTokenActivityQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenActivityQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenActivityQuery>(GetTokenActivity, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenActivity\",\n        \"query\",\n        variables,\n      );\n    },\n    getCurrentTokenOwnership(\n      variables: Types.GetCurrentTokenOwnershipQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetCurrentTokenOwnershipQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentTokenOwnershipQuery>(GetCurrentTokenOwnership, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentTokenOwnership\",\n        \"query\",\n        variables,\n      );\n    },\n    getTokenData(\n      variables?: Types.GetTokenDataQueryVariables,\n      requestHeaders?: GraphQLClientRequestHeaders,\n    ): Promise<Types.GetTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenData\",\n        \"query\",\n        variables,\n      );\n    },\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;\n"],"names":["TokenActivitiesFieldsFragmentDoc","AnsTokenFragmentFragmentDoc","CurrentTokenOwnershipFieldsFragmentDoc","GetAccountCoinsCount","GetAccountCoinsData","GetAccountCollectionsWithOwnedTokens","GetAccountOwnedTokens","GetAccountOwnedTokensByTokenData","GetAccountOwnedTokensFromCollection","GetAccountTokensCount","GetAccountTransactionsCount","GetChainTopUserTransactions","GetCollectionData","GetCurrentFungibleAssetBalances","GetDelegatedStakingActivities","GetEvents","GetFungibleAssetActivities","GetFungibleAssetMetadata","GetNames","GetNumberOfDelegators","GetObjectData","GetProcessorStatus","GetTableItemsData","GetTableItemsMetadata","GetTokenActivity","GetCurrentTokenOwnership","GetTokenData","defaultWrapper","action","_operationName","_operationType","_variables","getSdk","client","withWrapper","variables","requestHeaders","wrappedRequestHeaders"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3033, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/client/post.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse, AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * Options for making a POST request, including the API client configuration.\n * @group Implementation\n * @category Client\n */\nexport type PostRequestOptions = {\n  /**\n   * The config for the API client\n   * @group Implementation\n   * @category Client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   * @group Implementation\n   * @category Client\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   * @group Implementation\n   * @category Client\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   * @group Implementation\n   * @category Client\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   * @group Implementation\n   * @category Client\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   * @group Implementation\n   * @category Client\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   * @group Implementation\n   * @category Client\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * The body of the request, should match the content type of the request\n   * @group Implementation\n   * @category Client\n   */\n  body?: any;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   * @group Implementation\n   * @category Client\n   */\n  overrides?: ClientConfig;\n};\n\n/**\n * Options for posting a request to Aptos, excluding the type field.\n * @group Implementation\n * @category Client\n */\nexport type PostAptosRequestOptions = Omit<PostRequestOptions, \"type\">;\n\n/**\n * Executes a POST request to the specified URL with the provided options.\n *\n * @param options - The options for the POST request.\n * @param options.type - The type of the request.\n * @param options.originMethod - The original method that initiated the request.\n * @param options.path - The path for the request.\n * @param options.body - The body content to be sent with the request.\n * @param options.acceptType - The type of response expected from the server.\n * @param options.contentType - The content type of the request body.\n * @param options.params - Additional parameters to include in the request.\n * @param options.aptosConfig - Configuration settings for the Aptos request.\n * @param options.overrides - Any overrides for the default request behavior.\n * @returns The response from the POST request.\n * @group Implementation\n * @category Client\n */\nexport async function post<Req extends {}, Res extends {}>(\n  options: PostRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { type, originMethod, path, body, acceptType, contentType, params, aptosConfig, overrides } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"POST\",\n      originMethod,\n      path,\n      body,\n      contentType,\n      acceptType,\n      params,\n      overrides,\n    },\n    aptosConfig,\n    options.type,\n  );\n}\n\n/**\n * Sends a request to the Aptos full node using the specified options.\n * This function allows you to interact with the Aptos blockchain by sending requests to the full node.\n *\n * @param options - The options for the request.\n * @param options.aptosConfig - Configuration settings for the Aptos client.\n * @param options.aptosConfig.clientConfig - Client-specific configuration settings.\n * @param options.aptosConfig.fullnodeConfig - Full node-specific configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosFullNode<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.FULLNODE,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.fullnodeConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.fullnodeConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Sends a request to the Aptos indexer with the specified options.\n * This function allows you to interact with the Aptos indexer and customize the request using various configurations.\n *\n * @param options - The options for the request to the Aptos indexer.\n * @param options.aptosConfig - Configuration settings specific to the Aptos client and indexer.\n * @param options.aptosConfig.clientConfig - The client configuration settings.\n * @param options.aptosConfig.indexerConfig - The indexer configuration settings.\n * @param options.overrides - Additional overrides for the request.\n * @param options.overrides.HEADERS - Custom headers to include in the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosIndexer<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.INDEXER,\n    overrides: {\n      ...aptosConfig.clientConfig,\n      ...aptosConfig.indexerConfig,\n      ...options.overrides,\n      HEADERS: { ...aptosConfig.clientConfig?.HEADERS, ...aptosConfig.indexerConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Sends a request to the Aptos faucet to obtain test tokens.\n * This function modifies the provided configuration to ensure that the API_KEY is not included in the request.\n *\n * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n * the minting page at https://aptos.dev/network/faucet.\n *\n * @param options - The options for the request.\n * @param options.aptosConfig - The configuration settings for the Aptos client.\n * @param options.aptosConfig.clientConfig - The client-specific configuration settings.\n * @param options.aptosConfig.clientConfig.HEADERS - Optional headers to include in the request.\n * @param options.aptosConfig.faucetConfig - The configuration settings specific to the faucet.\n * @param options.overrides - Additional overrides for the request configuration.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosFaucet<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig } = options;\n  // Faucet does not support API_KEY\n  // Create a new object with the desired modification\n  const modifiedAptosConfig = {\n    ...aptosConfig,\n    clientConfig: { ...aptosConfig.clientConfig },\n  };\n  // Delete API_KEY config\n  delete modifiedAptosConfig?.clientConfig?.API_KEY;\n\n  return post<Req, Res>({\n    ...options,\n    type: AptosApiType.FAUCET,\n    overrides: {\n      ...modifiedAptosConfig.clientConfig,\n      ...modifiedAptosConfig.faucetConfig,\n      ...options.overrides,\n      HEADERS: { ...modifiedAptosConfig.clientConfig?.HEADERS, ...modifiedAptosConfig.faucetConfig?.HEADERS },\n    },\n  });\n}\n\n/**\n * Makes a post request to the pepper service.\n *\n * @param options - The options for the request.\n * @param options.url - The URL to which the request is sent.\n * @param options.headers - The headers to include in the request.\n * @param options.body - The body of the request.\n * @returns A promise that resolves to the response from the pepper service.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosPepperService<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.PEPPER });\n}\n\n/**\n * Sends a request to the Aptos proving service with the specified options.\n *\n * @param options - The options for the request to the Aptos proving service.\n * @param options.type - The type of the request, which should be set to AptosApiType.PROVER.\n * @param options.data - The data to be included in the request.\n * @group Implementation\n * @category Client\n */\nexport async function postAptosProvingService<Req extends {}, Res extends {}>(\n  options: PostAptosRequestOptions,\n): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.PROVER });\n}\n"],"names":["post","options","type","originMethod","path","body","acceptType","contentType","params","aptosConfig","overrides","url","aptosRequest","postAptosFullNode","postAptosIndexer","postAptosFaucet","modifiedAptosConfig","postAptosPepperService","postAptosProvingService"],"mappings":";;;;;;;;;;AA8FA,eAAsBA,EACpBC,CAAAA,CACkC;IAClC,IAAM,EAAE,MAAAC,CAAAA,EAAM,cAAAC,CAAAA,EAAc,MAAAC,CAAAA,EAAM,MAAAC,CAAAA,EAAM,YAAAC,CAAAA,EAAY,aAAAC,CAAAA,EAAa,QAAAC,CAAAA,EAAQ,aAAAC,CAAAA,EAAa,WAAAC,CAAU,EAAA,GAAIT,GAC9FU,IAAMF,EAAY,aAAA,CAAcP,CAAI;IAE1C,WAAOU,iPAAAA,EACL;QACE,KAAAD;QACA,QAAQ;QACR,cAAAR;QACA,MAAAC;QACA,MAAAC;QACA,aAAAE;QACA,YAAAD;QACA,QAAAE;QACA,WAAAE;IACF,GACAD,GACAR,EAAQ,IACV;AACF;AAcA,eAAsBY,EACpBZ,CAAAA,CACkC;IAClC,IAAM,EAAE,aAAAQ,CAAY,EAAA,GAAIR;IAExB,OAAOD,EAAe;QACpB,GAAGC,CAAAA;QACH,MAAA;QACA,WAAW;YACT,GAAGQ,EAAY,YAAA;YACf,GAAGA,EAAY,cAAA;YACf,GAAGR,EAAQ,SAAA;YACX,SAAS;gBAAE,GAAGQ,EAAY,YAAA,EAAc,OAAA;gBAAS,GAAGA,EAAY,cAAA,EAAgB;YAAQ;QAC1F;IACF,CAAC;AACH;AAeA,eAAsBK,EACpBb,CAAAA,CACkC;IAClC,IAAM,EAAE,aAAAQ,CAAY,EAAA,GAAIR;IAExB,OAAOD,EAAe;QACpB,GAAGC,CAAAA;QACH,MAAA;QACA,WAAW;YACT,GAAGQ,EAAY,YAAA;YACf,GAAGA,EAAY,aAAA;YACf,GAAGR,EAAQ,SAAA;YACX,SAAS;gBAAE,GAAGQ,EAAY,YAAA,EAAc,OAAA;gBAAS,GAAGA,EAAY,aAAA,EAAe;YAAQ;QACzF;IACF,CAAC;AACH;AAkBA,eAAsBM,EACpBd,CAAAA,CACkC;IAClC,IAAM,EAAE,aAAAQ,CAAY,EAAA,GAAIR,GAGlBe,IAAsB;QAC1B,GAAGP,CAAAA;QACH,cAAc;YAAE,GAAGA,EAAY;QAAa;IAC9C;IAEA,OAAA,OAAOO,GAAqB,cAAc,SAEnChB,EAAe;QACpB,GAAGC,CAAAA;QACH,MAAA;QACA,WAAW;YACT,GAAGe,EAAoB,YAAA;YACvB,GAAGA,EAAoB,YAAA;YACvB,GAAGf,EAAQ,SAAA;YACX,SAAS;gBAAE,GAAGe,EAAoB,YAAA,EAAc,OAAA;gBAAS,GAAGA,EAAoB,YAAA,EAAc;YAAQ;QACxG;IACF,CAAC;AACH;AAaA,eAAsBC,EACpBhB,CAAAA,CACkC;IAClC,OAAOD,EAAe;QAAE,GAAGC,CAAAA;QAAS,MAAA;IAA0B,CAAC;AACjE;AAWA,eAAsBiB,EACpBjB,CAAAA,CACkC;IAClC,OAAOD,EAAe;QAAE,GAAGC,CAAAA;QAAS,MAAA;IAA0B,CAAC;AACjE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3130, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/general.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/general}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * general namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getAptosFullNode, postAptosIndexer } from \"../client\";\nimport { GetChainTopUserTransactionsResponse, GetProcessorStatusResponse, GraphqlQuery, LedgerInfo } from \"../types\";\nimport { GetChainTopUserTransactionsQuery, GetProcessorStatusQuery } from \"../types/generated/operations\";\nimport { GetChainTopUserTransactions, GetProcessorStatus } from \"../types/generated/queries\";\nimport { ProcessorType } from \"../utils/const\";\n\n/**\n * Retrieves information about the current ledger.\n *\n * @param args - The arguments for retrieving ledger information.\n * @param args.aptosConfig - The configuration object for connecting to the Aptos network.\n * @group Implementation\n */\nexport async function getLedgerInfo(args: { aptosConfig: AptosConfig }): Promise<LedgerInfo> {\n  const { aptosConfig } = args;\n  const { data } = await getAptosFullNode<{}, LedgerInfo>({\n    aptosConfig,\n    originMethod: \"getLedgerInfo\",\n    path: \"\",\n  });\n  return data;\n}\n\n/**\n * Retrieves the top user transactions for a specific blockchain chain.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.limit - The maximum number of transactions to retrieve.\n * @returns An array of user transactions.\n * @group Implementation\n */\nexport async function getChainTopUserTransactions(args: {\n  aptosConfig: AptosConfig;\n  limit: number;\n}): Promise<GetChainTopUserTransactionsResponse> {\n  const { aptosConfig, limit } = args;\n  const graphqlQuery = {\n    query: GetChainTopUserTransactions,\n    variables: { limit },\n  };\n\n  const data = await queryIndexer<GetChainTopUserTransactionsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getChainTopUserTransactions\",\n  });\n\n  return data.user_transactions;\n}\n\n/**\n * Executes a GraphQL query against the Aptos indexer and retrieves the resulting data.\n *\n * @param args - The arguments for the query.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.query - The GraphQL query to be executed.\n * @param args.originMethod - An optional string to specify the origin method for tracking purposes.\n * @returns The data returned from the query execution.\n * @group Implementation\n */\nexport async function queryIndexer<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  query: GraphqlQuery;\n  originMethod?: string;\n}): Promise<T> {\n  const { aptosConfig, query, originMethod } = args;\n  const { data } = await postAptosIndexer<GraphqlQuery, T>({\n    aptosConfig,\n    originMethod: originMethod ?? \"queryIndexer\",\n    path: \"\",\n    body: query,\n    overrides: { WITH_CREDENTIALS: false },\n  });\n  return data;\n}\n\n/**\n * Retrieves the current statuses of processors.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @returns The statuses of the processors.\n * @group Implementation\n */\nexport async function getProcessorStatuses(args: { aptosConfig: AptosConfig }): Promise<GetProcessorStatusResponse> {\n  const { aptosConfig } = args;\n\n  const graphqlQuery = {\n    query: GetProcessorStatus,\n  };\n\n  const data = await queryIndexer<GetProcessorStatusQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getProcessorStatuses\",\n  });\n\n  return data.processor_status;\n}\n\n/**\n * Retrieves the last success version from the indexer.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @returns The last success version as a BigInt.\n * @group Implementation\n */\nexport async function getIndexerLastSuccessVersion(args: { aptosConfig: AptosConfig }): Promise<bigint> {\n  const response = await getProcessorStatuses({ aptosConfig: args.aptosConfig });\n  return BigInt(response[0].last_success_version);\n}\n\n/**\n * Retrieves the status of a specified processor in the Aptos network.\n * This function allows you to check the current operational status of a processor, which can be useful for monitoring and troubleshooting.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for connecting to the Aptos network.\n * @param args.processorType - The type of processor whose status you want to retrieve.\n * @returns The status of the specified processor.\n * @group Implementation\n */\nexport async function getProcessorStatus(args: {\n  aptosConfig: AptosConfig;\n  processorType: ProcessorType;\n}): Promise<GetProcessorStatusResponse[0]> {\n  const { aptosConfig, processorType } = args;\n\n  const whereCondition: { processor: { _eq: string } } = {\n    processor: { _eq: processorType },\n  };\n\n  const graphqlQuery = {\n    query: GetProcessorStatus,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetProcessorStatusQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getProcessorStatus\",\n  });\n\n  return data.processor_status[0];\n}\n"],"names":["getLedgerInfo","args","aptosConfig","data","getAptosFullNode","getChainTopUserTransactions","limit","queryIndexer","GetChainTopUserTransactions","query","originMethod","postAptosIndexer","getProcessorStatuses","GetProcessorStatus","getIndexerLastSuccessVersion","response","getProcessorStatus","processorType"],"mappings":";;;;;;;;;;;;;;AAyBA,eAAsBA,EAAcC,CAAAA,CAAyD;IAC3F,IAAM,EAAE,aAAAC,CAAY,EAAA,GAAID,GAClB,EAAE,MAAAE,CAAK,EAAA,GAAI,MAAMC,qPAAAA,EAAiC;QACtD,aAAAF;QACA,cAAc;QACd,MAAM;IACR,CAAC;IACD,OAAOC;AACT;AAWA,eAAsBE,EAA4BJ,CAAAA,CAGD;IAC/C,IAAM,EAAE,aAAAC,CAAAA,EAAa,OAAAI,CAAM,EAAA,GAAIL;IAY/B,OAAA,CANa,MAAMM,EAA+C;QAChE,aAAAL;QACA,OAPmB;YACnB,oPAAOM,IAAAA;YACP,WAAW;gBAAE,OAAAF;YAAM;QACrB;QAKE,cAAc;IAChB,CAAC,CAAA,EAEW;AACd;AAYA,eAAsBC,EAA2BN,CAAAA,CAIlC;IACb,IAAM,EAAE,aAAAC,CAAAA,EAAa,OAAAO,CAAAA,EAAO,cAAAC,CAAa,EAAA,GAAIT,GACvC,EAAE,MAAAE,CAAK,EAAA,GAAI,2PAAMQ,EAAkC;QACvD,aAAAT;QACA,cAAcQ,KAAgB;QAC9B,MAAM;QACN,MAAMD;QACN,WAAW;YAAE,kBAAkB,CAAA;QAAM;IACvC,CAAC;IACD,OAAON;AACT;AAUA,eAAsBS,EAAqBX,CAAAA,CAAyE;IAClH,IAAM,EAAE,aAAAC,CAAY,EAAA,GAAID;IAYxB,OAAA,CANa,MAAMM,EAAsC;QACvD,aAAAL;QACA,OANmB;YACnB,oPAAOW;QACT;QAKE,cAAc;IAChB,CAAC,CAAA,EAEW;AACd;AAUA,eAAsBC,EAA6Bb,CAAAA,CAAqD;IACtG,IAAMc,IAAW,MAAMH,EAAqB;QAAE,aAAaX,EAAK;IAAY,CAAC;IAC7E,OAAO,OAAOc,CAAAA,CAAS,CAAC,CAAA,CAAE,oBAAoB;AAChD;AAYA,eAAsBC,EAAmBf,CAAAA,CAGE;IACzC,IAAM,EAAE,aAAAC,CAAAA,EAAa,eAAAe,CAAc,EAAA,GAAIhB;IAmBvC,OAAA,CANa,MAAMM,EAAsC;QACvD,aAAAL;QACA,OATmB;YACnB,oPAAOW,IAAAA;YACP,WAAW;gBACT,iBAPmD;oBACrD,WAAW;wBAAE,KAAKI;oBAAc;gBAClC;YAME;QACF;QAKE,cAAc;IAChB,CAAC,CAAA,EAEW,gBAAA,CAAiB,CAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3218, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/table.ts"],"sourcesContent":["import { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFullNode } from \"../client\";\nimport {\n  TableItemRequest,\n  LedgerVersionArg,\n  PaginationArgs,\n  WhereArg,\n  OrderByArg,\n  GetTableItemsDataResponse,\n  GetTableItemsMetadataResponse,\n} from \"../types\";\nimport { GetTableItemsDataQuery, GetTableItemsMetadataQuery } from \"../types/generated/operations\";\nimport { GetTableItemsData, GetTableItemsMetadata } from \"../types/generated/queries\";\nimport { TableItemsBoolExp, TableMetadatasBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves a specific item from a table in the Aptos blockchain.\n *\n * @param args - The arguments for retrieving the table item.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.handle - The identifier for the table from which to retrieve the item.\n * @param args.data - The request data for the table item.\n * @param args.options - Optional parameters for the request, including ledger version.\n * @group Implementation\n */\nexport async function getTableItem<T>(args: {\n  aptosConfig: AptosConfig;\n  handle: string;\n  data: TableItemRequest;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, handle, data, options } = args;\n  const response = await postAptosFullNode<TableItemRequest, any>({\n    aptosConfig,\n    originMethod: \"getTableItem\",\n    path: `tables/${handle}/item`,\n    params: { ledger_version: options?.ledgerVersion },\n    body: data,\n  });\n  return response.data as T;\n}\n\n/**\n * Retrieves table items data based on specified conditions and pagination options.\n *\n * @param args - The arguments for retrieving table items data.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.where - Conditions to filter the table items.\n * @param args.options.orderBy - The criteria to sort the results.\n * @group Implementation\n */\nexport async function getTableItemsData(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<TableItemsBoolExp> & OrderByArg<GetTableItemsDataResponse[0]>;\n}) {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetTableItemsData,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTableItemsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTableItemsData\",\n  });\n\n  return data.table_items;\n}\n\n/**\n * Retrieves metadata for table items based on specified options.\n *\n * @param args - The arguments for retrieving table items metadata.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.where - Conditions to filter the results.\n * @param args.options.orderBy - The order in which to return the results.\n * @returns A promise that resolves to an array of table metadata.\n * @group Implementation\n */\nexport async function getTableItemsMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<TableMetadatasBoolExp> & OrderByArg<GetTableItemsMetadataResponse[0]>;\n}): Promise<GetTableItemsMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetTableItemsMetadata,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTableItemsMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTableItemsMetadata\",\n  });\n\n  return data.table_metadatas;\n}\n"],"names":["getTableItem","args","aptosConfig","handle","data","options","postAptosFullNode","getTableItemsData","graphqlQuery","GetTableItemsData","queryIndexer","getTableItemsMetadata","GetTableItemsMetadata"],"mappings":";;;;;;;;;;;AA0BA,eAAsBA,EAAgBC,CAAAA,CAKvB;IACb,IAAM,EAAE,aAAAC,CAAAA,EAAa,QAAAC,CAAAA,EAAQ,MAAAC,CAAAA,EAAM,SAAAC,CAAQ,EAAA,GAAIJ;IAQ/C,OAAA,CAPiB,UAAMK,iPAAAA,EAAyC;QAC9D,aAAAJ;QACA,cAAc;QACd,MAAM,CAAA,OAAA,EAAUC,CAAM,CAAA,KAAA,CAAA;QACtB,QAAQ;YAAE,gBAAgBE,GAAS;QAAc;QACjD,MAAMD;IACR,CAAC,CAAA,EACe;AAClB;AAcA,eAAsBG,EAAkBN,CAAAA,CAGrC;IACD,IAAM,EAAE,aAAAC,CAAAA,EAAa,SAAAG,CAAQ,EAAA,GAAIJ,GAE3BO,IAAe;QACnB,OAAOC,iPAAAA;QACP,WAAW;YACT,iBAAiBJ,GAAS;YAC1B,QAAQA,GAAS;YACjB,OAAOA,GAAS;YAChB,UAAUA,GAAS;QACrB;IACF;IAQA,OAAA,CANa,2PAAMK,EAAqC;QACtD,aAAAR;QACA,OAAOM;QACP,cAAc;IAChB,CAAC,CAAA,EAEW;AACd;AAeA,eAAsBG,EAAsBV,CAAAA,CAGD;IACzC,IAAM,EAAE,aAAAC,CAAAA,EAAa,SAAAG,CAAQ,EAAA,GAAIJ,GAE3BO,IAAe;QACnB,oPAAOI,IAAAA;QACP,WAAW;YACT,iBAAiBP,GAAS;YAC1B,QAAQA,GAAS;YACjB,OAAOA,GAAS;YAChB,UAAUA,GAAS;QACrB;IACF;IAQA,OAAA,CANa,2PAAMK,EAAyC;QAC1D,aAAAR;QACA,OAAOM;QACP,cAAc;IAChB,CAAC,CAAA,EAEW;AACd","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3281, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/utils/const.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Types of API endpoints used for routing requests in the Aptos network.\n * @group Implementation\n * @category Utils\n */\nexport enum AptosApiType {\n  FULLNODE = \"Fullnode\",\n  INDEXER = \"Indexer\",\n  FAUCET = \"Faucet\",\n  PEPPER = \"Pepper\",\n  PROVER = \"Prover\",\n}\n\n/**\n * The default max gas amount when none is given.\n *\n * This is the maximum number of gas units that will be used by a transaction before being rejected.\n *\n * Note that max gas amount varies based on the transaction.  A larger transaction will go over this\n * default gas amount, and the value will need to be changed for the specific transaction.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n\n/**\n * The default transaction expiration seconds from now.\n *\n * This time is how long until the blockchain nodes will reject the transaction.\n *\n * Note that the transaction expiration time varies based on network connection and network load.  It may need to be\n * increased for the transaction to be processed.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n\n/**\n * The default number of seconds to wait for a transaction to be processed.\n *\n * This time is the amount of time that the SDK will wait for a transaction to be processed when waiting for\n * the results of the transaction.  It may take longer based on network connection and network load.\n * @group Implementation\n * @category Utils\n */\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\n\n/**\n * The default gas currency for the network.\n * @group Implementation\n * @category Utils\n */\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const APTOS_FA = \"0x000000000000000000000000000000000000000000000000000000000000000a\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport const RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\n/**\n * Supported processor types for the indexer API, sourced from the processor_status table in the indexer database.\n * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://api.mainnet.aptoslabs.com/v1/graphql}\n * @group Implementation\n * @category Utils\n */\nexport enum ProcessorType {\n  ACCOUNT_TRANSACTION_PROCESSOR = \"account_transactions_processor\",\n  DEFAULT = \"default_processor\",\n  EVENTS_PROCESSOR = \"events_processor\",\n  // Fungible asset processor also handles coins\n  FUNGIBLE_ASSET_PROCESSOR = \"fungible_asset_processor\",\n  STAKE_PROCESSOR = \"stake_processor\",\n  // Token V2 processor replaces Token processor (not only for digital assets)\n  TOKEN_V2_PROCESSOR = \"token_v2_processor\",\n  USER_TRANSACTION_PROCESSOR = \"user_transaction_processor\",\n  OBJECT_PROCESSOR = \"objects_processor\",\n}\n\n/**\n * Regular expression pattern for Firebase Auth issuer URLs\n * Matches URLs in the format: https://securetoken.google.com/[project-id]\n * where project-id can contain letters, numbers, hyphens, and underscores\n */\nexport const FIREBASE_AUTH_ISS_PATTERN = /^https:\\/\\/securetoken\\.google\\.com\\/[a-zA-Z0-9-_]+$/;\n"],"names":["AptosApiType","DEFAULT_MAX_GAS_AMOUNT","DEFAULT_TXN_EXP_SEC_FROM_NOW","DEFAULT_TXN_TIMEOUT_SEC","APTOS_COIN","APTOS_FA","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","ProcessorType","FIREBASE_AUTH_ISS_PATTERN"],"mappings":";;;;;;;;;;;;AAQO,IAAKA,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,EAAA,QAAA,GAAW,YACXA,EAAA,OAAA,GAAU,WACVA,EAAA,MAAA,GAAS,UACTA,EAAA,MAAA,GAAS,UACTA,EAAA,MAAA,GAAS,UALCA,CAAAA,CAAAA,EAAAA,KAAA,CAAA,IAkBCC,IAAyB,KAYzBC,IAA+B,IAU/BC,IAA0B,IAO1BC,IAAa,8BAKbC,IAAW,sEAKXC,IAAuB,yBAKvBC,IAAiC,iCAQlCC,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,EAAA,6BAAA,GAAgC,kCAChCA,EAAA,OAAA,GAAU,qBACVA,EAAA,gBAAA,GAAmB,oBAEnBA,EAAA,wBAAA,GAA2B,4BAC3BA,EAAA,eAAA,GAAkB,mBAElBA,EAAA,kBAAA,GAAqB,sBACrBA,EAAA,0BAAA,GAA6B,8BAC7BA,EAAA,gBAAA,GAAmB,qBAVTA,CAAAA,CAAAA,EAAAA,KAAA,CAAA,IAkBCC,IAA4B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3302, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/transaction.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getAptosFullNode, paginateWithCursor } from \"../client\";\nimport { AptosApiError } from \"../errors\";\nimport {\n  TransactionResponseType,\n  type AnyNumber,\n  type GasEstimation,\n  type HexInput,\n  type PaginationArgs,\n  type TransactionResponse,\n  WaitForTransactionOptions,\n  CommittedTransactionResponse,\n  Block,\n} from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC, ProcessorType } from \"../utils/const\";\nimport { sleep } from \"../utils/helpers\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { getIndexerLastSuccessVersion, getProcessorStatus } from \"./general\";\n\n/**\n * Retrieve a list of transactions based on the specified options.\n *\n * @param {Object} args - The parameters for retrieving transactions.\n * @param {Object} args.aptosConfig - The configuration object for Aptos.\n * @param {Object} args.options - The options for pagination.\n * @param {number} args.options.offset - The number of transactions to skip before starting to collect the result set.\n * @param {number} args.options.limit - The maximum number of transactions to return.\n * @group Implementation\n */\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: \"transactions\",\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\n/**\n * Retrieves the estimated gas price for transactions on the Aptos network.\n * This function helps users understand the current gas price, which is essential for transaction planning and cost estimation.\n *\n * @param args - The configuration parameters for the Aptos network.\n * @param args.aptosConfig - The configuration object containing network details.\n * @group Implementation\n */\nexport async function getGasPriceEstimation(args: { aptosConfig: AptosConfig }) {\n  const { aptosConfig } = args;\n\n  return memoizeAsync(\n    async () => {\n      const { data } = await getAptosFullNode<{}, GasEstimation>({\n        aptosConfig,\n        originMethod: \"getGasPriceEstimation\",\n        path: \"estimate_gas_price\",\n      });\n      return data;\n    },\n    `gas-price-${aptosConfig.network}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\n/**\n * Retrieves the transaction details associated with a specific ledger version.\n *\n * @param args - The arguments for the transaction retrieval.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.ledgerVersion - The ledger version for which to retrieve the transaction.\n * @returns The transaction details for the specified ledger version.\n * @group Implementation\n */\nexport async function getTransactionByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, ledgerVersion } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    originMethod: \"getTransactionByVersion\",\n    path: `transactions/by_version/${ledgerVersion}`,\n  });\n  return data;\n}\n\n/**\n * Retrieves transaction details using the specified transaction hash.\n *\n * @param args - The arguments for retrieving the transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.transactionHash - The hash of the transaction to retrieve.\n * @returns A promise that resolves to the transaction details.\n * @group Implementation\n */\nexport async function getTransactionByHash(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, transactionHash } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    path: `transactions/by_hash/${transactionHash}`,\n    originMethod: \"getTransactionByHash\",\n  });\n  return data;\n}\n\n/**\n * Checks if a transaction is currently pending based on its hash.\n * This function helps determine the status of a transaction in the Aptos network.\n *\n * @param args - The arguments for checking the transaction status.\n * @param args.aptosConfig - The configuration settings for connecting to the Aptos network.\n * @param args.transactionHash - The hash of the transaction to check.\n * @returns A boolean indicating whether the transaction is pending.\n * @throws An error if the transaction cannot be retrieved due to reasons other than a 404 status.\n * @group Implementation\n */\nexport async function isTransactionPending(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<boolean> {\n  const { aptosConfig, transactionHash } = args;\n  try {\n    const transaction = await getTransactionByHash({ aptosConfig, transactionHash });\n    return transaction.type === TransactionResponseType.Pending;\n  } catch (e: any) {\n    if (e?.status === 404) {\n      return true;\n    }\n    throw e;\n  }\n}\n\n/**\n * Waits for a transaction to be confirmed by its hash.\n * This function allows you to monitor the status of a transaction until it is finalized.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.transactionHash - The hash of the transaction to wait for.\n * @group Implementation\n */\nexport async function longWaitForTransaction(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, transactionHash } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    path: `transactions/wait_by_hash/${transactionHash}`,\n    originMethod: \"longWaitForTransaction\",\n  });\n  return data;\n}\n\n/**\n * Waits for a transaction to be confirmed on the blockchain and handles potential errors during the process.\n * This function allows you to monitor the status of a transaction until it is either confirmed or fails.\n *\n * @param args - The arguments for waiting for a transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.transactionHash - The hash of the transaction to wait for.\n * @param args.options - Optional settings for waiting, including timeout and success check.\n * @param args.options.timeoutSecs - The maximum time to wait for the transaction in seconds. Defaults to a predefined value.\n * @param args.options.checkSuccess - A flag indicating whether to check the success status of the transaction. Defaults to true.\n * @returns A promise that resolves to the transaction response once the transaction is confirmed.\n * @throws WaitForTransactionError if the transaction times out or remains pending.\n * @throws FailedTransactionError if the transaction fails.\n * @group Implementation\n */\nexport async function waitForTransaction(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n  options?: WaitForTransactionOptions;\n}): Promise<CommittedTransactionResponse> {\n  const { aptosConfig, transactionHash, options } = args;\n  const timeoutSecs = options?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n  const checkSuccess = options?.checkSuccess ?? true;\n\n  let isPending = true;\n  let timeElapsed = 0;\n  let lastTxn: TransactionResponse | undefined;\n  let lastError: AptosApiError | undefined;\n  let backoffIntervalMs = 200;\n  const backoffMultiplier = 1.5;\n\n  /**\n   * Handles API errors by throwing the last error or a timeout error for a failed transaction.\n   *\n   * @param e - The error object that occurred during the API call.\n   * @throws {Error} Throws the last error if it exists; otherwise, throws a WaitForTransactionError indicating a timeout.\n   * @group Implementation\n   */\n  function handleAPIError(e: any) {\n    // In short, this means we will retry if it was an AptosApiError and the code was 404 or 5xx.\n    const isAptosApiError = e instanceof AptosApiError;\n    if (!isAptosApiError) {\n      throw e; // This would be unexpected\n    }\n    lastError = e;\n    const isRequestError = e.status !== 404 && e.status >= 400 && e.status < 500;\n    if (isRequestError) {\n      throw e;\n    }\n  }\n\n  // check to see if the txn is already on the blockchain\n  try {\n    lastTxn = await getTransactionByHash({ aptosConfig, transactionHash });\n    isPending = lastTxn.type === TransactionResponseType.Pending;\n  } catch (e) {\n    handleAPIError(e);\n  }\n\n  // If the transaction is pending, we do a long wait once to avoid polling\n  if (isPending) {\n    const startTime = Date.now();\n    try {\n      lastTxn = await longWaitForTransaction({ aptosConfig, transactionHash });\n      isPending = lastTxn.type === TransactionResponseType.Pending;\n    } catch (e) {\n      handleAPIError(e);\n    }\n    timeElapsed = (Date.now() - startTime) / 1000;\n  }\n\n  // Now we do polling to see if the transaction is still pending\n  while (isPending) {\n    if (timeElapsed >= timeoutSecs) {\n      break;\n    }\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      lastTxn = await getTransactionByHash({ aptosConfig, transactionHash });\n\n      isPending = lastTxn.type === TransactionResponseType.Pending;\n\n      if (!isPending) {\n        break;\n      }\n    } catch (e) {\n      handleAPIError(e);\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(backoffIntervalMs);\n    timeElapsed += backoffIntervalMs / 1000; // Convert to seconds\n    backoffIntervalMs *= backoffMultiplier;\n  }\n\n  // There is a chance that lastTxn is still undefined. Let's throw the last error otherwise a WaitForTransactionError\n  if (lastTxn === undefined) {\n    if (lastError) {\n      throw lastError;\n    } else {\n      throw new WaitForTransactionError(\n        `Fetching transaction ${transactionHash} failed and timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n  }\n\n  if (lastTxn.type === TransactionResponseType.Pending) {\n    throw new WaitForTransactionError(\n      `Transaction ${transactionHash} timed out in pending state after ${timeoutSecs} seconds`,\n      lastTxn,\n    );\n  }\n  if (!checkSuccess) {\n    return lastTxn;\n  }\n  if (!lastTxn.success) {\n    throw new FailedTransactionError(\n      `Transaction ${transactionHash} failed with an error: ${lastTxn.vm_status}`,\n      lastTxn,\n    );\n  }\n\n  return lastTxn;\n}\n\n/**\n * Waits for the indexer to sync up to the specified ledger version. The timeout is 3 seconds.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.minimumLedgerVersion - The minimum ledger version that the indexer should sync to.\n * @param args.processorType - (Optional) The type of processor to check the last success version from.\n * @group Implementation\n */\nexport async function waitForIndexer(args: {\n  aptosConfig: AptosConfig;\n  minimumLedgerVersion: AnyNumber;\n  processorType?: ProcessorType;\n}): Promise<void> {\n  const { aptosConfig, processorType } = args;\n  const minimumLedgerVersion = BigInt(args.minimumLedgerVersion);\n  const timeoutMilliseconds = 3000; // 3 seconds\n  const startTime = new Date().getTime();\n  let indexerVersion = BigInt(-1);\n\n  while (indexerVersion < minimumLedgerVersion) {\n    // check for timeout\n    if (new Date().getTime() - startTime > timeoutMilliseconds) {\n      throw new Error(\"waitForLastSuccessIndexerVersionSync timeout\");\n    }\n\n    if (processorType === undefined) {\n      // Get the last success version from all processor\n      // eslint-disable-next-line no-await-in-loop\n      indexerVersion = await getIndexerLastSuccessVersion({ aptosConfig });\n    } else {\n      // Get the last success version from the specific processor\n      // eslint-disable-next-line no-await-in-loop\n      const processor = await getProcessorStatus({ aptosConfig, processorType });\n      indexerVersion = processor.last_success_version;\n    }\n\n    if (indexerVersion >= minimumLedgerVersion) {\n      // break out immediately if we are synced\n      break;\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(200);\n  }\n}\n\n/**\n * Represents an error that occurs when waiting for a transaction to complete.\n * This error is thrown by the `waitForTransaction` function when a transaction\n * times out or when the transaction response is undefined.\n *\n * @param message - A descriptive message for the error.\n * @param lastSubmittedTransaction - The last submitted transaction response, if available.\n * @group Implementation\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: TransactionResponse | undefined;\n\n  /**\n   * Constructs an instance of the class with a specified message and transaction response.\n   *\n   * @param message - The message associated with the transaction.\n   * @param lastSubmittedTransaction - The transaction response object containing details about the transaction.\n   * @group Implementation\n   */\n  constructor(message: string, lastSubmittedTransaction: TransactionResponse | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * Represents an error that occurs when a transaction fails.\n * This error is thrown by the `waitForTransaction` function when the `checkSuccess` parameter is set to true.\n *\n * @param message - A description of the error.\n * @param transaction - The transaction response associated with the failure.\n * @group Implementation\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: TransactionResponse;\n\n  constructor(message: string, transaction: TransactionResponse) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Retrieves a block from the Aptos blockchain by its ledger version.\n * This function allows you to obtain detailed information about a specific block, including its transactions if requested.\n *\n * @param args - The arguments for retrieving the block.\n * @param args.aptosConfig - The configuration object for connecting to the Aptos node.\n * @param args.ledgerVersion - The ledger version of the block to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.withTransactions - Indicates whether to include transactions in the block data.\n * @group Implementation\n */\nexport async function getBlockByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, ledgerVersion, options } = args;\n  const { data: block } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByVersion\",\n    path: `blocks/by_version/${ledgerVersion}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n\n  return fillBlockTransactions({ block, ...args });\n}\n\n/**\n * Retrieves a block from the Aptos blockchain by its height.\n *\n * @param args - The parameters for retrieving the block.\n * @param args.aptosConfig - The configuration object for connecting to the Aptos network.\n * @param args.blockHeight - The height of the block to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.withTransactions - Indicates whether to include transactions in the block data.\n * @returns A promise that resolves to the block data, potentially including its transactions.\n * @group Implementation\n */\nexport async function getBlockByHeight(args: {\n  aptosConfig: AptosConfig;\n  blockHeight: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, blockHeight, options } = args;\n  const { data: block } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByHeight\",\n    path: `blocks/by_height/${blockHeight}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n  return fillBlockTransactions({ block, ...args });\n}\n\n/**\n * Fills in the block with transactions if not enough were returned. This function ensures that the block contains all relevant\n * transactions by fetching any missing ones based on the specified options.\n * @param args - The arguments for filling the block transactions.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.block - The block object that will be filled with transactions.\n * @param args.options - Optional settings for fetching transactions.\n * @param args.options.withTransactions - Indicates whether to include transactions in the block.\n * @group Implementation\n */\nasync function fillBlockTransactions(args: {\n  aptosConfig: AptosConfig;\n  block: Block;\n  options?: { withTransactions?: boolean };\n}) {\n  const { aptosConfig, block, options } = args;\n  if (options?.withTransactions) {\n    // Transactions should be filled, but this ensures it\n    block.transactions = block.transactions ?? [];\n\n    const lastTxn = block.transactions[block.transactions.length - 1];\n    const firstVersion = BigInt(block.first_version);\n    const lastVersion = BigInt(block.last_version);\n\n    // Convert the transaction to the type\n    const curVersion: string | undefined = (lastTxn as any)?.version;\n    let latestVersion;\n\n    // This time, if we don't have any transactions, we will try once with the start of the block\n    if (curVersion === undefined) {\n      latestVersion = firstVersion - 1n;\n    } else {\n      latestVersion = BigInt(curVersion);\n    }\n\n    // If we have all the transactions in the block, we can skip out, otherwise we need to fill the transactions\n    if (latestVersion === lastVersion) {\n      return block;\n    }\n\n    // For now, we will grab all the transactions in groups of 100, but we can make this more efficient by trying larger\n    // amounts\n    const fetchFutures = [];\n    const pageSize = 100n;\n    for (let i = latestVersion + 1n; i < lastVersion; i += BigInt(100)) {\n      fetchFutures.push(\n        getTransactions({\n          aptosConfig,\n          options: {\n            offset: i,\n            limit: Math.min(Number(pageSize), Number(lastVersion - i + 1n)),\n          },\n        }),\n      );\n    }\n\n    // Combine all the futures\n    const responses = await Promise.all(fetchFutures);\n    for (const txns of responses) {\n      block.transactions.push(...txns);\n    }\n  }\n\n  return block;\n}\n"],"names":["getTransactions","args","aptosConfig","options","paginateWithCursor","getGasPriceEstimation","memoizeAsync","data","getAptosFullNode","getTransactionByVersion","ledgerVersion","getTransactionByHash","transactionHash","isTransactionPending","e","longWaitForTransaction","waitForTransaction","timeoutSecs","checkSuccess","isPending","timeElapsed","lastTxn","lastError","backoffIntervalMs","backoffMultiplier","handleAPIError","AptosApiError","startTime","sleep","WaitForTransactionError","FailedTransactionError","waitForIndexer","processorType","minimumLedgerVersion","timeoutMilliseconds","indexerVersion","getIndexerLastSuccessVersion","getProcessorStatus","message","lastSubmittedTransaction","transaction","getBlockByVersion","block","fillBlockTransactions","getBlockByHeight","blockHeight","firstVersion","lastVersion","curVersion","latestVersion","fetchFutures","pageSize","i","responses","txns"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,eAAsBA,EAAgBC,CAAAA,CAGH;IACjC,IAAM,EAAE,aAAAC,CAAAA,EAAa,SAAAC,CAAQ,EAAA,GAAIF;IACjC,4PAAOG,EAA8C;QACnD,aAAAF;QACA,cAAc;QACd,MAAM;QACN,QAAQ;YAAE,OAAOC,GAAS;YAAQ,OAAOA,GAAS;QAAM;IAC1D,CAAC;AACH;AAUA,eAAsBE,EAAsBJ,CAAAA,CAAoC;IAC9E,IAAM,EAAE,aAAAC,CAAY,EAAA,GAAID;IAExB,4PAAOK,EACL,SAAY;QACV,IAAM,EAAE,MAAAC,CAAK,EAAA,GAAI,uPAAMC,IAAAA,EAAoC;YACzD,aAAAN;YACA,cAAc;YACd,MAAM;QACR,CAAC;QACD,OAAOK;IACT,GACA,CAAA,UAAA,EAAaL,EAAY,OAAO,EAAA,EAChC,MAAO,KAAK,CACd,EAAE;AACJ;AAWA,eAAsBO,EAAwBR,CAAAA,CAGb;IAC/B,IAAM,EAAE,aAAAC,CAAAA,EAAa,eAAAQ,CAAc,EAAA,GAAIT,GACjC,EAAE,MAAAM,CAAK,EAAA,GAAI,2PAAMC,EAA0C;QAC/D,aAAAN;QACA,cAAc;QACd,MAAM,CAAA,wBAAA,EAA2BQ,CAAa;IAChD,CAAC;IACD,OAAOH;AACT;AAWA,eAAsBI,EAAqBV,CAAAA,CAGV;IAC/B,IAAM,EAAE,aAAAC,CAAAA,EAAa,iBAAAU,CAAgB,EAAA,GAAIX,GACnC,EAAE,MAAAM,CAAK,EAAA,GAAI,MAAMC,qPAAAA,EAA0C;QAC/D,aAAAN;QACA,MAAM,CAAA,qBAAA,EAAwBU,CAAe,EAAA;QAC7C,cAAc;IAChB,CAAC;IACD,OAAOL;AACT;AAaA,eAAsBM,EAAqBZ,CAAAA,CAGtB;IACnB,IAAM,EAAE,aAAAC,CAAAA,EAAa,iBAAAU,CAAgB,EAAA,GAAIX;IACzC,IAAI;QAEF,OAAA,CADoB,MAAMU,EAAqB;YAAE,aAAAT;YAAa,iBAAAU;QAAgB,CAAC,CAAA,EAC5D,IAAA,KAAS;IAC9B,EAAA,OAASE,GAAQ;QACf,IAAIA,GAAG,WAAW,KAChB,OAAO,CAAA;QAET,MAAMA;IACR;AACF;AAWA,eAAsBC,EAAuBd,CAAAA,CAGZ;IAC/B,IAAM,EAAE,aAAAC,CAAAA,EAAa,iBAAAU,CAAgB,EAAA,GAAIX,GACnC,EAAE,MAAAM,CAAK,EAAA,GAAI,2PAAMC,EAA0C;QAC/D,aAAAN;QACA,MAAM,CAAA,0BAAA,EAA6BU,CAAe,EAAA;QAClD,cAAc;IAChB,CAAC;IACD,OAAOL;AACT;AAiBA,eAAsBS,EAAmBf,CAAAA,CAIC;IACxC,IAAM,EAAE,aAAAC,CAAAA,EAAa,iBAAAU,CAAAA,EAAiB,SAAAT,CAAQ,EAAA,GAAIF,GAC5CgB,IAAcd,GAAS,eAAe,IACtCe,IAAef,GAAS,gBAAgB,CAAA,GAE1CgB,IAAY,CAAA,GACZC,IAAc,GACdC,GACAC,GACAC,IAAoB,KAClBC,IAAoB;IAS1B,SAASC,EAAeX,CAAAA,CAAQ;QAQ9B,IALI,CAAA,CADoBA,aAAaY,iPAAAA,KAAAA,CAIrCJ,IAAYR,GACWA,EAAE,MAAA,KAAW,OAAOA,EAAE,MAAA,IAAU,OAAOA,EAAE,MAAA,GAAS,GAAA,GAEvE,MAAMA;IAEV;IAGA,IAAI;QACFO,IAAU,MAAMV,EAAqB;YAAE,aAAAT;YAAa,iBAAAU;QAAgB,CAAC,GACrEO,IAAYE,EAAQ,IAAA,KAAS;IAC/B,EAAA,OAASP,GAAG;QACVW,EAAeX,CAAC;IAClB;IAGA,IAAIK,GAAW;QACb,IAAMQ,IAAY,KAAK,GAAA,CAAI;QAC3B,IAAI;YACFN,IAAU,MAAMN,EAAuB;gBAAE,aAAAb;gBAAa,iBAAAU;YAAgB,CAAC,GACvEO,IAAYE,EAAQ,IAAA,KAAS;QAC/B,EAAA,OAASP,GAAG;YACVW,EAAeX,CAAC;QAClB;QACAM,IAAAA,CAAe,KAAK,GAAA,CAAI,IAAIO,CAAAA,IAAa;IAC3C;IAGA,MAAOR,KACD,CAAA,CAAAC,KAAeH,CAAAA,GADH;QAIhB,IAAI;YAMF,IAJAI,IAAU,MAAMV,EAAqB;gBAAE,aAAAT;gBAAa,iBAAAU;YAAgB,CAAC,GAErEO,IAAYE,EAAQ,IAAA,KAAS,uBAEzB,CAACF,GACH;QAEJ,EAAA,OAASL,GAAG;YACVW,EAAeX,CAAC;QAClB;QAEA,MAAMc,qPAAAA,EAAML,CAAiB,GAC7BH,KAAeG,IAAoB,KACnCA,KAAqBC;IACvB;IAGA,IAAIH,MAAY,KAAA,GACd,MAAIC,KAGI,IAAIO,EACR,CAAA,qBAAA,EAAwBjB,CAAe,CAAA,4BAAA,EAA+BK,CAAW,CAAA,QAAA,CAAA,EACjFI,CACF;IAIJ,IAAIA,EAAQ,IAAA,KAAS,uBACnB,MAAM,IAAIQ,EACR,CAAA,YAAA,EAAejB,CAAe,CAAA,kCAAA,EAAqCK,CAAW,CAAA,QAAA,CAAA,EAC9EI,CACF;IAEF,IAAI,CAACH,GACH,OAAOG;IAET,IAAI,CAACA,EAAQ,OAAA,EACX,MAAM,IAAIS,EACR,CAAA,YAAA,EAAelB,CAAe,CAAA,uBAAA,EAA0BS,EAAQ,SAAS,EAAA,EACzEA,CACF;IAGF,OAAOA;AACT;AAWA,eAAsBU,EAAe9B,CAAAA,CAInB;IAChB,IAAM,EAAE,aAAAC,CAAAA,EAAa,eAAA8B,CAAc,EAAA,GAAI/B,GACjCgC,IAAuB,OAAOhC,EAAK,oBAAoB,GACvDiC,IAAsB,KACtBP,IAAY,IAAI,KAAK,EAAE,OAAA,CAAQ,GACjCQ,IAAiB,OAAO,CAAA,CAAE;IAE9B,MAAOA,IAAiBF,GAAsB;QAE5C,IAAI,IAAI,KAAK,EAAE,OAAA,CAAQ,IAAIN,IAAYO,GACrC,MAAM,IAAI,MAAM,8CAA8C;QAchE,IAXIF,MAAkB,KAAA,IAGpBG,IAAiB,2PAAMC,EAA6B;YAAE,aAAAlC;QAAY,CAAC,IAKnEiC,IAAAA,CADkB,2PAAME,EAAmB;YAAE,aAAAnC;YAAa,eAAA8B;QAAc,CAAC,CAAA,EAC9C,oBAAA,EAGzBG,KAAkBF,GAEpB;QAIF,MAAML,qPAAAA,EAAM,GAAG;IACjB;AACF;AAWO,IAAMC,IAAN,cAAsC,KAAM;IAUjD,YAAYS,CAAAA,EAAiBC,CAAAA,CAA2D;QACtF,KAAA,CAAMD,CAAO,GACb,IAAA,CAAK,wBAAA,GAA2BC;IAClC;AACF,GAUaT,IAAN,cAAqC,KAAM;IAGhD,YAAYQ,CAAAA,EAAiBE,CAAAA,CAAkC;QAC7D,KAAA,CAAMF,CAAO,GACb,IAAA,CAAK,WAAA,GAAcE;IACrB;AACF;AAaA,eAAsBC,EAAkBxC,CAAAA,CAIrB;IACjB,IAAM,EAAE,aAAAC,CAAAA,EAAa,eAAAQ,CAAAA,EAAe,SAAAP,CAAQ,EAAA,GAAIF,GAC1C,EAAE,MAAMyC,CAAM,EAAA,GAAI,2PAAMlC,EAA4B;QACxD,aAAAN;QACA,cAAc;QACd,MAAM,CAAA,kBAAA,EAAqBQ,CAAa,EAAA;QACxC,QAAQ;YAAE,mBAAmBP,GAAS;QAAiB;IACzD,CAAC;IAED,OAAOwC,EAAsB;QAAE,OAAAD;QAAO,GAAGzC;IAAK,CAAC;AACjD;AAaA,eAAsB2C,EAAiB3C,CAAAA,CAIpB;IACjB,IAAM,EAAE,aAAAC,CAAAA,EAAa,aAAA2C,CAAAA,EAAa,SAAA1C,CAAQ,EAAA,GAAIF,GACxC,EAAE,MAAMyC,CAAM,EAAA,GAAI,2PAAMlC,EAA4B;QACxD,aAAAN;QACA,cAAc;QACd,MAAM,CAAA,iBAAA,EAAoB2C,CAAW,EAAA;QACrC,QAAQ;YAAE,mBAAmB1C,GAAS;QAAiB;IACzD,CAAC;IACD,OAAOwC,EAAsB;QAAE,OAAAD;QAAO,GAAGzC;IAAK,CAAC;AACjD;AAYA,eAAe0C,EAAsB1C,CAAAA,CAIlC;IACD,IAAM,EAAE,aAAAC,CAAAA,EAAa,OAAAwC,CAAAA,EAAO,SAAAvC,CAAQ,EAAA,GAAIF;IACxC,IAAIE,GAAS,kBAAkB;QAE7BuC,EAAM,YAAA,GAAeA,EAAM,YAAA,IAAgB,CAAC,CAAA;QAE5C,IAAMrB,IAAUqB,EAAM,YAAA,CAAaA,EAAM,YAAA,CAAa,MAAA,GAAS,CAAC,CAAA,EAC1DI,IAAe,OAAOJ,EAAM,aAAa,GACzCK,IAAc,OAAOL,EAAM,YAAY,GAGvCM,IAAkC3B,GAAiB,SACrD4B;QAUJ,IAPID,MAAe,KAAA,IACjBC,IAAgBH,IAAe,EAAA,GAE/BG,IAAgB,OAAOD,CAAU,GAI/BC,MAAkBF,GACpB,OAAOL;QAKT,IAAMQ,IAAe,CAAC,CAAA,EAChBC,IAAW,IAAA;QACjB,IAAA,IAASC,IAAIH,IAAgB,EAAA,EAAIG,IAAIL,GAAaK,KAAK,OAAO,GAAG,EAC/DF,EAAa,IAAA,CACXlD,EAAgB;YACd,aAAAE;YACA,SAAS;gBACP,QAAQkD;gBACR,OAAO,KAAK,GAAA,CAAI,OAAOD,CAAQ,GAAG,OAAOJ,IAAcK,IAAI,EAAE,CAAC;YAChE;QACF,CAAC,CACH;QAIF,IAAMC,IAAY,MAAM,QAAQ,GAAA,CAAIH,CAAY;QAChD,KAAA,IAAWI,KAAQD,EACjBX,EAAM,YAAA,CAAa,IAAA,CAAK,GAAGY,CAAI;IAEnC;IAEA,OAAOZ;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3506, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/utils.ts"],"sourcesContent":["import { waitForIndexer } from \"../internal/transaction\";\nimport { ProcessorType } from \"../utils\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { AnyNumber } from \"../types\";\n\n/**\n * Waits for the indexer to reach a specified ledger version, allowing for synchronization with the blockchain.\n * This function is useful for ensuring that your application is working with the most up-to-date data before proceeding.\n *\n * @param args - The parameters for waiting on the indexer.\n * @param args.config - The configuration object for Aptos.\n * @param [args.minimumLedgerVersion] - The minimum ledger version to wait for. If not specified, the function will not wait.\n * @param args.processorType - The type of processor to wait for.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network, ProcessorType } from \"@aptos-labs/ts-sdk\";\n *\n * const config = new AptosConfig({ network: Network.TESTNET });\n * const aptos = new Aptos(config);\n *\n * async function runExample() {\n *   // Wait for the indexer to reach a specific ledger version\n *   await aptos.waitForIndexerOnVersion({\n *     config: config,\n *     minimumLedgerVersion: 1000n, // replace with a real ledger version\n *     processorType: ProcessorType.DEFAULT,\n *   });\n *\n *   console.log(\"Indexer is synced to the specified ledger version.\");\n * }\n * runExample().catch(console.error);\n * ```\n * @group Implementation\n */\nexport async function waitForIndexerOnVersion(args: {\n  config: AptosConfig;\n  minimumLedgerVersion?: AnyNumber;\n  processorType: ProcessorType;\n}) {\n  if (args.minimumLedgerVersion !== undefined) {\n    await waitForIndexer({\n      aptosConfig: args.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: args.processorType,\n    });\n  }\n}\n"],"names":["waitForIndexerOnVersion","args","waitForIndexer"],"mappings":";;;;;AAmCA,eAAsBA,EAAwBC,CAAAA,CAI3C;IACGA,EAAK,oBAAA,KAAyB,KAAA,KAChC,2PAAMC,EAAe;QACnB,aAAaD,EAAK,MAAA;QAClB,sBAAsBA,EAAK,oBAAA;QAC3B,eAAeA,EAAK;IACtB,CAAC;AAEL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3526, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/table.ts"],"sourcesContent":["import { getTableItem, getTableItemsData, getTableItemsMetadata } from \"../internal/table\";\nimport {\n  TableItemRequest,\n  LedgerVersionArg,\n  AnyNumber,\n  PaginationArgs,\n  WhereArg,\n  OrderByArg,\n  GetTableItemsDataResponse,\n  GetTableItemsMetadataResponse,\n} from \"../types\";\nimport { TableItemsBoolExp, TableMetadatasBoolExp } from \"../types/generated/types\";\nimport { ProcessorType } from \"../utils\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Table` Aptos related queries.\n * @group Table\n */\nexport class Table {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Table\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries for a specific item in a table identified by the handle and the key for the item.\n   * This function allows you to retrieve structured data from a table in the Aptos blockchain.\n   *\n   * @param args.handle A pointer to where that table is stored.\n   * @param args.data Object that describes the table item, including key and value types.\n   * @param args.data.key_type The Move type of the table key.\n   * @param args.data.value_type The Move type of the table value.\n   * @param args.data.key The value of the table key.\n   * @param args.options.ledgerVersion The ledger version to query; if not provided, it will get the latest version.\n   *\n   * @returns Table item value rendered in JSON.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve a table item from the Aptos blockchain\n   *   const tableItem = await aptos.getTableItem({\n   *     handle: \"0x1b854694ae746cdbd8d44186ca4929b2b337df21d1c74633be19b2710552fdca\",\n   *     data: {\n   *       key_type: \"address\", // Move type of table key\n   *       value_type: \"u128\", // Move type of table value\n   *       key: \"0x619dc29a0aac8fa146714058e8dd6d2d0f3bdf5f6331907bf91f3acd81e6935\" // Value of table key\n   *     },\n   *   });\n   *\n   *   console.log(tableItem);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Table\n   */\n  async getTableItem<T>(args: { handle: string; data: TableItemRequest; options?: LedgerVersionArg }): Promise<T> {\n    return getTableItem<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for table items data with optional filtering and pagination.\n   * This function allows you to retrieve specific data from a table based on provided criteria.\n   *\n   * @param args - The arguments for querying table items data.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to wait for before querying.\n   * @param args.options - Optional parameters for pagination and filtering.\n   * @param args.options.where - Conditions to filter the response.\n   * @param args.options.offset - The number of items to skip before starting to collect the result set.\n   * @param args.options.limit - The maximum number of items to return.\n   * @param args.options.orderBy - The criteria to order the results.\n   *\n   * Note: This query calls the indexer server.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve table items data with specific filtering options\n   *   const data = await aptos.getTableItemsData({\n   *     minimumLedgerVersion: 1, // specify your own minimum ledger version if needed\n   *     options: {\n   *       where: {\n   *         table_handle: { _eq: \"0x1b854694ae746cdbd8d44186ca4929b2b337df21d1c74633be19b2710552fdca\" },\n   *         transaction_version: { _eq: \"0\" }\n   *       },\n   *       limit: 10, // specify your own limit if needed\n   *     },\n   *   });\n   *\n   *   console.log(data);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   *\n   * @returns GetTableItemsDataResponse\n   * @group Table\n   */\n  async getTableItemsData(args: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<TableItemsBoolExp> & OrderByArg<GetTableItemsDataResponse[0]>;\n  }): Promise<GetTableItemsDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.DEFAULT,\n    });\n    return getTableItemsData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for the metadata of table items, allowing for filtering and pagination.\n   *\n   * @param args - The parameters for the query.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to wait for before querying.\n   * @param args.options - Optional parameters for pagination and filtering.\n   * @param args.options.where - Conditions to filter the response.\n   * @param args.options.offset - The offset for pagination.\n   * @param args.options.limit - The maximum number of items to return.\n   * @param args.options.orderBy - The order in which to return the items.\n   *\n   * Note that this query calls the indexer server.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching table items metadata with a filter condition\n   *   const data = await aptos.getTableItemsMetadata({\n   *     minimumLedgerVersion: 1, // specify your own minimum ledger version if needed\n   *     options: {\n   *       where: { handle: { _eq: \"0x1b854694ae746cdbd8d44186ca4929b2b337df21d1c74633be19b2710552fdca\" } },\n   *       limit: 10, // specify your own limit if needed\n   *     },\n   *   });\n   *\n   *   console.log(data);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   *\n   * @returns GetTableItemsMetadataResponse\n   * @group Table\n   */\n  async getTableItemsMetadata(args: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<TableMetadatasBoolExp> & OrderByArg<GetTableItemsMetadataResponse[0]>;\n  }): Promise<GetTableItemsMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.DEFAULT,\n    });\n    return getTableItemsMetadata({ aptosConfig: this.config, ...args });\n  }\n}\n"],"names":["Table","config","args","getTableItem","waitForIndexerOnVersion","getTableItemsData","getTableItemsMetadata"],"mappings":";;;;;;;AAoBO,IAAMA,IAAN,KAAY;IAwBjB,YAAYC,CAAAA,CAAqB;QAC/B,IAAA,CAAK,MAAA,GAASA;IAChB;IAuCA,MAAM,aAAgBC,CAAAA,EAA0F;QAC9G,4PAAOC,EAAgB;YAAE,aAAa,IAAA,CAAK,MAAA;YAAQ,GAAGD,CAAK,CAAC;;IAC9D;IA4CA,MAAM,kBAAkBA,CAAAA,EAGe;QACrC,OAAA,2PAAME,EAAwB;YAC5B,QAAQ,IAAA,CAAK,MAAA;YACb,sBAAsBF,EAAK,oBAAA;YAC3B,eAAA;QACF,CAAC,IACMG,oPAAAA,EAAkB;YAAE,aAAa,IAAA,CAAK,MAAA;YAAQ,GAAGH;QAAK,CAAC;IAChE;IAwCA,MAAM,sBAAsBA,CAAAA,EAGe;QACzC,OAAA,2PAAME,EAAwB;YAC5B,QAAQ,IAAA,CAAK,MAAA;YACb,sBAAsBF,EAAK,oBAAA;YAC3B,eAAA;QACF,CAAC,wPACMI,EAAsB;YAAE,aAAa,IAAA,CAAK,MAAA;YAAQ,GAAGJ;QAAK,CAAC;IACpE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3572, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/utils/normalizeBundle.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializable } from \"../bcs\";\n/**\n * @group Implementation\n * @category Utils\n */\nexport type DeserializableClass<T extends Serializable> = {\n  /**\n   * Deserializes a serialized object using the provided deserializer.\n   * This function allows you to reconstruct an object from its serialized form.\n   *\n   * @param deserializer - An instance of the Deserializer used to read the serialized data.\n   * @group Implementation\n   * @category Utils\n   */\n  deserialize(deserializer: Deserializer): T;\n};\n\n/**\n * Normalizes an instance of a class by deserializing it from its byte representation.\n * This function allows the `instanceof` operator to work correctly when the input objects originate from a different bundle.\n *\n * @param cls - The class of the object to normalize.\n * @param value - The instance to normalize.\n * @group Implementation\n * @category Utils\n */\nexport function normalizeBundle<T extends Serializable>(cls: DeserializableClass<T>, value: T) {\n  const serializedBytes = value.bcsToBytes();\n  const deserializer = new Deserializer(serializedBytes);\n  return cls.deserialize(deserializer);\n}\n"],"names":["normalizeBundle","cls","value","serializedBytes","deserializer","Deserializer"],"mappings":";;;;;AA6BO,SAASA,EAAwCC,CAAAA,EAA6BC,CAAAA,CAAU;IAC7F,IAAMC,IAAkBD,EAAM,UAAA,CAAW,GACnCE,IAAe,iPAAIC,IAAAA,CAAaF,CAAe;IACrD,OAAOF,EAAI,WAAA,CAAYG,CAAY;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3589, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/serializable/fixedBytes.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { HexInput } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n * Represents a contiguous sequence of already serialized BCS bytes.\n * \n * This class differs from most other Serializable classes in that its internal byte buffer is serialized to BCS\n * bytes exactly as-is, without prepending the length of the bytes. It is ideal for scenarios where custom serialization\n * is required, such as passing serialized bytes as transaction arguments. Additionally, it serves as a representation \n * of type-agnostic BCS bytes, akin to a vector<u8>.\n * \n * An example use case includes handling bytes resulting from entry function arguments that have been serialized \n * for an entry function.\n * \n * @example\n * const yourCustomSerializedBytes = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\n * const fixedBytes = new FixedBytes(yourCustomSerializedBytes);\n * const payload = await generateTransactionPayload({\n *   function: \"0xbeefcafe::your_module::your_function_that_requires_custom_serialization\",\n *   functionArguments: [yourCustomBytes],\n * });\n * \n * This class is particularly useful when you want to handle a fixed-size byte array without the overhead of \n * length prepending, such as when dealing with 32-byte addresses stored as U8 in a MoveVector<U8>.\n\n *  For example, if you store each of the 32 bytes for an address as a U8 in a MoveVector<U8>, when you\n *  serialize that MoveVector<U8>, it will be serialized to 33 bytes. If you solely want to pass around\n *  the 32 bytes as a Serializable class that *does not* prepend the length to the BCS-serialized representation,\n *  use this class.* \n * @param value - HexInput representing a sequence of Uint8 bytes.\n * @returns A Serializable FixedBytes instance, which when serialized, does not prepend the length of the bytes.\n * @see EntryFunctionBytes\n * @group Implementation\n * @category BCS\n */\nexport class FixedBytes extends Serializable implements TransactionArgument {\n  public value: Uint8Array;\n\n  /**\n   * Creates an instance of the class with a specified hexadecimal input.\n   * The value is converted from hexadecimal format to a Uint8Array.\n   *\n   * @param value - The hexadecimal input to be converted.\n   * @group Implementation\n   * @category BCS\n   */\n  constructor(value: HexInput) {\n    super();\n    this.value = Hex.fromHexInput(value).toUint8Array();\n  }\n\n  /**\n   * Serializes the fixed bytes value using the provided serializer.\n   * This function is essential for converting the fixed bytes into a format suitable for storage or transmission.\n   *\n   * @param serializer - The serializer instance used for serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.value);\n  }\n\n  /**\n   * Serializes the current instance for an entry function using the provided serializer.\n   * This allows the instance to be converted into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  /**\n   * Serializes the current instance using the provided serializer.\n   * This function is essential for preparing data to be passed as arguments in script functions.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  /**\n   * Deserializes a fixed-length byte array from the provided deserializer.\n   * This function helps in reconstructing a FixedBytes object from the serialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the byte data.\n   * @param length - The length of the byte array to be deserialized.\n   * @group Implementation\n   * @category BCS\n   */\n  static deserialize(deserializer: Deserializer, length: number): FixedBytes {\n    const bytes = deserializer.deserializeFixedBytes(length);\n    return new FixedBytes(bytes);\n  }\n}\n"],"names":["FixedBytes","_FixedBytes","Serializable","value","Hex","serializer","deserializer","length","bytes"],"mappings":";;;;;;;AAyCO,IAAMA,IAAN,MAAMC,uPAAmBC,IAA4C;IAW1E,YAAYC,CAAAA,CAAiB;QAC3B,KAAA,CAAM,GACN,IAAA,CAAK,KAAA,gPAAQC,IAAAA,CAAI,YAAA,CAAaD,CAAK,EAAE,YAAA,CAAa;IACpD;IAUA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,mBAAA,CAAoB,IAAA,CAAK,KAAK;IAC3C;IAUA,0BAA0BA,CAAAA,EAA8B;QACtDA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAUA,2BAA2BA,CAAAA,EAA8B;QACvDA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAWA,OAAO,YAAYC,CAAAA,EAA4BC,CAAAA,EAA4B;QACzE,IAAMC,IAAQF,EAAa,qBAAA,CAAsBC,CAAM;QACvD,OAAO,IAAIN,EAAWO,CAAK;IAC7B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3622, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/bcs/serializable/entryFunctionBytes.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { FixedBytes } from \"./fixedBytes\";\nimport { EntryFunctionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { HexInput } from \"../../types\";\n\n/**\n * This class exists solely to represent a sequence of fixed bytes as a serialized entry function, because\n * serializing an entry function appends a prefix that's *only* used for entry function arguments.\n *\n * NOTE: Using this class for serialized script functions will lead to erroneous and unexpected behavior.\n *\n * If you wish to convert this class back to a TransactionArgument, you must know the type\n * of the argument beforehand, and use the appropriate class to deserialize the bytes within\n * an instance of this class.\n * @group Implementation\n * @category BCS\n */\nexport class EntryFunctionBytes extends Serializable implements EntryFunctionArgument {\n  public readonly value: FixedBytes;\n\n  /**\n   * Creates an instance of the class with a specified hexadecimal input value.\n   *\n   * @param value - The hexadecimal input to be converted into FixedBytes.\n   * @group Implementation\n   * @category BCS\n   */\n  private constructor(value: HexInput) {\n    super();\n    this.value = new FixedBytes(value);\n  }\n\n  // Note that to see the Move, BCS-serialized representation of the underlying fixed byte vector,\n  // we must not serialize the length prefix.\n  //\n  // In other words, this class is only used to represent a sequence of bytes that are already\n  // BCS-serialized as a type. To represent those bytes accurately, the BCS-serialized form is the same exact\n  // representation.\n\n  /**\n   * Serializes the value using the provided serializer.\n   * This function is essential for accurately representing a sequence of bytes that are already BCS-serialized as a type.\n   *\n   * Note that to see the Move, BCS-serialized representation of the underlying fixed byte vector,\n   * we must not serialize the length prefix.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.value);\n  }\n\n  // When we serialize these bytes as an entry function argument, we need to\n  // serialize the length prefix. This essentially converts the underlying fixed byte vector to a type-agnostic\n  // byte vector to an `any` type.\n  // NOTE: This, and the lack of a `serializeForScriptFunction`, is the only meaningful difference between this\n  // class and FixedBytes.\n\n  /**\n   * Serializes the current instance for use as an entry function argument by converting the underlying fixed byte vector to a\n   * type-agnostic byte vector.\n   * This process includes serializing the length prefix of the byte vector.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category BCS\n   */\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.value.value.length);\n    serializer.serialize(this);\n  }\n\n  /**\n   * The only way to create an instance of this class is to use this static method.\n   * This function should only be used when deserializing a sequence of EntryFunctionPayload arguments.\n   * @param deserializer - The deserializer instance with the buffered bytes.\n   * @param length - The length of the bytes to deserialize.\n   * @returns An instance of this class, which will now only be usable as an EntryFunctionArgument.\n   * @group Implementation\n   * @category BCS\n   */\n  static deserialize(deserializer: Deserializer, length: number): EntryFunctionBytes {\n    const fixedBytes = FixedBytes.deserialize(deserializer, length);\n    return new EntryFunctionBytes(fixedBytes.value);\n  }\n}\n"],"names":["EntryFunctionBytes","_EntryFunctionBytes","Serializable","value","FixedBytes","serializer","deserializer","length","fixedBytes"],"mappings":";;;;;;;AAqBO,IAAMA,IAAN,MAAMC,uPAA2BC,IAA8C;IAU5E,YAAYC,CAAAA,CAAiB;QACnC,KAAA,CAAM,GACN,IAAA,CAAK,KAAA,GAAQ,iPAAIC,IAAAA,CAAWD,CAAK;IACnC;IAoBA,UAAUE,CAAAA,EAA8B;QACtCA,EAAW,SAAA,CAAU,IAAA,CAAK,KAAK;IACjC;IAiBA,0BAA0BA,CAAAA,EAA8B;QACtDA,EAAW,qBAAA,CAAsB,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,MAAM,GACxDA,EAAW,SAAA,CAAU,IAAI;IAC3B;IAWA,OAAO,YAAYC,CAAAA,EAA4BC,CAAAA,EAAoC;QACjF,IAAMC,iPAAaJ,IAAAA,CAAW,WAAA,CAAYE,GAAcC,CAAM;QAC9D,OAAO,IAAIN,EAAmBO,EAAW,KAAK;IAChD;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3652, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/types/index.ts"],"sourcesContent":["export * from \"./indexer\";\nexport * from \"./types\";\nexport { CallArgument } from \"@aptos-labs/script-composer-pack\";\n"],"names":["CallArgument"],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3670, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/types/types.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Network } from \"../utils/apiEndpoints\";\nimport { OrderBy, TokenStandard } from \"./indexer\";\n\n/**\n * Different MIME types used for data interchange in transactions and responses.\n */\nexport enum MimeType {\n  /**\n   * JSON representation, used for transaction submission and accept type JSON output\n   */\n  JSON = \"application/json\",\n  /**\n   * BCS representation, used for accept type BCS output\n   */\n  BCS = \"application/x-bcs\",\n  /**\n   * BCS representation, used for transaction submission in BCS input\n   */\n  BCS_SIGNED_TRANSACTION = \"application/x.aptos.signed_transaction+bcs\",\n  BCS_VIEW_FUNCTION = \"application/x.aptos.view_function+bcs\",\n}\n\n/**\n * Hexadecimal data input for functions, supporting both string and Uint8Array formats.\n */\nexport type HexInput = string | Uint8Array;\n\n/**\n * Variants of type tags used in the system, encompassing various data types and structures.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/language_storage.rs#L27}\n */\nexport enum TypeTagVariants {\n  Bool = 0,\n  U8 = 1,\n  U64 = 2,\n  U128 = 3,\n  Address = 4,\n  Signer = 5,\n  Vector = 6,\n  Struct = 7,\n  U16 = 8,\n  U32 = 9,\n  U256 = 10,\n  Reference = 254, // This is specifically a placeholder and does not represent a real type\n  Generic = 255, // This is specifically a placeholder and does not represent a real type\n}\n\n/**\n * Variants of script transaction arguments used in Rust, encompassing various data types for transaction processing.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/transaction_argument.rs#L11}\n */\nexport enum ScriptTransactionArgumentVariants {\n  U8 = 0,\n  U64 = 1,\n  U128 = 2,\n  Address = 3,\n  U8Vector = 4,\n  Bool = 5,\n  U16 = 6,\n  U32 = 7,\n  U256 = 8,\n  Serialized = 9,\n}\n\n/**\n * The payload for various transaction types in the system.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L478}\n */\nexport enum TransactionPayloadVariants {\n  Script = 0,\n  EntryFunction = 2,\n  Multisig = 3,\n}\n\n/**\n * Variants of transactions used in the system.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L440}\n */\nexport enum TransactionVariants {\n  MultiAgentTransaction = 0,\n  FeePayerTransaction = 1,\n}\n\n/**\n * Variants of transaction authenticators used in the system.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L44}\n */\nexport enum TransactionAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  MultiAgent = 2,\n  FeePayer = 3,\n  SingleSender = 4,\n}\n\n/**\n * Variants of account authenticators used in transactions.\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L414}\n */\nexport enum AccountAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  SingleKey = 2,\n  MultiKey = 3,\n  NoAccountAuthenticator = 4,\n  Abstraction = 5,\n}\n\n/**\n * Variants of private keys that can comply with the AIP-80 standard.\n * {@link https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-80.md}\n */\nexport enum PrivateKeyVariants {\n  Ed25519 = \"ed25519\",\n  Secp256k1 = \"secp256k1\",\n}\n\n/**\n * Variants of public keys used in cryptographic operations.\n */\nexport enum AnyPublicKeyVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n  Keyless = 3,\n  FederatedKeyless = 4,\n}\n\n/**\n * Variants of signature types used for cryptographic operations.\n */\nexport enum AnySignatureVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n  Keyless = 3,\n}\n\n/**\n * Variants of ephemeral public keys used in cryptographic operations.\n */\nexport enum EphemeralPublicKeyVariant {\n  Ed25519 = 0,\n}\n\n/**\n * Variants of ephemeral signatures used for secure communication.\n */\nexport enum EphemeralSignatureVariant {\n  Ed25519 = 0,\n}\n\n/**\n * Variants of ephemeral certificates used in secure transactions.\n */\nexport enum EphemeralCertificateVariant {\n  ZkProof = 0,\n}\n\n/**\n * Variants of zero-knowledge proofs used in cryptographic operations.\n */\nexport enum ZkpVariant {\n  Groth16 = 0,\n}\n\n/**\n * BCS types\n */\nexport type Uint8 = number;\n\n/**\n * A 16-bit unsigned integer.\n */\nexport type Uint16 = number;\n\n/**\n * A 32-bit unsigned integer.\n */\nexport type Uint32 = number;\n\n/**\n * A 64-bit unsigned integer value.\n */\nexport type Uint64 = bigint;\n\n/**\n * A 128-bit unsigned integer used for precise arithmetic operations.\n */\nexport type Uint128 = bigint;\n\n/**\n * A 256-bit unsigned integer used for precise numerical calculations.\n */\nexport type Uint256 = bigint;\n\n/**\n * A number or a bigint value.\n */\nexport type AnyNumber = number | bigint;\n\n/**\n * Configuration options for initializing the SDK, allowing customization of its behavior and interaction with the Aptos network.\n */\nexport type AptosSettings = {\n  readonly network?: Network;\n\n  readonly fullnode?: string;\n\n  readonly faucet?: string;\n\n  readonly indexer?: string;\n\n  readonly pepper?: string;\n\n  readonly prover?: string;\n\n  readonly clientConfig?: ClientConfig;\n\n  readonly client?: Client;\n\n  readonly fullnodeConfig?: FullNodeConfig;\n\n  readonly indexerConfig?: IndexerConfig;\n\n  readonly faucetConfig?: FaucetConfig;\n};\n\n/**\n * Defines the parameters for paginating query results, including the starting position and maximum number of items to return.\n * @param offset Specifies the starting position of the query result. Default is 0.\n * @param limit Specifies the maximum number of items to return. Default is 25.\n */\nexport interface PaginationArgs {\n  offset?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * Defines the parameters for paginating query results, including the starting position and maximum number of items to return.\n * @param cursor Specifies the starting position of the query result. Default is at the beginning if undefined.  This is not a number and must come from the API.\n * @param limit Specifies the maximum number of items to return. Default is 25.\n */\nexport interface CursorPaginationArgs {\n  cursor?: string;\n  limit?: number;\n}\n\n/**\n * Represents the arguments for specifying a token standard.\n *\n * @param tokenStandard - Optional standard of the token.\n */\nexport interface TokenStandardArg {\n  tokenStandard?: TokenStandard;\n}\n\nexport interface OrderByArg<T extends {}> {\n  orderBy?: OrderBy<T>;\n}\n\nexport interface WhereArg<T extends {}> {\n  where?: T;\n}\n\n/**\n * QUERY TYPES\n */\n\n/**\n * A configuration object for requests to the server, including API key, extra headers, and cookie handling options.\n */\nexport type ClientConfig = ClientHeadersType & {\n  WITH_CREDENTIALS?: boolean;\n  API_KEY?: string;\n};\n\n/**\n * A configuration object for a Fullnode, allowing for the inclusion of extra headers in requests.\n */\nexport type FullNodeConfig = ClientHeadersType;\n\n/**\n * An Indexer configuration object for sending requests with additional headers.\n */\nexport type IndexerConfig = ClientHeadersType;\n\n/**\n * A configuration object for a faucet, including optional authentication and headers for requests.\n */\nexport type FaucetConfig = ClientHeadersType & {\n  AUTH_TOKEN?: string;\n};\n\n/**\n * General type definition for client headers.\n */\nexport type ClientHeadersType = {\n  HEADERS?: Record<string, string | number | boolean>;\n};\n\n/**\n * Represents a client for making requests to a service provider.\n *\n * @param Req - The type of the request payload.\n * @param Res - The type of the response payload.\n */\nexport interface ClientRequest<Req> {\n  url: string;\n  method: \"GET\" | \"POST\";\n  originMethod?: string;\n  body?: Req;\n  contentType?: string;\n  params?: any;\n  overrides?: ClientConfig & FullNodeConfig & IndexerConfig & FaucetConfig;\n  headers?: Record<string, any>;\n}\n\nexport interface ClientResponse<Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  config?: any;\n  request?: any;\n  response?: any;\n  headers?: any;\n}\n\nexport interface Client {\n  /**\n   * Sends a request to the specified URL with the given options.\n   *\n   * @param requestOptions - The options for the request.\n   * @param requestOptions.url - The URL to send the request to.\n   * @param requestOptions.method - The HTTP method to use, either \"GET\" or \"POST\".\n   * @param requestOptions.path - An optional path to append to the URL.\n   * @param requestOptions.body - The body of the request, applicable for POST requests.\n   * @param requestOptions.contentType - The content type of the request body.\n   * @param requestOptions.acceptType - The expected content type of the response.\n   * @param requestOptions.params - Optional parameters to include in the request.\n   * @param requestOptions.originMethod - An optional method to specify the origin of the request.\n   * @param requestOptions.overrides - Optional configuration overrides for the request.\n   */\n  provider<Req, Res>(requestOptions: ClientRequest<Req>): Promise<ClientResponse<Res>>;\n}\n\n/**\n * The API request type\n *\n * @param url - the url to make the request to, i.e. https://fullnode.devnet.aptoslabs.com/v1\n * @param method - the request method \"GET\" | \"POST\"\n * @param endpoint (optional) - the endpoint to make the request to, i.e. transactions\n * @param body (optional) - the body of the request\n * @param contentType (optional) - the content type to set the `content-type` header to,\n * by default is set to `application/json`\n * @param params (optional) - query params to add to the request\n * @param originMethod (optional) - the local method the request came from\n * @param overrides (optional) - a `ClientConfig` object type to override request data\n */\nexport type AptosRequest = {\n  url: string;\n  method: \"GET\" | \"POST\";\n  path?: string;\n  body?: any;\n  contentType?: string;\n  acceptType?: string;\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  originMethod?: string;\n  overrides?: ClientConfig & FullNodeConfig & IndexerConfig & FaucetConfig;\n};\n\n/**\n * The API response type\n *\n * @param status - the response status. i.e. 200\n * @param statusText - the response message\n * @param data the response data\n * @param url the url the request was made to\n * @param headers the response headers\n * @param config (optional) - the request object\n * @param request (optional) - the request object\n */\nexport interface AptosResponse<Req, Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  url: string;\n  headers: any;\n  config?: any;\n  request?: Req;\n}\n\n/**\n * The ledger version of transactions, defaulting to the latest version if not specified.\n */\nexport type LedgerVersionArg = {\n  ledgerVersion?: AnyNumber;\n};\n\n/**\n * RESPONSE TYPES\n */\n\n/**\n * The output of the estimate gas API, including the deprioritized estimate for the gas unit price.\n */\nexport type GasEstimation = {\n  /**\n   * The deprioritized estimate for the gas unit price\n   */\n  deprioritized_gas_estimate?: number;\n  /**\n   * The current estimate for the gas unit price\n   */\n  gas_estimate: number;\n  /**\n   * The prioritized estimate for the gas unit price\n   */\n  prioritized_gas_estimate?: number;\n};\n\nexport type MoveResource<T = {}> = {\n  type: MoveStructId;\n  data: T;\n};\n\n/**\n * The data associated with an account, including its sequence number.\n */\nexport type AccountData = {\n  sequence_number: string;\n  authentication_key: string;\n};\n\n/**\n * A Move module containing an address.\n */\nexport type MoveModuleBytecode = {\n  bytecode: string;\n  abi?: MoveModule;\n};\n\n/**\n * TRANSACTION TYPES\n */\n\n/**\n * Different types of transaction responses that can occur in the system.\n */\nexport enum TransactionResponseType {\n  Pending = \"pending_transaction\",\n  User = \"user_transaction\",\n  Genesis = \"genesis_transaction\",\n  BlockMetadata = \"block_metadata_transaction\",\n  StateCheckpoint = \"state_checkpoint_transaction\",\n  Validator = \"validator_transaction\",\n  BlockEpilogue = \"block_epilogue_transaction\",\n}\n\n/**\n * The response for a transaction, which can be either pending or committed.\n */\nexport type TransactionResponse = PendingTransactionResponse | CommittedTransactionResponse;\n\n/**\n * The response for a committed transaction, which can be one of several transaction types.\n */\nexport type CommittedTransactionResponse =\n  | UserTransactionResponse\n  | GenesisTransactionResponse\n  | BlockMetadataTransactionResponse\n  | StateCheckpointTransactionResponse\n  | ValidatorTransactionResponse\n  | BlockEpilogueTransactionResponse;\n\n/**\n * Determine if the given transaction response is currently pending.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the transaction is pending.\n */\nexport function isPendingTransactionResponse(response: TransactionResponse): response is PendingTransactionResponse {\n  return response.type === TransactionResponseType.Pending;\n}\n\n/**\n * Determines if the given transaction response is a user transaction.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the transaction is of type User.\n */\nexport function isUserTransactionResponse(response: TransactionResponse): response is UserTransactionResponse {\n  return response.type === TransactionResponseType.User;\n}\n\n/**\n * Determines if the given transaction response is a Genesis transaction.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the transaction is a Genesis transaction.\n */\nexport function isGenesisTransactionResponse(response: TransactionResponse): response is GenesisTransactionResponse {\n  return response.type === TransactionResponseType.Genesis;\n}\n\n/**\n * Determine if the given transaction response is of type BlockMetadata.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the response is a BlockMetadata transaction.\n */\nexport function isBlockMetadataTransactionResponse(\n  response: TransactionResponse,\n): response is BlockMetadataTransactionResponse {\n  return response.type === TransactionResponseType.BlockMetadata;\n}\n\n/**\n * Determines if the provided transaction response is a state checkpoint transaction.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the transaction response is of type StateCheckpoint.\n */\nexport function isStateCheckpointTransactionResponse(\n  response: TransactionResponse,\n): response is StateCheckpointTransactionResponse {\n  return response.type === TransactionResponseType.StateCheckpoint;\n}\n\n/**\n * Determine if the given transaction response is of type Validator.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the transaction response is a Validator type.\n */\nexport function isValidatorTransactionResponse(\n  response: TransactionResponse,\n): response is ValidatorTransactionResponse {\n  return response.type === TransactionResponseType.Validator;\n}\n\n/**\n * Determines if the given transaction response is of the type Block Epilogue.\n *\n * @param response - The transaction response to evaluate.\n * @returns A boolean indicating whether the response is a Block Epilogue transaction.\n */\nexport function isBlockEpilogueTransactionResponse(\n  response: TransactionResponse,\n): response is BlockEpilogueTransactionResponse {\n  return response.type === TransactionResponseType.BlockEpilogue;\n}\n\n/**\n * The response for a pending transaction, indicating that the transaction is still being processed.\n */\nexport type PendingTransactionResponse = {\n  type: TransactionResponseType.Pending;\n  hash: string;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n};\n\n/**\n * The response structure for a user transaction.\n */\nexport type UserTransactionResponse = {\n  type: TransactionResponseType.User;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n  /**\n   * Events generated by the transaction\n   */\n  events: Array<Event>;\n  timestamp: string;\n};\n\n/**\n * The response for a genesis transaction, indicating the type of transaction.\n */\nexport type GenesisTransactionResponse = {\n  type: TransactionResponseType.Genesis;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  payload: GenesisPayload;\n  /**\n   * Events emitted during genesis\n   */\n  events: Array<Event>;\n};\n\n/**\n * The structure representing a blockchain block with its height.\n */\nexport type BlockMetadataTransactionResponse = {\n  type: TransactionResponseType.BlockMetadata;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  id: string;\n  epoch: string;\n  round: string;\n  /**\n   * The events emitted at the block creation\n   */\n  events: Array<Event>;\n  /**\n   * Previous block votes\n   */\n  previous_block_votes_bitvec: Array<number>;\n  proposer: string;\n  /**\n   * The indices of the proposers who failed to propose\n   */\n  failed_proposer_indices: Array<number>;\n  timestamp: string;\n};\n\n/**\n * The response for a state checkpoint transaction, indicating the type of transaction.\n */\nexport type StateCheckpointTransactionResponse = {\n  type: TransactionResponseType.StateCheckpoint;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  timestamp: string;\n};\n\n/**\n * The response for a validator transaction, indicating the type of transaction.\n */\nexport type ValidatorTransactionResponse = {\n  type: TransactionResponseType.Validator;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  /**\n   * The events emitted by the validator transaction\n   */\n  events: Array<Event>;\n  timestamp: string;\n};\n\n/**\n * Describes the gas state of the block, indicating whether the block gas limit has been reached.\n */\nexport type BlockEndInfo = {\n  block_gas_limit_reached: boolean;\n  block_output_limit_reached: boolean;\n  block_effective_block_gas_units: number;\n  block_approx_output_size: number;\n};\n\n/**\n * A transaction executed at the end of a block that tracks data from the entire block.\n */\nexport type BlockEpilogueTransactionResponse = {\n  type: TransactionResponseType.BlockEpilogue;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash: string | null;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  timestamp: string;\n  block_end_info: BlockEndInfo | null;\n};\n\n/**\n * WRITESET CHANGE TYPES\n */\n\n/**\n * A union type that encompasses both script and direct write sets for data operations.\n */\nexport type WriteSetChange =\n  | WriteSetChangeDeleteModule\n  | WriteSetChangeDeleteResource\n  | WriteSetChangeDeleteTableItem\n  | WriteSetChangeWriteModule\n  | WriteSetChangeWriteResource\n  | WriteSetChangeWriteTableItem;\n\n/**\n * The structure for a module deletion change in a write set.\n */\nexport type WriteSetChangeDeleteModule = {\n  type: string;\n  address: string;\n  /**\n   * State key hash\n   */\n  state_key_hash: string;\n  module: MoveModuleId;\n};\n\n/**\n * The payload for a resource deletion in a write set change.\n */\nexport type WriteSetChangeDeleteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  resource: string;\n};\n\n/**\n * The payload for a write set change that deletes a table item.\n */\nexport type WriteSetChangeDeleteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  data?: DeletedTableData;\n};\n\n/**\n * The structure for a write module change in a write set.\n */\nexport type WriteSetChangeWriteModule = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveModuleBytecode;\n};\n\n/**\n * The resource associated with a write set change, identified by its type.\n */\nexport type WriteSetChangeWriteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveResource;\n};\n\n/**\n * The structure for a write operation on a table in a write set change.\n */\nexport type WriteSetChangeWriteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  value: string;\n  data?: DecodedTableData;\n};\n\n/**\n * The decoded data for a table, including its key in JSON format.\n */\nexport type DecodedTableData = {\n  /**\n   * Key of table in JSON\n   */\n  key: any;\n  /**\n   * Type of key\n   */\n  key_type: string;\n  /**\n   * Value of table in JSON\n   */\n  value: any;\n  /**\n   * Type of value\n   */\n  value_type: string;\n};\n\n/**\n * Data for a deleted table entry.\n */\nexport type DeletedTableData = {\n  /**\n   * Deleted key\n   */\n  key: any;\n  /**\n   * Deleted key type\n   */\n  key_type: string;\n};\n\n/**\n * The payload for a transaction response, which can be an entry function, script, or multisig payload.\n */\nexport type TransactionPayloadResponse = EntryFunctionPayloadResponse | ScriptPayloadResponse | MultisigPayloadResponse;\n\n/**\n * The response payload for an entry function, containing the type of the entry.\n */\nexport type EntryFunctionPayloadResponse = {\n  type: string;\n  function: MoveFunctionId;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\n/**\n * The payload for a script response, containing the type of the script.\n */\nexport type ScriptPayloadResponse = {\n  type: string;\n  code: MoveScriptBytecode;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\n/**\n * The response payload for a multisig transaction, containing the type of the transaction.\n */\nexport type MultisigPayloadResponse = {\n  type: string;\n  multisig_address: string;\n  transaction_payload?: EntryFunctionPayloadResponse;\n};\n\n/**\n * The payload for the genesis block containing the type of the payload.\n */\nexport type GenesisPayload = {\n  type: string;\n  write_set: WriteSet;\n};\n\n/**\n * The bytecode for a Move script.\n */\nexport type MoveScriptBytecode = {\n  bytecode: string;\n  abi?: MoveFunction;\n};\n\n/**\n * JSON representations of transaction signatures returned from the node API.\n */\nexport type TransactionSignature =\n  | TransactionEd25519Signature\n  | TransactionSecp256k1Signature\n  | TransactionMultiEd25519Signature\n  | TransactionMultiAgentSignature\n  | TransactionFeePayerSignature;\n\n/**\n * Determine if the provided signature is an Ed25519 signature.\n * This function checks for the presence of the \"signature\" property\n * and verifies that its value is \"ed25519_signature\".\n *\n * @param signature - The transaction signature to be checked.\n * @returns A boolean indicating whether the signature is an Ed25519 signature.\n */\nexport function isEd25519Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return \"signature\" in signature && signature.signature === \"ed25519_signature\";\n}\n\n/**\n * Determine if the provided signature is a valid secp256k1 ECDSA signature.\n *\n * @param signature - The transaction signature to validate.\n * @returns A boolean indicating whether the signature is a secp256k1 ECDSA signature.\n */\nexport function isSecp256k1Signature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return \"signature\" in signature && signature.signature === \"secp256k1_ecdsa_signature\";\n}\n\n/**\n * Determine if the provided transaction signature is a multi-agent signature.\n *\n * @param signature - The transaction signature to evaluate.\n * @returns A boolean indicating whether the signature is a multi-agent signature.\n */\nexport function isMultiAgentSignature(signature: TransactionSignature): signature is TransactionMultiAgentSignature {\n  return signature.type === \"multi_agent_signature\";\n}\n\n/**\n * Determine if the provided signature is a fee payer signature.\n *\n * @param signature - The transaction signature to evaluate.\n * @returns A boolean indicating whether the signature is a fee payer signature.\n */\nexport function isFeePayerSignature(signature: TransactionSignature): signature is TransactionFeePayerSignature {\n  return signature.type === \"fee_payer_signature\";\n}\n\n/**\n * Determine if the provided signature is of type \"multi_ed25519_signature\".\n *\n * @param signature - The transaction signature to check.\n * @returns A boolean indicating whether the signature is a multi-ed25519 signature.\n */\nexport function isMultiEd25519Signature(\n  signature: TransactionSignature,\n): signature is TransactionMultiEd25519Signature {\n  return signature.type === \"multi_ed25519_signature\";\n}\n\n/**\n * The signature for a transaction using the Ed25519 algorithm.\n */\nexport type TransactionEd25519Signature = {\n  type: string;\n  public_key: string;\n  signature: \"ed25519_signature\";\n};\n\n/**\n * The structure for a Secp256k1 signature in a transaction.\n */\nexport type TransactionSecp256k1Signature = {\n  type: string;\n  public_key: string;\n  signature: \"secp256k1_ecdsa_signature\";\n};\n\n/**\n * The structure for a multi-signature transaction using Ed25519.\n */\nexport type TransactionMultiEd25519Signature = {\n  type: \"multi_ed25519_signature\";\n  /**\n   * The public keys for the Ed25519 signature\n   */\n  public_keys: Array<string>;\n  /**\n   * Signature associated with the public keys in the same order\n   */\n  signatures: Array<string>;\n  /**\n   * The number of signatures required for a successful transaction\n   */\n  threshold: number;\n  bitmap: string;\n};\n\n/**\n * The structure for a multi-agent signature in a transaction.\n */\nexport type TransactionMultiAgentSignature = {\n  type: \"multi_agent_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n};\n\n/**\n * The signature of the fee payer in a transaction.\n */\nexport type TransactionFeePayerSignature = {\n  type: \"fee_payer_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n  fee_payer_address: string;\n  fee_payer_signer: AccountSignature;\n};\n\n/**\n * The union of all single account signatures, including Ed25519, Secp256k1, and MultiEd25519 signatures.\n */\nexport type AccountSignature =\n  | TransactionEd25519Signature\n  | TransactionSecp256k1Signature\n  | TransactionMultiEd25519Signature;\n\nexport type WriteSet = ScriptWriteSet | DirectWriteSet;\n\n/**\n * The set of properties for writing scripts, including the type of script.\n */\nexport type ScriptWriteSet = {\n  type: string;\n  execute_as: string;\n  script: ScriptPayloadResponse;\n};\n\n/**\n * The set of direct write operations, identified by a type string.\n */\nexport type DirectWriteSet = {\n  type: string;\n  changes: Array<WriteSetChange>;\n  events: Array<Event>;\n};\n\n/**\n * The structure for an event's unique identifier, including its creation number.\n */\n\n/**\n * The structure for an event, identified by a unique GUID.\n */\nexport type EventGuid = {\n  creation_number: string;\n  account_address: string;\n};\n\nexport type Event = {\n  guid: EventGuid;\n  sequence_number: string;\n  type: string;\n  /**\n   * The JSON representation of the event\n   */\n  data: any;\n};\n\n/**\n * A number representing a Move uint8 type.\n */\nexport type MoveUint8Type = number;\n\n/**\n * A 16-bit unsigned integer used in the Move programming language.\n */\nexport type MoveUint16Type = number;\n\n/**\n * A 32-bit unsigned integer type used in Move programming.\n */\nexport type MoveUint32Type = number;\n\n/**\n * A string representation of a 64-bit unsigned integer used in Move programming.\n */\nexport type MoveUint64Type = string;\n\n/**\n * A string representing a 128-bit unsigned integer in the Move programming language.\n */\nexport type MoveUint128Type = string;\n\n/**\n * A string representation of a 256-bit unsigned integer used in Move programming.\n */\nexport type MoveUint256Type = string;\n\n/**\n * A string representing a Move address.\n */\nexport type MoveAddressType = string;\n\n/**\n * The type for identifying objects to be moved within the system.\n */\nexport type MoveObjectType = string;\n\n/**\n * The type for move options, which can be a MoveType, null, or undefined.\n */\nexport type MoveOptionType = MoveType | null | undefined;\n\n/**\n * A structure representing a move with a name.\n */\nexport type MoveStructId = `${string}::${string}::${string}`;\n\n/**\n * The move function containing its name. Same as MoveStructId since it reads weird to take a StructId for a Function.\n */\nexport type MoveFunctionId = MoveStructId;\n\n// TODO: Add support for looking up ABI to add proper typing\nexport type MoveStructType = {};\n\n/**\n * A union type that encompasses various data types used in Move, including primitive types, address types, object types, and\n * arrays of MoveType.\n */\nexport type MoveType =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructType\n  | Array<MoveType>;\n\n/**\n * Possible Move values acceptable by move functions (entry, view)\n *\n * Map of a Move value to the corresponding TypeScript value\n *\n * `Bool -> boolean`\n *\n * `u8, u16, u32 -> number`\n *\n * `u64, u128, u256 -> string`\n *\n * `String -> string`\n *\n * `Address -> 0x${string}`\n *\n * `Struct - 0x${string}::${string}::${string}`\n *\n * `Object -> 0x${string}`\n *\n * `Vector -> Array<MoveValue>`\n *\n * `Option -> MoveValue | null | undefined`\n */\nexport type MoveValue =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructId\n  | MoveOptionType\n  | Array<MoveValue>;\n\n/**\n * A string representation of a Move module, formatted as `module_name::function_name`.\n * Module names are case-sensitive.\n */\nexport type MoveModuleId = `${string}::${string}`;\n\n/**\n * Specifies the visibility levels for move functions, controlling access permissions.\n */\nexport enum MoveFunctionVisibility {\n  PRIVATE = \"private\",\n  PUBLIC = \"public\",\n  FRIEND = \"friend\",\n}\n\n/**\n * Abilities related to moving items within the system.\n */\nexport enum MoveAbility {\n  STORE = \"store\",\n  DROP = \"drop\",\n  KEY = \"key\",\n  COPY = \"copy\",\n}\n\n/**\n * Move abilities associated with the generic type parameter of a function.\n */\nexport type MoveFunctionGenericTypeParam = {\n  constraints: Array<MoveAbility>;\n};\n\n/**\n * A field in a Move struct, identified by its name.\n */\nexport type MoveStructField = {\n  name: string;\n  type: string;\n};\n\n/**\n * A Move module\n */\nexport type MoveModule = {\n  address: string;\n  name: string;\n  /**\n   * Friends of the module\n   */\n  friends: Array<MoveModuleId>;\n  /**\n   * Public functions of the module\n   */\n  exposed_functions: Array<MoveFunction>;\n  /**\n   * Structs of the module\n   */\n  structs: Array<MoveStruct>;\n};\n\n/**\n * A move struct\n */\nexport type MoveStruct = {\n  name: string;\n  /**\n   * Whether the struct is a native struct of Move\n   */\n  is_native: boolean;\n  /**\n   * Whether the struct is a module event (aka v2 event). This will be false for v1\n   * events because the value is derived from the #[event] attribute on the struct in\n   * the Move source code. This attribute is only relevant for v2 events.\n   */\n  is_event: boolean;\n  /**\n   * Abilities associated with the struct\n   */\n  abilities: Array<MoveAbility>;\n  /**\n   * Generic types associated with the struct\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Fields associated with the struct\n   */\n  fields: Array<MoveStructField>;\n};\n\n/**\n * Move function\n */\nexport type MoveFunction = {\n  name: string;\n  visibility: MoveFunctionVisibility;\n  /**\n   * Whether the function can be called as an entry function directly in a transaction\n   */\n  is_entry: boolean;\n  /**\n   * Whether the function is a view function or not\n   */\n  is_view: boolean;\n  /**\n   * Generic type params associated with the Move function\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Parameters associated with the move function\n   */\n  params: Array<string>;\n  /**\n   * Return type of the function\n   */\n  return: Array<string>;\n};\n\n/**\n * Roles that can be assigned within the system, indicating different levels of access and functionality.\n */\nexport enum RoleType {\n  VALIDATOR = \"validator\",\n  FULL_NODE = \"full_node\",\n}\n\n/**\n * Information about the current blockchain ledger, including its chain ID.\n */\nexport type LedgerInfo = {\n  /**\n   * Chain ID of the current chain\n   */\n  chain_id: number;\n  epoch: string;\n  ledger_version: string;\n  oldest_ledger_version: string;\n  ledger_timestamp: string;\n  node_role: RoleType;\n  oldest_block_height: string;\n  block_height: string;\n  /**\n   * Git hash of the build of the API endpoint.  Can be used to determine the exact\n   * software version used by the API endpoint.\n   */\n  git_hash?: string;\n};\n\n/**\n * A Block type\n */\nexport type Block = {\n  block_height: string;\n  block_hash: string;\n  block_timestamp: string;\n  first_version: string;\n  last_version: string;\n  /**\n   * The transactions in the block in sequential order\n   */\n  transactions?: Array<TransactionResponse>;\n};\n\n// REQUEST TYPES\n\n/**\n * The request payload for the GetTableItem API.\n */\nexport type TableItemRequest = {\n  key_type: MoveValue;\n  value_type: MoveValue;\n  /**\n   * The value of the table item's key\n   */\n  key: any;\n};\n\n/**\n * A list of supported Authentication Key schemes in Aptos, consisting of combinations of signing schemes and derive schemes.\n */\nexport type AuthenticationKeyScheme = SigningScheme | DeriveScheme;\n\n/**\n * Different schemes for signing keys used in cryptographic operations.\n */\nexport enum SigningScheme {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For MultiEd25519PublicKey\n   */\n  MultiEd25519 = 1,\n  /**\n   * For SingleKey ecdsa\n   */\n  SingleKey = 2,\n\n  MultiKey = 3,\n}\n\n/**\n * Specifies the signing schemes available for cryptographic operations.\n */\nexport enum SigningSchemeInput {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For Secp256k1Ecdsa\n   */\n  Secp256k1Ecdsa = 2,\n}\n\n/**\n * Specifies the schemes for deriving account addresses from various data sources.\n */\nexport enum DeriveScheme {\n  /**\n   * Derives an address using an AUID, used for objects\n   */\n  DeriveAuid = 251,\n  /**\n   * Derives an address from another object address\n   */\n  DeriveObjectAddressFromObject = 252,\n  /**\n   * Derives an address from a GUID, used for objects\n   */\n  DeriveObjectAddressFromGuid = 253,\n  /**\n   * Derives an address from seed bytes, used for named objects\n   */\n  DeriveObjectAddressFromSeed = 254,\n  /**\n   * Derives an address from seed bytes, used for resource accounts\n   */\n  DeriveResourceAccountAddress = 255,\n}\n\n/**\n * Options for configuring the behavior of the waitForTransaction() function.\n */\nexport type WaitForTransactionOptions = {\n  timeoutSecs?: number;\n  checkSuccess?: boolean;\n  // Default behavior is to wait for the indexer. Set this to false to disable waiting.\n  waitForIndexer?: boolean;\n};\n\n/**\n * Input type to generate an account using the Ed25519 signing scheme.\n */\nexport type GenerateAccountWithEd25519 = {\n  scheme: SigningSchemeInput.Ed25519;\n  legacy: boolean;\n};\n\n/**\n * Input type to generate an account with a Single Signer using Secp256k1.\n */\nexport type GenerateAccountWithSingleSignerSecp256k1Key = {\n  scheme: SigningSchemeInput.Secp256k1Ecdsa;\n  legacy?: false;\n};\n\nexport type GenerateAccount = GenerateAccountWithEd25519 | GenerateAccountWithSingleSignerSecp256k1Key;\n"],"names":["MimeType","TypeTagVariants","ScriptTransactionArgumentVariants","TransactionPayloadVariants","TransactionVariants","TransactionAuthenticatorVariant","AccountAuthenticatorVariant","PrivateKeyVariants","AnyPublicKeyVariant","AnySignatureVariant","EphemeralPublicKeyVariant","EphemeralSignatureVariant","EphemeralCertificateVariant","ZkpVariant","TransactionResponseType","isPendingTransactionResponse","response","isUserTransactionResponse","isGenesisTransactionResponse","isBlockMetadataTransactionResponse","isStateCheckpointTransactionResponse","isValidatorTransactionResponse","isBlockEpilogueTransactionResponse","isEd25519Signature","signature","isSecp256k1Signature","isMultiAgentSignature","isFeePayerSignature","isMultiEd25519Signature","MoveFunctionVisibility","MoveAbility","RoleType","SigningScheme","SigningSchemeInput","DeriveScheme"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3751, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/utils/apiEndpoints.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToIndexerAPI: Record<string, string> = {\n  mainnet: \"https://api.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://api.testnet.aptoslabs.com/v1/graphql\",\n  devnet: \"https://api.devnet.aptoslabs.com/v1/graphql\",\n  local: \"http://127.0.0.1:8090/v1/graphql\",\n};\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToNodeAPI: Record<string, string> = {\n  mainnet: \"https://api.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://api.testnet.aptoslabs.com/v1\",\n  devnet: \"https://api.devnet.aptoslabs.com/v1\",\n  local: \"http://127.0.0.1:8080/v1\",\n};\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToFaucetAPI: Record<string, string> = {\n  devnet: \"https://faucet.devnet.aptoslabs.com\",\n  local: \"http://127.0.0.1:8081\",\n};\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToPepperAPI: Record<string, string> = {\n  mainnet: \"https://api.mainnet.aptoslabs.com/keyless/pepper/v0\",\n  testnet: \"https://api.testnet.aptoslabs.com/keyless/pepper/v0\",\n  devnet: \"https://api.devnet.aptoslabs.com/keyless/pepper/v0\",\n  // Use the devnet service for local environment\n  local: \"https://api.devnet.aptoslabs.com/keyless/pepper/v0\",\n};\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToProverAPI: Record<string, string> = {\n  mainnet: \"https://api.mainnet.aptoslabs.com/keyless/prover/v0\",\n  testnet: \"https://api.testnet.aptoslabs.com/keyless/prover/v0\",\n  devnet: \"https://api.devnet.aptoslabs.com/keyless/prover/v0\",\n  // Use the devnet service for local environment\n  local: \"https://api.devnet.aptoslabs.com/keyless/prover/v0\",\n};\n\n/**\n * Different network environments for connecting to services, ranging from production to development setups.\n * @group Implementation\n * @category Network\n */\nexport enum Network {\n  MAINNET = \"mainnet\",\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  LOCAL = \"local\",\n  CUSTOM = \"custom\",\n}\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToChainId: Record<string, number> = {\n  mainnet: 1,\n  testnet: 2,\n  local: 4,\n};\n\n/**\n * @group Implementation\n * @category Network\n */\nexport const NetworkToNetworkName: Record<string, Network> = {\n  mainnet: Network.MAINNET,\n  testnet: Network.TESTNET,\n  devnet: Network.DEVNET,\n  local: Network.LOCAL,\n  custom: Network.CUSTOM,\n};\n"],"names":["NetworkToIndexerAPI","NetworkToNodeAPI","NetworkToFaucetAPI","NetworkToPepperAPI","NetworkToProverAPI","Network","NetworkToChainId","NetworkToNetworkName"],"mappings":";;;;;;;;;;AAOO,IAAMA,IAA8C;IACzD,SAAS;IACT,SAAS;IACT,QAAQ;IACR,OAAO;AACT,GAMaC,IAA2C;IACtD,SAAS;IACT,SAAS;IACT,QAAQ;IACR,OAAO;AACT,GAMaC,IAA6C;IACxD,QAAQ;IACR,OAAO;AACT,GAMaC,IAA6C;IACxD,SAAS;IACT,SAAS;IACT,QAAQ;IAER,OAAO;AACT,GAMaC,IAA6C;IACxD,SAAS;IACT,SAAS;IACT,QAAQ;IAER,OAAO;AACT,GAOYC,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,EAAA,OAAA,GAAU,WACVA,EAAA,OAAA,GAAU,WACVA,EAAA,MAAA,GAAS,UACTA,EAAA,KAAA,GAAQ,SACRA,EAAA,MAAA,GAAS,UALCA,CAAAA,CAAAA,EAAAA,KAAA,CAAA,IAYCC,IAA2C;IACtD,SAAS;IACT,SAAS;IACT,OAAO;AACT,GAMaC,IAAgD;IAC3D,SAAS;IACT,SAAS;IACT,QAAQ;IACR,OAAO;IACP,QAAQ;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3803, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/aptosConfig.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport aptosClient from \"@aptos-labs/aptos-client\";\nimport { AptosSettings, ClientConfig, Client, FullNodeConfig, IndexerConfig, FaucetConfig } from \"../types\";\nimport {\n  NetworkToNodeAPI,\n  NetworkToFaucetAPI,\n  NetworkToIndexerAPI,\n  Network,\n  NetworkToPepperAPI,\n  NetworkToProverAPI,\n} from \"../utils/apiEndpoints\";\nimport { AptosApiType } from \"../utils/const\";\n\n/**\n * Represents the configuration settings for an Aptos SDK client instance.\n * This class allows customization of various endpoints and client settings.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * async function runExample() {\n *     // Create a configuration for connecting to the Aptos testnet\n *     const config = new AptosConfig({ network: Network.TESTNET });\n *\n *     // Initialize the Aptos client with the configuration\n *     const aptos = new Aptos(config);\n *\n *     console.log(\"Aptos client initialized:\", aptos);\n * }\n * runExample().catch(console.error);\n * ```\n * @group Client\n */\nexport class AptosConfig {\n  /**\n   * The Network that this SDK is associated with. Defaults to DEVNET\n   * @group Client\n   */\n  readonly network: Network;\n\n  /**\n   * The client instance the SDK uses. Defaults to `@aptos-labs/aptos-client\n   * @group Client\n   */\n  readonly client: Client;\n\n  /**\n   * The optional hardcoded fullnode URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly fullnode?: string;\n\n  /**\n   * The optional hardcoded faucet URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly faucet?: string;\n\n  /**\n   * The optional hardcoded pepper service URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly pepper?: string;\n\n  /**\n   * The optional hardcoded prover service URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly prover?: string;\n\n  /**\n   * The optional hardcoded indexer URL to send requests to instead of using the network\n   * @group Client\n   */\n  readonly indexer?: string;\n\n  /**\n   * Optional client configurations\n   * @group Client\n   */\n  readonly clientConfig?: ClientConfig;\n\n  /**\n   * Optional specific Fullnode configurations\n   * @group Client\n   */\n  readonly fullnodeConfig?: FullNodeConfig;\n\n  /**\n   * Optional specific Indexer configurations\n   * @group Client\n   */\n  readonly indexerConfig?: IndexerConfig;\n\n  /**\n   * Optional specific Faucet configurations\n   * @group Client\n   */\n  readonly faucetConfig?: FaucetConfig;\n\n  /**\n   * Initializes an instance of the Aptos client with the specified settings.\n   * This allows users to configure various aspects of the client, such as network and endpoints.\n   *\n   * @param settings - Optional configuration settings for the Aptos client.\n   * @param settings.network - The network to connect to, defaults to `Network.DEVNET`.\n   * @param settings.fullnode - The fullnode endpoint to use for requests.\n   * @param settings.faucet - The faucet endpoint for obtaining test tokens.\n   * @param settings.pepper - The pepper used for transaction signing.\n   * @param settings.prover - The prover endpoint for transaction verification.\n   * @param settings.indexer - The indexer endpoint for querying blockchain data.\n   * @param settings.client - Custom client settings, defaults to a standard Aptos client.\n   * @param settings.clientConfig - Additional configuration for the client.\n   * @param settings.fullnodeConfig - Additional configuration for the fullnode.\n   * @param settings.indexerConfig - Additional configuration for the indexer.\n   * @param settings.faucetConfig - Additional configuration for the faucet.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with default settings\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify the network\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  constructor(settings?: AptosSettings) {\n    this.network = settings?.network ?? Network.DEVNET;\n    this.fullnode = settings?.fullnode;\n    this.faucet = settings?.faucet;\n    this.pepper = settings?.pepper;\n    this.prover = settings?.prover;\n    this.indexer = settings?.indexer;\n    this.client = settings?.client ?? { provider: aptosClient };\n    this.clientConfig = settings?.clientConfig ?? {};\n    this.fullnodeConfig = settings?.fullnodeConfig ?? {};\n    this.indexerConfig = settings?.indexerConfig ?? {};\n    this.faucetConfig = settings?.faucetConfig ?? {};\n  }\n\n  /**\n   * Returns the URL endpoint to send the request to based on the specified API type.\n   * If a custom URL was provided in the configuration, that URL is returned. Otherwise, the URL endpoint is derived from the network.\n   *\n   * @param apiType - The type of Aptos API to get the URL for. This can be one of the following: FULLNODE, FAUCET, INDEXER, PEPPER, PROVER.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, AptosApiType } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the request URL for the FULLNODE API\n   *   const url = config.getRequestUrl(AptosApiType.FULLNODE);\n   *   console.log(\"Request URL for FULLNODE:\", url);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  getRequestUrl(apiType: AptosApiType): string {\n    switch (apiType) {\n      case AptosApiType.FULLNODE:\n        if (this.fullnode !== undefined) return this.fullnode;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom full node url\");\n        return NetworkToNodeAPI[this.network];\n      case AptosApiType.FAUCET:\n        if (this.faucet !== undefined) return this.faucet;\n        if (this.network === Network.TESTNET) {\n          throw new Error(\n            \"There is no way to programmatically mint testnet APT, you must use the minting site at https://aptos.dev/network/faucet\",\n          );\n        }\n        if (this.network === Network.MAINNET) {\n          throw new Error(\"There is no mainnet faucet\");\n        }\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom faucet url\");\n        return NetworkToFaucetAPI[this.network];\n      case AptosApiType.INDEXER:\n        if (this.indexer !== undefined) return this.indexer;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom indexer url\");\n        return NetworkToIndexerAPI[this.network];\n      case AptosApiType.PEPPER:\n        if (this.pepper !== undefined) return this.pepper;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom pepper service url\");\n        return NetworkToPepperAPI[this.network];\n      case AptosApiType.PROVER:\n        if (this.prover !== undefined) return this.prover;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom prover service url\");\n        return NetworkToProverAPI[this.network];\n      default:\n        throw Error(`apiType ${apiType} is not supported`);\n    }\n  }\n\n  /**\n   * Checks if the provided URL is a known pepper service endpoint.\n   *\n   * @param url - The URL to check against the known pepper service endpoints.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const url = \"https://example.pepper.service\"; // replace with a real pepper service URL\n   *\n   *     // Check if the URL is a known pepper service endpoint\n   *     const isPepperService = config.isPepperServiceRequest(url);\n   *\n   *     console.log(`Is the URL a known pepper service? ${isPepperService}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  isPepperServiceRequest(url: string): boolean {\n    return NetworkToPepperAPI[this.network] === url;\n  }\n\n  /**\n   * Checks if the provided URL is a known prover service endpoint.\n   *\n   * @param url - The URL to check against known prover service endpoints.\n   * @returns A boolean indicating whether the URL is a known prover service endpoint.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * // Check if the URL is a known prover service endpoint\n   * const url = \"https://prover.testnet.aptos.dev\"; // replace with a real URL if needed\n   * const isProver = config.isProverServiceRequest(url);\n   *\n   * console.log(`Is the URL a known prover service? ${isProver}`);\n   * ```\n   * @group Client\n   */\n  isProverServiceRequest(url: string): boolean {\n    return NetworkToProverAPI[this.network] === url;\n  }\n}\n"],"names":["aptosClient","AptosConfig","settings","aptosClient","apiType","NetworkToNodeAPI","NetworkToFaucetAPI","NetworkToIndexerAPI","NetworkToPepperAPI","NetworkToProverAPI","url"],"mappings":";;;;AAGA,OAAOA,MAAiB;;;AAiCjB,IAAMC,IAAN,KAAkB;IAmGvB,YAAYC,CAAAA,CAA0B;QACpC,IAAA,CAAK,OAAA,GAAUA,GAAU,WAAW,UACpC,IAAA,CAAK,QAAA,GAAWA,GAAU,UAC1B,IAAA,CAAK,MAAA,GAASA,GAAU,QACxB,IAAA,CAAK,MAAA,GAASA,GAAU,QACxB,IAAA,CAAK,MAAA,GAASA,GAAU,QACxB,IAAA,CAAK,OAAA,GAAUA,GAAU,SACzB,IAAA,CAAK,MAAA,GAASA,GAAU,UAAU;YAAE,gQAAUC;QAAY,GAC1D,IAAA,CAAK,YAAA,GAAeD,GAAU,gBAAgB,CAAC,GAC/C,IAAA,CAAK,cAAA,GAAiBA,GAAU,kBAAkB,CAAC,GACnD,IAAA,CAAK,aAAA,GAAgBA,GAAU,iBAAiB,CAAC,GACjD,IAAA,CAAK,YAAA,GAAeA,GAAU,gBAAgB,CAAC;IACjD;IAwBA,cAAcE,CAAAA,EAA+B;QAC3C,OAAQA,EAAS;YACf,KAAA;gBACE,IAAI,IAAA,CAAK,QAAA,KAAa,KAAA,GAAW,OAAO,IAAA,CAAK,QAAA;gBAC7C,IAAI,IAAA,CAAK,OAAA,KAAY,UAAgB,MAAM,IAAI,MAAM,uCAAuC;gBAC5F,oPAAOC,IAAAA,CAAiB,IAAA,CAAK,OAAO,CAAA;YACtC,KAAA;gBACE,IAAI,IAAA,CAAK,MAAA,KAAW,KAAA,GAAW,OAAO,IAAA,CAAK,MAAA;gBAC3C,IAAI,IAAA,CAAK,OAAA,KAAY,WACnB,MAAM,IAAI,MACR,yHACF;gBAEF,IAAI,IAAA,CAAK,OAAA,KAAY,WACnB,MAAM,IAAI,MAAM,4BAA4B;gBAE9C,IAAI,IAAA,CAAK,OAAA,KAAY,UAAgB,MAAM,IAAI,MAAM,oCAAoC;gBACzF,oPAAOC,IAAAA,CAAmB,IAAA,CAAK,OAAO,CAAA;YACxC,KAAA;gBACE,IAAI,IAAA,CAAK,OAAA,KAAY,KAAA,GAAW,OAAO,IAAA,CAAK,OAAA;gBAC5C,IAAI,IAAA,CAAK,OAAA,KAAY,UAAgB,MAAM,IAAI,MAAM,qCAAqC;gBAC1F,oPAAOC,IAAAA,CAAoB,IAAA,CAAK,OAAO,CAAA;YACzC,KAAA;gBACE,IAAI,IAAA,CAAK,MAAA,KAAW,KAAA,GAAW,OAAO,IAAA,CAAK,MAAA;gBAC3C,IAAI,IAAA,CAAK,OAAA,KAAY,UAAgB,MAAM,IAAI,MAAM,4CAA4C;gBACjG,oPAAOC,IAAAA,CAAmB,IAAA,CAAK,OAAO,CAAA;YACxC,KAAA;gBACE,IAAI,IAAA,CAAK,MAAA,KAAW,KAAA,GAAW,OAAO,IAAA,CAAK,MAAA;gBAC3C,IAAI,IAAA,CAAK,OAAA,KAAY,UAAgB,MAAM,IAAI,MAAM,4CAA4C;gBACjG,oPAAOC,IAAAA,CAAmB,IAAA,CAAK,OAAO,CAAA;YACxC;gBACE,MAAM,MAAM,CAAA,QAAA,EAAWL,CAAO,CAAA,iBAAA,CAAmB;QACrD;IACF;IA0BA,uBAAuBM,CAAAA,EAAsB;QAC3C,oPAAOF,IAAAA,CAAmB,IAAA,CAAK,OAAO,CAAA,KAAME;IAC9C;IAuBA,uBAAuBA,CAAAA,EAAsB;QAC3C,oPAAOD,IAAAA,CAAmB,IAAA,CAAK,OAAO,CAAA,KAAMC;IAC9C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3859, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/keyless.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/federatedKeyless.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/singleKey.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/multiKey.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/core/crypto/multiEd25519.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/authenticator/account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/transactionBuilder/signingMessage.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/moduleId.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/typeTag/index.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/transactionPayload.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/rawTransaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/authenticator/transaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/signedTransaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/simpleTransaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/instances/multiAgentTransaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/Ed25519Account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/SingleKeyAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/Account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/EphemeralKeyPair.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/AbstractKeylessAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/KeylessAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/FederatedKeylessAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/MultiKeyAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/MultiEd25519Account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/utils.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/AccountUtils.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/AbstractedAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/account/DerivableAbstractedAccount.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/transactionBuilder/transactionBuilder.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/typeTag/parser.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/transactionBuilder/helpers.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/transactionBuilder/remoteAbi.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/scriptComposer/index.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/transactionSubmission.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/view.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/abstraction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/account/abstraction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/account.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/coin.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/coin.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/digitalAsset.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/digitalAsset.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/event.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/event.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/faucet.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/faucet.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/fungibleAsset.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/fungibleAsset.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/general.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/ans.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/ans.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/staking.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/staking.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transactionSubmission/build.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transactionSubmission/simulate.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transactionSubmission/submit.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transactionSubmission/management.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/management/accountSequenceNumber.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/transactions/management/transactionWorker.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/transaction.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/keyless.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/keyless.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/internal/object.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/object.ts","file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/api/aptos.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n// eslint-disable-next-line max-classes-per-file\nimport { JwtPayload, jwtDecode } from \"jwt-decode\";\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { Hex, hexToAsciiString } from \"../hex\";\nimport {\n  HexInput,\n  EphemeralCertificateVariant,\n  AnyPublicKeyVariant,\n  SigningScheme,\n  ZkpVariant,\n  LedgerVersionArg,\n  MoveResource,\n} from \"../../types\";\nimport { EphemeralPublicKey, EphemeralSignature } from \"./ephemeral\";\nimport { bigIntToBytesLE, bytesToBigIntLE, hashStrToField, padAndPackBytesWithLen, poseidonHash } from \"./poseidon\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Proof } from \"./proof\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport {\n  Groth16VerificationKeyResponse,\n  KeylessConfigurationResponse,\n  MoveAnyStruct,\n  PatchedJWKsResponse,\n} from \"../../types/keyless\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { getAptosFullNode } from \"../../client\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport { base64UrlToBytes, getErrorMessage, nowInSeconds } from \"../../utils\";\nimport { KeylessError, KeylessErrorType } from \"../../errors\";\nimport { bn254 } from \"@noble/curves/bn254\";\nimport { bytesToNumberBE } from \"@noble/curves/abstract/utils\";\nimport { FederatedKeylessPublicKey } from \"./federatedKeyless\";\nimport { encode } from \"js-base64\";\nimport { generateSigningMessage } from \"../..\";\nimport { ProjPointType } from \"@noble/curves/abstract/weierstrass\";\nimport { Fp2 } from \"@noble/curves/abstract/tower\";\n\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const EPK_HORIZON_SECS = 10000000;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_AUD_VAL_BYTES = 120;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_UID_KEY_BYTES = 30;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_UID_VAL_BYTES = 330;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_ISS_VAL_BYTES = 120;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_EXTRA_FIELD_BYTES = 350;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_JWT_HEADER_B64_BYTES = 300;\n/**\n * @group Implementation\n * @category Serialization\n */\nexport const MAX_COMMITED_EPK_BYTES = 93;\n\n/**\n * Represents a Keyless Public Key used for authentication.\n *\n * This class encapsulates the public key functionality for keyless authentication,\n * including methods for generating and verifying signatures, as well as serialization\n * and deserialization of the key. The KeylessPublicKey is represented in the SDK\n * as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessPublicKey extends AccountPublicKey {\n  /**\n   * The number of bytes that `idCommitment` should be\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly ID_COMMITMENT_LENGTH: number = 32;\n\n  /**\n   * The value of the 'iss' claim on the JWT which identifies the OIDC provider.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly iss: string;\n\n  /**\n   * A value representing a cryptographic commitment to a user identity.\n   *\n   * It is calculated from the aud, uidKey, uidVal, pepper.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly idCommitment: Uint8Array;\n\n  /**\n   * Constructs an instance with the specified parameters for cryptographic operations.\n   *\n   * @param args - The parameters required to initialize the instance.\n   * @param args.alphaG1 - The hex representation of the alpha G1 value.\n   * @param args.betaG2 - The hex representation of the beta G2 value.\n   * @param args.deltaG2 - The hex representation of the delta G2 value.\n   * @param args.gammaAbcG1 - An array containing two hex representations for gamma ABC G1 values.\n   * @param args.gammaG2 - The hex representation of the gamma G2 value.\n   * @group Implementation\n   * @category Serialization\n   */\n  // TODO: Fix the JSDoc for the below values\n  constructor(iss: string, idCommitment: HexInput) {\n    super();\n    const idcBytes = Hex.fromHexInput(idCommitment).toUint8Array();\n    if (idcBytes.length !== KeylessPublicKey.ID_COMMITMENT_LENGTH) {\n      throw new Error(`Id Commitment length in bytes should be ${KeylessPublicKey.ID_COMMITMENT_LENGTH}`);\n    }\n    this.iss = iss;\n    this.idCommitment = idcBytes;\n  }\n\n  /**\n   * Get the authentication key for the keyless public key.\n   *\n   * @returns AuthenticationKey - The authentication key derived from the keyless public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(AnyPublicKeyVariant.Keyless);\n    serializer.serializeFixedBytes(this.bcsToBytes());\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: SigningScheme.SingleKey,\n      input: serializer.toUint8Array(),\n    });\n  }\n\n  /**\n   * Verifies the validity of a signature for a given message.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify against the message.\n   * @param args.jwk - The JWK to use for verification.\n   * @param args.keylessConfig - The keyless configuration to use for verification.\n   * @returns true if the signature is valid; otherwise, false.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: Signature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    try {\n      verifyKeylessSignatureWithJwkAndConfig({ ...args, publicKey: this });\n      return true;\n    } catch (error) {\n      if (error instanceof KeylessError) {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Verifies a keyless signature for a given message.  It will fetch the keyless configuration and the JWK to\n   * use for verification from the appropriate network as defined by the aptosConfig.\n   *\n   * @param args.aptosConfig The aptos config to use for fetching the keyless configuration.\n   * @param args.message The message to verify the signature against.\n   * @param args.signature The signature to verify.\n   * @param args.options.throwErrorWithReason Whether to throw an error with the reason for the failure instead of returning false.\n   * @returns true if the signature is valid\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return verifyKeylessSignature({\n      ...args,\n      publicKey: this,\n    });\n  }\n\n  /**\n   * Serializes the current instance into a format suitable for transmission or storage.\n   * This function ensures that all relevant fields are properly serialized, including the proof and optional fields.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @param serializer.proof - The proof to be serialized.\n   * @param serializer.expHorizonSecs - The expiration horizon in seconds.\n   * @param serializer.extraField - An optional additional field for serialization.\n   * @param serializer.overrideAudVal - An optional override value for auditing.\n   * @param serializer.trainingWheelsSignature - An optional signature for training wheels.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.iss);\n    serializer.serializeBytes(this.idCommitment);\n  }\n\n  /**\n   * Deserializes a ZeroKnowledgeSig object from the provided deserializer.\n   * This function allows you to reconstruct a ZeroKnowledgeSig instance from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @returns A new instance of ZeroKnowledgeSig.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): KeylessPublicKey {\n    const iss = deserializer.deserializeStr();\n    const addressSeed = deserializer.deserializeBytes();\n    return new KeylessPublicKey(iss, addressSeed);\n  }\n\n  /**\n   * Loads a KeylessPublicKey instance from the provided deserializer.\n   * This function is used to deserialize the necessary components to create a KeylessPublicKey.\n   *\n   * @param deserializer - The deserializer used to extract the string and byte data.\n   * @param deserializer.deserializeStr - A method to deserialize a string value.\n   * @param deserializer.deserializeBytes - A method to deserialize byte data.\n   * @returns A new instance of KeylessPublicKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  static load(deserializer: Deserializer): KeylessPublicKey {\n    const iss = deserializer.deserializeStr();\n    const addressSeed = deserializer.deserializeBytes();\n    return new KeylessPublicKey(iss, addressSeed);\n  }\n\n  /**\n   * Determines if the provided public key is an instance of KeylessPublicKey.\n   *\n   * @param publicKey - The public key to check.\n   * @returns A boolean indicating whether the public key is a KeylessPublicKey instance.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: PublicKey): publicKey is KeylessPublicKey {\n    return publicKey instanceof KeylessPublicKey;\n  }\n\n  /**\n   * Creates a KeylessPublicKey from the JWT components plus pepper\n   *\n   * @param args.iss the iss of the identity\n   * @param args.uidKey the key to use to get the uidVal in the JWT token\n   * @param args.uidVal the value of the uidKey in the JWT token\n   * @param args.aud the client ID of the application\n   * @param args.pepper The pepper used to maintain privacy of the account\n   * @returns KeylessPublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  static create(args: {\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n  }): KeylessPublicKey {\n    computeIdCommitment(args);\n    return new KeylessPublicKey(args.iss, computeIdCommitment(args));\n  }\n\n  /**\n   * Creates a KeylessPublicKey instance from a JWT and a pepper value.\n   * This function is useful for generating a public key that can be used for authentication based on the provided JWT claims and pepper.\n   *\n   * @param args - The arguments for creating the KeylessPublicKey.\n   * @param args.jwt - The JSON Web Token to decode.\n   * @param args.pepper - The pepper value used in the key creation process.\n   * @param args.uidKey - An optional key to retrieve the unique identifier from the JWT payload, defaults to \"sub\".\n   * @returns A KeylessPublicKey instance created from the provided JWT and pepper.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromJwtAndPepper(args: { jwt: string; pepper: HexInput; uidKey?: string }): KeylessPublicKey {\n    const { jwt, pepper, uidKey = \"sub\" } = args;\n    const jwtPayload = jwtDecode<JwtPayload & { [key: string]: string }>(jwt);\n    if (typeof jwtPayload.iss !== \"string\") {\n      throw new Error(\"iss was not found\");\n    }\n    if (typeof jwtPayload.aud !== \"string\") {\n      throw new Error(\"aud was not found or an array of values\");\n    }\n    const uidVal = jwtPayload[uidKey];\n    return KeylessPublicKey.create({ iss: jwtPayload.iss, uidKey, uidVal, aud: jwtPayload.aud, pepper });\n  }\n\n  /**\n   * Checks if the provided public key is a valid instance by verifying its structure and types.\n   *\n   * @param publicKey - The public key to validate.\n   * @returns A boolean indicating whether the public key is a valid instance.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey) {\n    return (\n      \"iss\" in publicKey &&\n      typeof publicKey.iss === \"string\" &&\n      \"idCommitment\" in publicKey &&\n      publicKey.idCommitment instanceof Uint8Array\n    );\n  }\n}\n\nexport async function verifyKeylessSignature(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  aptosConfig: AptosConfig;\n  message: HexInput;\n  signature: Signature;\n  keylessConfig?: KeylessConfiguration;\n  jwk?: MoveJWK;\n  options?: { throwErrorWithReason?: boolean };\n}): Promise<boolean> {\n  const {\n    aptosConfig,\n    publicKey,\n    message,\n    signature,\n    jwk,\n    keylessConfig = await getKeylessConfig({ aptosConfig }),\n    options,\n  } = args;\n  try {\n    if (!(signature instanceof KeylessSignature)) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n        details: \"Not a keyless signature\",\n      });\n    }\n    verifyKeylessSignatureWithJwkAndConfig({\n      message,\n      publicKey,\n      signature,\n      jwk: jwk ? jwk : await fetchJWK({ aptosConfig, publicKey, kid: signature.getJwkKid() }),\n      keylessConfig,\n    });\n    return true;\n  } catch (error) {\n    if (options?.throwErrorWithReason) {\n      throw error;\n    }\n    return false;\n  }\n}\n\n/**\n * Syncronously verifies a keyless signature for a given message.  You need to provide the keyless configuration and the\n * JWK to use for verification.\n *\n * @param args.message The message to verify the signature against.\n * @param args.signature The signature to verify.\n * @param args.keylessConfig The keyless configuration.\n * @param args.jwk The JWK to use for verification.\n * @returns true if the signature is valid\n * @throws KeylessError if the signature is invalid\n */\nexport function verifyKeylessSignatureWithJwkAndConfig(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  message: HexInput;\n  signature: Signature;\n  keylessConfig: KeylessConfiguration;\n  jwk: MoveJWK;\n}): void {\n  const { publicKey, message, signature, keylessConfig, jwk } = args;\n  const { verificationKey, maxExpHorizonSecs, trainingWheelsPubkey } = keylessConfig;\n  if (!(signature instanceof KeylessSignature)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Not a keyless signature\",\n    });\n  }\n  if (!(signature.ephemeralCertificate.signature instanceof ZeroKnowledgeSig)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Unsupported ephemeral certificate variant\",\n    });\n  }\n  const zkSig = signature.ephemeralCertificate.signature;\n  if (!(zkSig.proof.proof instanceof Groth16Zkp)) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_TYPE_INVALID,\n      details: \"Unsupported proof variant for ZeroKnowledgeSig\",\n    });\n  }\n  const groth16Proof = zkSig.proof.proof;\n  if (signature.expiryDateSecs < nowInSeconds()) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.SIGNATURE_EXPIRED,\n      details: \"The expiryDateSecs is in the past\",\n    });\n  }\n  if (zkSig.expHorizonSecs > maxExpHorizonSecs) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.MAX_EXPIRY_HORIZON_EXCEEDED,\n    });\n  }\n  if (!signature.ephemeralPublicKey.verifySignature({ message, signature: signature.ephemeralSignature })) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.EPHEMERAL_SIGNATURE_VERIFICATION_FAILED,\n    });\n  }\n  const publicInputsHash = getPublicInputsHash({ publicKey, signature, jwk, keylessConfig });\n  if (!verificationKey.verifyProof({ publicInputsHash, groth16Proof })) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n    });\n  }\n  if (trainingWheelsPubkey) {\n    if (!zkSig.trainingWheelsSignature) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.TRAINING_WHEELS_SIGNATURE_MISSING,\n      });\n    }\n    const proofAndStatement = new Groth16ProofAndStatement(groth16Proof, publicInputsHash);\n    if (\n      !trainingWheelsPubkey.verifySignature({\n        message: proofAndStatement.hash(),\n        signature: zkSig.trainingWheelsSignature,\n      })\n    ) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.TRAINING_WHEELS_SIGNATURE_VERIFICATION_FAILED,\n      });\n    }\n  }\n}\n\n/**\n * Get the public inputs hash for the keyless signature.\n *\n * @param args.signature The signature\n * @param args.jwk The JWK to use for the public inputs hash\n * @param args.keylessConfig The keyless configuration which defines the byte lengths to use when hashing fields.\n * @returns The public inputs hash\n */\nfunction getPublicInputsHash(args: {\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  signature: KeylessSignature;\n  jwk: MoveJWK;\n  keylessConfig: KeylessConfiguration;\n}): bigint {\n  const { publicKey, signature, jwk, keylessConfig } = args;\n  const innerKeylessPublicKey = publicKey instanceof KeylessPublicKey ? publicKey : publicKey.keylessPublicKey;\n  if (!(signature.ephemeralCertificate.signature instanceof ZeroKnowledgeSig)) {\n    throw new Error(\"Signature is not a ZeroKnowledgeSig\");\n  }\n  const proof = signature.ephemeralCertificate.signature;\n  const fields = [];\n  fields.push(\n    ...padAndPackBytesWithLen(signature.ephemeralPublicKey.toUint8Array(), keylessConfig.maxCommitedEpkBytes),\n  );\n  fields.push(bytesToBigIntLE(innerKeylessPublicKey.idCommitment));\n  fields.push(signature.expiryDateSecs);\n  fields.push(proof.expHorizonSecs);\n  fields.push(hashStrToField(innerKeylessPublicKey.iss, keylessConfig.maxIssValBytes));\n  if (!proof.extraField) {\n    fields.push(0n);\n    fields.push(hashStrToField(\" \", keylessConfig.maxExtraFieldBytes));\n  } else {\n    fields.push(1n);\n    fields.push(hashStrToField(proof.extraField, keylessConfig.maxExtraFieldBytes));\n  }\n  fields.push(hashStrToField(encode(signature.jwtHeader, true) + \".\", keylessConfig.maxJwtHeaderB64Bytes));\n  fields.push(jwk.toScalar());\n  if (!proof.overrideAudVal) {\n    fields.push(hashStrToField(\"\", MAX_AUD_VAL_BYTES));\n    fields.push(0n);\n  } else {\n    fields.push(hashStrToField(proof.overrideAudVal, MAX_AUD_VAL_BYTES));\n    fields.push(1n);\n  }\n  return poseidonHash(fields);\n}\n\n/**\n * Fetches the JWK from the issuer's well-known JWKS endpoint.\n *\n * @param args.publicKey The keyless public key which contains the issuer the address to fetch the JWK from (0x1 if not federated).\n * @param args.kid The kid of the JWK to fetch\n * @returns A JWK matching the `kid` in the JWT header.\n * @throws {KeylessError} If the JWK cannot be fetched\n */\nexport async function fetchJWK(args: {\n  aptosConfig: AptosConfig;\n  publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n  kid: string;\n}): Promise<MoveJWK> {\n  const { aptosConfig, publicKey, kid } = args;\n  const keylessPubKey = publicKey instanceof KeylessPublicKey ? publicKey : publicKey.keylessPublicKey;\n  const { iss } = keylessPubKey;\n\n  let allJWKs: Map<string, MoveJWK[]>;\n  const jwkAddr = publicKey instanceof FederatedKeylessPublicKey ? publicKey.jwkAddress : undefined;\n  try {\n    allJWKs = await getKeylessJWKs({ aptosConfig, jwkAddr });\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_JWKS_LOOKUP_ERROR,\n      error,\n      details: `Failed to fetch ${jwkAddr ? \"Federated\" : \"Patched\"}JWKs ${jwkAddr ? `for address ${jwkAddr}` : \"0x1\"}`,\n    });\n  }\n\n  // Find the corresponding JWK set by `iss`\n  const jwksForIssuer = allJWKs.get(iss);\n\n  if (jwksForIssuer === undefined) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.INVALID_JWT_ISS_NOT_RECOGNIZED,\n      details: `JWKs for issuer ${iss} not found.`,\n    });\n  }\n\n  // Find the corresponding JWK by `kid`\n  const jwk = jwksForIssuer.find((key) => key.kid === kid);\n\n  if (jwk === undefined) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.INVALID_JWT_JWK_NOT_FOUND,\n      details: `JWK with kid '${kid}' for issuer '${iss}' not found.`,\n    });\n  }\n\n  return jwk;\n}\n\nfunction computeIdCommitment(args: { uidKey: string; uidVal: string; aud: string; pepper: HexInput }): Uint8Array {\n  const { uidKey, uidVal, aud, pepper } = args;\n\n  const fields = [\n    bytesToBigIntLE(Hex.fromHexInput(pepper).toUint8Array()),\n    hashStrToField(aud, MAX_AUD_VAL_BYTES),\n    hashStrToField(uidVal, MAX_UID_VAL_BYTES),\n    hashStrToField(uidKey, MAX_UID_KEY_BYTES),\n  ];\n\n  return bigIntToBytesLE(poseidonHash(fields), KeylessPublicKey.ID_COMMITMENT_LENGTH);\n}\n\n/**\n * Represents a signature of a message signed via a Keyless Account, utilizing proofs or a JWT token for authentication.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessSignature extends Signature {\n  /**\n   * The inner signature ZeroKnowledgeSignature or OpenIdSignature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralCertificate: EphemeralCertificate;\n\n  /**\n   * The jwt header in the token used to create the proof/signature.  In json string representation.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly jwtHeader: string;\n\n  /**\n   * The expiry timestamp in seconds of the EphemeralKeyPair used to sign\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly expiryDateSecs: number;\n\n  /**\n   * The ephemeral public key used to verify the signature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralPublicKey: EphemeralPublicKey;\n\n  /**\n   * The signature resulting from signing with the private key of the EphemeralKeyPair\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly ephemeralSignature: EphemeralSignature;\n\n  constructor(args: {\n    jwtHeader: string;\n    ephemeralCertificate: EphemeralCertificate;\n    expiryDateSecs: number;\n    ephemeralPublicKey: EphemeralPublicKey;\n    ephemeralSignature: EphemeralSignature;\n  }) {\n    super();\n    const { jwtHeader, ephemeralCertificate, expiryDateSecs, ephemeralPublicKey, ephemeralSignature } = args;\n    this.jwtHeader = jwtHeader;\n    this.ephemeralCertificate = ephemeralCertificate;\n    this.expiryDateSecs = expiryDateSecs;\n    this.ephemeralPublicKey = ephemeralPublicKey;\n    this.ephemeralSignature = ephemeralSignature;\n  }\n\n  /**\n   * Get the kid of the JWT used to derive the Keyless Account used to sign.\n   *\n   * @returns the kid as a string\n   */\n  getJwkKid(): string {\n    return parseJwtHeader(this.jwtHeader).kid;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.ephemeralCertificate.serialize(serializer);\n    serializer.serializeStr(this.jwtHeader);\n    serializer.serializeU64(this.expiryDateSecs);\n    this.ephemeralPublicKey.serialize(serializer);\n    this.ephemeralSignature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): KeylessSignature {\n    const ephemeralCertificate = EphemeralCertificate.deserialize(deserializer);\n    const jwtHeader = deserializer.deserializeStr();\n    const expiryDateSecs = deserializer.deserializeU64();\n    const ephemeralPublicKey = EphemeralPublicKey.deserialize(deserializer);\n    const ephemeralSignature = EphemeralSignature.deserialize(deserializer);\n    return new KeylessSignature({\n      jwtHeader,\n      expiryDateSecs: Number(expiryDateSecs),\n      ephemeralCertificate,\n      ephemeralPublicKey,\n      ephemeralSignature,\n    });\n  }\n\n  static getSimulationSignature(): KeylessSignature {\n    return new KeylessSignature({\n      jwtHeader: \"{}\",\n      ephemeralCertificate: new EphemeralCertificate(\n        new ZeroKnowledgeSig({\n          proof: new ZkProof(\n            new Groth16Zkp({ a: new Uint8Array(32), b: new Uint8Array(64), c: new Uint8Array(32) }),\n            ZkpVariant.Groth16,\n          ),\n          expHorizonSecs: 0,\n        }),\n        EphemeralCertificateVariant.ZkProof,\n      ),\n      expiryDateSecs: 0,\n      ephemeralPublicKey: new EphemeralPublicKey(new Ed25519PublicKey(new Uint8Array(32))),\n      ephemeralSignature: new EphemeralSignature(new Ed25519Signature(new Uint8Array(64))),\n    });\n  }\n\n  static isSignature(signature: Signature): signature is KeylessSignature {\n    return signature instanceof KeylessSignature;\n  }\n}\n\n/**\n * Represents an ephemeral certificate containing a signature, specifically a ZeroKnowledgeSig.\n * This class can be extended to support additional signature types, such as OpenIdSignature.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class EphemeralCertificate extends Signature {\n  public readonly signature: Signature;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly variant: EphemeralCertificateVariant;\n\n  constructor(signature: Signature, variant: EphemeralCertificateVariant) {\n    super();\n    this.signature = signature;\n    this.variant = variant;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.signature.toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.signature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): EphemeralCertificate {\n    const variant = deserializer.deserializeUleb128AsU32();\n    switch (variant) {\n      case EphemeralCertificateVariant.ZkProof:\n        return new EphemeralCertificate(ZeroKnowledgeSig.deserialize(deserializer), variant);\n      default:\n        throw new Error(`Unknown variant index for EphemeralCertificate: ${variant}`);\n    }\n  }\n}\n\n/**\n * Represents a fixed-size byte array of 32 bytes, extending the Serializable class.\n * This class is used for handling and serializing G1 bytes in cryptographic operations.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nclass G1Bytes extends Serializable {\n  private static readonly B = bn254.fields.Fp.create(3n);\n\n  data: Uint8Array;\n\n  constructor(data: HexInput) {\n    super();\n    this.data = Hex.fromHexInput(data).toUint8Array();\n    if (this.data.length !== 32) {\n      throw new Error(\"Input needs to be 32 bytes\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  static deserialize(deserializer: Deserializer): G1Bytes {\n    const bytes = deserializer.deserializeFixedBytes(32);\n    return new G1Bytes(bytes);\n  }\n\n  // Convert the projective coordinates to strings\n  toArray(): string[] {\n    const point = this.toProjectivePoint();\n    return [point.x.toString(), point.y.toString(), point.pz.toString()];\n  }\n\n  /**\n   * Converts the G1 bytes to a projective point.\n   * @returns The projective point.\n   */\n  toProjectivePoint(): ProjPointType<bigint> {\n    const bytes = new Uint8Array(this.data);\n    // Reverse the bytes to convert from little-endian to big-endian.\n    bytes.reverse();\n    // This gets the flag bit to determine which y to use.\n    const yFlag = (bytes[0] & 0x80) >> 7;\n    const { Fp } = bn254.fields;\n    const x = Fp.create(bytesToBn254FpBE(bytes));\n    const y = Fp.sqrt(Fp.add(Fp.pow(x, 3n), G1Bytes.B));\n    const negY = Fp.neg(y);\n    const yToUse = y > negY === (yFlag === 1) ? y : negY;\n    return bn254.G1.ProjectivePoint.fromAffine({\n      x: x,\n      y: yToUse,\n    });\n  }\n}\n\nfunction bytesToBn254FpBE(bytes: Uint8Array): bigint {\n  if (bytes.length !== 32) {\n    throw new Error(\"Input should be 32 bytes\");\n  }\n  // Clear the first two bits of the first byte which removes any flags.\n  const result = new Uint8Array(bytes);\n  result[0] = result[0] & 0x3f; // 0x3F = 00111111 in binary\n  return bytesToNumberBE(result);\n}\n\n/**\n * Represents a 64-byte G2 element in a cryptographic context.\n * This class provides methods for serialization and deserialization of G2 bytes.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nclass G2Bytes extends Serializable {\n  /**\n   * The constant b value used in G2 point calculations\n   */\n  private static readonly B = bn254.fields.Fp2.fromBigTuple([\n    19485874751759354771024239261021720505790618469301721065564631296452457478373n,\n    266929791119991161246907387137283842545076965332900288569378510910307636690n,\n  ]);\n\n  data: Uint8Array;\n\n  constructor(data: HexInput) {\n    super();\n    this.data = Hex.fromHexInput(data).toUint8Array();\n    if (this.data.length !== 64) {\n      throw new Error(\"Input needs to be 64 bytes\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  static deserialize(deserializer: Deserializer): G2Bytes {\n    const bytes = deserializer.deserializeFixedBytes(64);\n    return new G2Bytes(bytes);\n  }\n\n  // Convert the projective coordinates to strings\n  toArray(): [string, string][] {\n    const point = this.toProjectivePoint();\n    return [\n      [\n        point.x.c0.toString(), // x real part\n        point.x.c1.toString(),\n      ], // x imaginary part\n      [\n        point.y.c0.toString(), // y real part\n        point.y.c1.toString(),\n      ], // y imaginary part\n      [\n        point.pz.c0.toString(), // z real part\n        point.pz.c1.toString(),\n      ], // z imaginary part\n    ];\n  }\n\n  toProjectivePoint(): ProjPointType<Fp2> {\n    const bytes = new Uint8Array(this.data);\n    // Reverse the bytes to convert from little-endian to big-endian for each part of x.\n    const x0 = bytes.slice(0, 32).reverse();\n    const x1 = bytes.slice(32, 64).reverse();\n    // This gets the flag bit to determine which y to use.\n    const yFlag = (x1[0] & 0x80) >> 7;\n    const { Fp2 } = bn254.fields;\n    const x = Fp2.fromBigTuple([bytesToBn254FpBE(x0), bytesToBn254FpBE(x1)]);\n    const y = Fp2.sqrt(Fp2.add(Fp2.pow(x, 3n), G2Bytes.B));\n    const negY = Fp2.neg(y);\n    const isYGreaterThanNegY = y.c1 > negY.c1 || (y.c1 === negY.c1 && y.c0 > negY.c0);\n    const yToUse = isYGreaterThanNegY === (yFlag === 1) ? y : negY;\n    return bn254.G2.ProjectivePoint.fromAffine({\n      x: x,\n      y: yToUse,\n    });\n  }\n}\n\n/**\n * Represents a Groth16 zero-knowledge proof, consisting of three proof points in compressed serialization format.\n * The points are the compressed serialization of affine representation of the proof.\n *\n * @extends Proof\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16Zkp extends Proof {\n  /**\n   * The bytes of G1 proof point a\n   * @group Implementation\n   * @category Serialization\n   */\n  a: G1Bytes;\n\n  /**\n   * The bytes of G2 proof point b\n   * @group Implementation\n   * @category Serialization\n   */\n  b: G2Bytes;\n\n  /**\n   * The bytes of G1 proof point c\n   * @group Implementation\n   * @category Serialization\n   */\n  c: G1Bytes;\n\n  constructor(args: { a: HexInput; b: HexInput; c: HexInput }) {\n    super();\n    const { a, b, c } = args;\n    this.a = new G1Bytes(a);\n    this.b = new G2Bytes(b);\n    this.c = new G1Bytes(c);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.a.serialize(serializer);\n    this.b.serialize(serializer);\n    this.c.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Groth16Zkp {\n    const a = G1Bytes.deserialize(deserializer).bcsToBytes();\n    const b = G2Bytes.deserialize(deserializer).bcsToBytes();\n    const c = G1Bytes.deserialize(deserializer).bcsToBytes();\n    return new Groth16Zkp({ a, b, c });\n  }\n\n  toSnarkJsJson() {\n    return {\n      protocol: \"groth16\",\n      curve: \"bn128\",\n      pi_a: this.a.toArray(),\n      pi_b: this.b.toArray(),\n      pi_c: this.c.toArray(),\n    };\n  }\n}\n\n/**\n * Represents a Groth16 proof and statement, consisting of a Groth16 proof and a public inputs hash.\n * This is used to generate the signing message for the training wheels signature.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16ProofAndStatement extends Serializable {\n  /**\n   * The Groth16 proof\n   * @group Implementation\n   * @category Serialization\n   */\n  proof: Groth16Zkp;\n\n  /**\n   * The public inputs hash as a 32 byte Uint8Array\n   * @group Implementation\n   * @category Serialization\n   */\n  publicInputsHash: Uint8Array;\n\n  /**\n   * The domain separator prefix used when hashing.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly domainSeparator = \"APTOS::Groth16ProofAndStatement\";\n\n  constructor(proof: Groth16Zkp, publicInputsHash: HexInput | bigint) {\n    super();\n    this.proof = proof;\n    this.publicInputsHash =\n      typeof publicInputsHash === \"bigint\"\n        ? bigIntToBytesLE(publicInputsHash, 32)\n        : Hex.fromHexInput(publicInputsHash).toUint8Array();\n    if (this.publicInputsHash.length !== 32) {\n      throw new Error(\"Invalid public inputs hash\");\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    this.proof.serialize(serializer);\n    serializer.serializeFixedBytes(this.publicInputsHash);\n  }\n\n  static deserialize(deserializer: Deserializer): Groth16ProofAndStatement {\n    return new Groth16ProofAndStatement(Groth16Zkp.deserialize(deserializer), deserializer.deserializeFixedBytes(32));\n  }\n\n  hash(): Uint8Array {\n    return generateSigningMessage(this.bcsToBytes(), this.domainSeparator);\n  }\n}\n\n/**\n * Represents a container for different types of zero-knowledge proofs.\n *\n * @extends Serializable\n * @group Implementation\n * @category Serialization\n */\nexport class ZkProof extends Serializable {\n  public readonly proof: Proof;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly variant: ZkpVariant;\n\n  constructor(proof: Proof, variant: ZkpVariant) {\n    super();\n    this.proof = proof;\n    this.variant = variant;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.proof.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ZkProof {\n    const variant = deserializer.deserializeUleb128AsU32();\n    switch (variant) {\n      case ZkpVariant.Groth16:\n        return new ZkProof(Groth16Zkp.deserialize(deserializer), variant);\n      default:\n        throw new Error(`Unknown variant index for ZkProof: ${variant}`);\n    }\n  }\n}\n\n/**\n * Represents a zero-knowledge signature, encapsulating the proof and its associated metadata.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class ZeroKnowledgeSig extends Signature {\n  /**\n   * The proof\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly proof: ZkProof;\n\n  /**\n   * The max lifespan of the proof\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly expHorizonSecs: number;\n\n  /**\n   * A key value pair on the JWT token that can be specified on the signature which would reveal the value on chain.\n   * Can be used to assert identity or other attributes.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly extraField?: string;\n\n  /**\n   * The 'aud' value of the recovery service which is set when recovering an account.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly overrideAudVal?: string;\n\n  /**\n   * The training wheels signature\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly trainingWheelsSignature?: EphemeralSignature;\n\n  constructor(args: {\n    proof: ZkProof;\n    expHorizonSecs: number;\n    extraField?: string;\n    overrideAudVal?: string;\n    trainingWheelsSignature?: EphemeralSignature;\n  }) {\n    super();\n    const { proof, expHorizonSecs, trainingWheelsSignature, extraField, overrideAudVal } = args;\n    this.proof = proof;\n    this.expHorizonSecs = expHorizonSecs;\n    this.trainingWheelsSignature = trainingWheelsSignature;\n    this.extraField = extraField;\n    this.overrideAudVal = overrideAudVal;\n  }\n\n  /**\n   * Deserialize a ZeroKnowledgeSig object from its BCS serialization in bytes.\n   *\n   * @param bytes - The bytes representing the serialized ZeroKnowledgeSig.\n   * @returns ZeroKnowledgeSig - The deserialized ZeroKnowledgeSig object.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromBytes(bytes: Uint8Array): ZeroKnowledgeSig {\n    return ZeroKnowledgeSig.deserialize(new Deserializer(bytes));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.proof.serialize(serializer);\n    serializer.serializeU64(this.expHorizonSecs);\n    serializer.serializeOption(this.extraField);\n    serializer.serializeOption(this.overrideAudVal);\n    serializer.serializeOption(this.trainingWheelsSignature);\n  }\n\n  static deserialize(deserializer: Deserializer): ZeroKnowledgeSig {\n    const proof = ZkProof.deserialize(deserializer);\n    const expHorizonSecs = Number(deserializer.deserializeU64());\n    const extraField = deserializer.deserializeOption(\"string\");\n    const overrideAudVal = deserializer.deserializeOption(\"string\");\n    const trainingWheelsSignature = deserializer.deserializeOption(EphemeralSignature);\n    return new ZeroKnowledgeSig({ proof, expHorizonSecs, trainingWheelsSignature, extraField, overrideAudVal });\n  }\n}\n\n/**\n * Represents the on-chain configuration for how Keyless accounts operate.\n *\n * @remarks\n * This class encapsulates the verification key and the maximum lifespan of ephemeral key pairs,\n * which are essential for the functionality of Keyless accounts.\n * @group Implementation\n * @category Serialization\n */\nexport class KeylessConfiguration {\n  /**\n   * The verification key used to verify Groth16 proofs on chain\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly verificationKey: Groth16VerificationKey;\n\n  /**\n   * The maximum lifespan of an ephemeral key pair.  This is configured on chain.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxExpHorizonSecs: number;\n\n  /**\n   * The public key of the training wheels account.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly trainingWheelsPubkey?: EphemeralPublicKey;\n\n  /**\n   * The maximum number of bytes that can be used for the extra field.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxExtraFieldBytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the JWT header.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxJwtHeaderB64Bytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the issuer value.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxIssValBytes: number;\n\n  /**\n   * The maximum number of bytes that can be used for the committed ephemeral public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly maxCommitedEpkBytes: number;\n\n  constructor(args: {\n    verificationKey: Groth16VerificationKey;\n    trainingWheelsPubkey?: HexInput;\n    maxExpHorizonSecs?: number;\n    maxExtraFieldBytes?: number;\n    maxJwtHeaderB64Bytes?: number;\n    maxIssValBytes?: number;\n    maxCommitedEpkBytes?: number;\n  }) {\n    const {\n      verificationKey,\n      trainingWheelsPubkey,\n      maxExpHorizonSecs = EPK_HORIZON_SECS,\n      maxExtraFieldBytes = MAX_EXTRA_FIELD_BYTES,\n      maxJwtHeaderB64Bytes = MAX_JWT_HEADER_B64_BYTES,\n      maxIssValBytes = MAX_ISS_VAL_BYTES,\n      maxCommitedEpkBytes = MAX_COMMITED_EPK_BYTES,\n    } = args;\n\n    this.verificationKey = verificationKey;\n    this.maxExpHorizonSecs = maxExpHorizonSecs;\n    if (trainingWheelsPubkey) {\n      this.trainingWheelsPubkey = new EphemeralPublicKey(new Ed25519PublicKey(trainingWheelsPubkey));\n    }\n    this.maxExtraFieldBytes = maxExtraFieldBytes;\n    this.maxJwtHeaderB64Bytes = maxJwtHeaderB64Bytes;\n    this.maxIssValBytes = maxIssValBytes;\n    this.maxCommitedEpkBytes = maxCommitedEpkBytes;\n  }\n\n  /**\n   * Creates a new KeylessConfiguration instance from a Groth16VerificationKeyResponse and a KeylessConfigurationResponse.\n   * @param res - The Groth16VerificationKeyResponse object containing the verification key data.\n   * @param config - The KeylessConfigurationResponse object containing the configuration data.\n   * @returns A new KeylessConfiguration instance.\n   */\n  static create(res: Groth16VerificationKeyResponse, config: KeylessConfigurationResponse): KeylessConfiguration {\n    return new KeylessConfiguration({\n      verificationKey: new Groth16VerificationKey({\n        alphaG1: res.alpha_g1,\n        betaG2: res.beta_g2,\n        deltaG2: res.delta_g2,\n        gammaAbcG1: res.gamma_abc_g1,\n        gammaG2: res.gamma_g2,\n      }),\n      maxExpHorizonSecs: Number(config.max_exp_horizon_secs),\n      trainingWheelsPubkey: config.training_wheels_pubkey.vec[0],\n      maxExtraFieldBytes: config.max_extra_field_bytes,\n      maxJwtHeaderB64Bytes: config.max_jwt_header_b64_bytes,\n      maxIssValBytes: config.max_iss_val_bytes,\n      maxCommitedEpkBytes: config.max_commited_epk_bytes,\n    });\n  }\n}\n\n/**\n * Represents the verification key stored on-chain used to verify Groth16 proofs.\n * @group Implementation\n * @category Serialization\n */\nexport class Groth16VerificationKey {\n  // The docstrings below are borrowed from ark-groth16\n\n  /**\n   * The `alpha * G`, where `G` is the generator of G1\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly alphaG1: G1Bytes;\n\n  /**\n   * The `alpha * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly betaG2: G2Bytes;\n\n  /**\n   * The `delta * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly deltaG2: G2Bytes;\n\n  /**\n   * The `gamma^{-1} * (beta * a_i + alpha * b_i + c_i) * H`, where H is the generator of G1\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly gammaAbcG1: [G1Bytes, G1Bytes];\n\n  /**\n   * The `gamma * H`, where `H` is the generator of G2\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly gammaG2: G2Bytes;\n\n  constructor(args: {\n    alphaG1: HexInput;\n    betaG2: HexInput;\n    deltaG2: HexInput;\n    gammaAbcG1: [HexInput, HexInput];\n    gammaG2: HexInput;\n  }) {\n    const { alphaG1, betaG2, deltaG2, gammaAbcG1, gammaG2 } = args;\n    this.alphaG1 = new G1Bytes(alphaG1);\n    this.betaG2 = new G2Bytes(betaG2);\n    this.deltaG2 = new G2Bytes(deltaG2);\n    this.gammaAbcG1 = [new G1Bytes(gammaAbcG1[0]), new G1Bytes(gammaAbcG1[1])];\n    this.gammaG2 = new G2Bytes(gammaG2);\n  }\n\n  /**\n   * Calculates the hash of the serialized form of the verification key.\n   * This is useful for comparing verification keys or using them as unique identifiers.\n   *\n   * @returns The SHA3-256 hash of the serialized verification key as a Uint8Array\n   */\n  public hash(): Uint8Array {\n    const serializer = new Serializer();\n    this.serialize(serializer);\n    return sha3_256.create().update(serializer.toUint8Array()).digest();\n  }\n\n  serialize(serializer: Serializer): void {\n    this.alphaG1.serialize(serializer);\n    this.betaG2.serialize(serializer);\n    this.deltaG2.serialize(serializer);\n    this.gammaAbcG1[0].serialize(serializer);\n    this.gammaAbcG1[1].serialize(serializer);\n    this.gammaG2.serialize(serializer);\n  }\n\n  /**\n   * Converts a Groth16VerificationKeyResponse object into a Groth16VerificationKey instance.\n   *\n   * @param res - The Groth16VerificationKeyResponse object containing the verification key data.\n   * @param res.alpha_g1 - The alpha G1 value from the response.\n   * @param res.beta_g2 - The beta G2 value from the response.\n   * @param res.delta_g2 - The delta G2 value from the response.\n   * @param res.gamma_abc_g1 - The gamma ABC G1 value from the response.\n   * @param res.gamma_g2 - The gamma G2 value from the response.\n   * @returns A Groth16VerificationKey instance constructed from the provided response data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static fromGroth16VerificationKeyResponse(res: Groth16VerificationKeyResponse): Groth16VerificationKey {\n    return new Groth16VerificationKey({\n      alphaG1: res.alpha_g1,\n      betaG2: res.beta_g2,\n      deltaG2: res.delta_g2,\n      gammaAbcG1: res.gamma_abc_g1,\n      gammaG2: res.gamma_g2,\n    });\n  }\n\n  /**\n   * Verifies a Groth16 proof using the verification key given the public inputs hash and the proof.\n   *\n   * @param args.publicInputsHash The public inputs hash\n   * @param args.groth16Proof The Groth16 proof\n   * @returns true if the proof is valid\n   */\n  verifyProof(args: { publicInputsHash: bigint; groth16Proof: Groth16Zkp }): boolean {\n    const { publicInputsHash, groth16Proof } = args;\n\n    try {\n      // Get proof points\n      const proofA = groth16Proof.a.toProjectivePoint();\n      const proofB = groth16Proof.b.toProjectivePoint();\n      const proofC = groth16Proof.c.toProjectivePoint();\n\n      // Get verification key points\n      const vkAlpha1 = this.alphaG1.toProjectivePoint();\n      const vkBeta2 = this.betaG2.toProjectivePoint();\n      const vkGamma2 = this.gammaG2.toProjectivePoint();\n      const vkDelta2 = this.deltaG2.toProjectivePoint();\n      const vkIC = this.gammaAbcG1.map((g1) => g1.toProjectivePoint());\n\n      const { Fp12 } = bn254.fields;\n\n      // Check that the following pairing equation holds:\n      // e(A_1, B_2) = e(\\alpha_1, \\beta_2) + e(\\ic_0 + public_inputs_hash \\ic_1, \\gamma_2) + e(C_1, \\delta_2)\n      // Where A_1, B_2, C_1 are the proof points and \\alpha_1, \\beta_2, \\gamma_2, \\delta_2, \\ic_0, \\ic_1\n      // are the verification key points\n\n      // \\ic_0 + public_inputs_hash \\ic_1\n      let accum = vkIC[0].add(vkIC[1].multiply(publicInputsHash));\n      // e(\\ic_0 + public_inputs_hash \\ic_1, \\gamma_2)\n      const pairingAccumGamma = bn254.pairing(accum, vkGamma2);\n      // e(A_1, B_2)\n      const pairingAB = bn254.pairing(proofA, proofB);\n      // e(\\alpha_1, \\beta_2)\n      const pairingAlphaBeta = bn254.pairing(vkAlpha1, vkBeta2);\n      // e(C_1, \\delta_2)\n      const pairingCDelta = bn254.pairing(proofC, vkDelta2);\n      // Get the result of the right hand side of the pairing equation\n      const product = Fp12.mul(pairingAlphaBeta, Fp12.mul(pairingAccumGamma, pairingCDelta));\n      // Check if the left hand side equals the right hand side\n      return Fp12.eql(pairingAB, product);\n    } catch (error) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n        error,\n        details: \"Error encountered when checking zero knowledge relation\",\n      });\n    }\n  }\n\n  /**\n   * Converts the verification key to a JSON format compatible with snarkjs groth16.verify\n   *\n   * @returns An object containing the verification key in snarkjs format\n   * @group Implementation\n   * @category Serialization\n   */\n  toSnarkJsJson() {\n    return {\n      protocol: \"groth16\",\n      curve: \"bn128\",\n      nPublic: 1,\n      vk_alpha_1: this.alphaG1.toArray(),\n      vk_beta_2: this.betaG2.toArray(),\n      vk_gamma_2: this.gammaG2.toArray(),\n      vk_delta_2: this.deltaG2.toArray(),\n      IC: this.gammaAbcG1.map((g1) => g1.toArray()),\n    };\n  }\n}\n\n/**\n * Retrieves the configuration parameters for Keyless Accounts on the blockchain, including the verifying key and the maximum\n * expiry horizon.\n *\n * @param args - The arguments for retrieving the keyless configuration.\n * @param args.aptosConfig - The Aptos configuration object containing network details.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, the latest version will be used.\n * @returns KeylessConfiguration - The configuration object containing the verifying key and maximum expiry horizon.\n * @group Implementation\n * @category Serialization\n */\nexport async function getKeylessConfig(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<KeylessConfiguration> {\n  const { aptosConfig } = args;\n  try {\n    return await memoizeAsync(\n      async () => {\n        const [config, vk] = await Promise.all([\n          getKeylessConfigurationResource(args),\n          getGroth16VerificationKeyResource(args),\n        ]);\n        return KeylessConfiguration.create(vk, config);\n      },\n      `keyless-configuration-${aptosConfig.network}`,\n      1000 * 60 * 5, // 5 minutes\n    )();\n  } catch (error) {\n    if (error instanceof KeylessError) {\n      throw error;\n    }\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_OTHER,\n      error,\n    });\n  }\n}\n\n/**\n * Parses a JWT and returns the 'iss', 'aud', and 'uid' values.\n *\n * @param args - The arguments for parsing the JWT.\n * @param args.jwt - The JWT to parse.\n * @param args.uidKey - The key to use for the 'uid' value; defaults to 'sub'.\n * @returns The 'iss', 'aud', and 'uid' values from the JWT.\n */\nexport function getIssAudAndUidVal(args: { jwt: string; uidKey?: string }): {\n  iss: string;\n  aud: string;\n  uidVal: string;\n} {\n  const { jwt, uidKey = \"sub\" } = args;\n  let jwtPayload: JwtPayload & { [key: string]: string };\n  try {\n    jwtPayload = jwtDecode<JwtPayload & { [key: string]: string }>(jwt);\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: `Failed to parse JWT - ${getErrorMessage(error)}`,\n    });\n  }\n  if (typeof jwtPayload.iss !== \"string\") {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: \"JWT is missing 'iss' in the payload. This should never happen.\",\n    });\n  }\n  if (typeof jwtPayload.aud !== \"string\") {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWT_PARSING_ERROR,\n      details: \"JWT is missing 'aud' in the payload or 'aud' is an array of values.\",\n    });\n  }\n  const uidVal = jwtPayload[uidKey];\n  return { iss: jwtPayload.iss, aud: jwtPayload.aud, uidVal };\n}\n\n/**\n * Retrieves the KeylessConfiguration set on chain.\n *\n * @param args - The arguments for retrieving the configuration.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n * @returns KeylessConfigurationResponse - The response containing the keyless configuration data.\n * @group Implementation\n * @category Serialization\n */\nasync function getKeylessConfigurationResource(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<KeylessConfigurationResponse> {\n  const { aptosConfig, options } = args;\n  const resourceType = \"0x1::keyless_account::Configuration\";\n  try {\n    const { data } = await getAptosFullNode<{}, MoveResource<KeylessConfigurationResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessConfigurationResource\",\n      path: `accounts/${AccountAddress.from(\"0x1\").toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    return data.data;\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_CONFIG_LOOKUP_ERROR,\n      error,\n    });\n  }\n}\n\n/**\n * Retrieves the Groth16VerificationKey set on the blockchain.\n *\n * @param args - The arguments for retrieving the verification key.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n * @returns Groth16VerificationKeyResponse - The response containing the Groth16 verification key data.\n * @group Implementation\n * @category Serialization\n */\nasync function getGroth16VerificationKeyResource(args: {\n  aptosConfig: AptosConfig;\n  options?: LedgerVersionArg;\n}): Promise<Groth16VerificationKeyResponse> {\n  const { aptosConfig, options } = args;\n  const resourceType = \"0x1::keyless_account::Groth16VerificationKey\";\n  try {\n    const { data } = await getAptosFullNode<{}, MoveResource<Groth16VerificationKeyResponse>>({\n      aptosConfig,\n      originMethod: \"getGroth16VerificationKeyResource\",\n      path: `accounts/${AccountAddress.from(\"0x1\").toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    return data.data;\n  } catch (error) {\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.FULL_NODE_VERIFICATION_KEY_LOOKUP_ERROR,\n      error,\n    });\n  }\n}\n\nexport async function getKeylessJWKs(args: {\n  aptosConfig: AptosConfig;\n  jwkAddr?: AccountAddressInput;\n  options?: LedgerVersionArg;\n}): Promise<Map<string, MoveJWK[]>> {\n  const { aptosConfig, jwkAddr, options } = args;\n  let resource: MoveResource<PatchedJWKsResponse>;\n  if (!jwkAddr) {\n    const resourceType = \"0x1::jwks::PatchedJWKs\";\n    const { data } = await getAptosFullNode<{}, MoveResource<PatchedJWKsResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessJWKs\",\n      path: `accounts/0x1/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    resource = data;\n  } else {\n    const resourceType = \"0x1::jwks::FederatedJWKs\";\n    const { data } = await getAptosFullNode<{}, MoveResource<PatchedJWKsResponse>>({\n      aptosConfig,\n      originMethod: \"getKeylessJWKs\",\n      path: `accounts/${AccountAddress.from(jwkAddr).toString()}/resource/${resourceType}`,\n      params: { ledger_version: options?.ledgerVersion },\n    });\n    resource = data;\n  }\n\n  // Create a map of issuer to JWK arrays\n  const jwkMap = new Map<string, MoveJWK[]>();\n  for (const entry of resource.data.jwks.entries) {\n    const jwks: MoveJWK[] = [];\n    for (const jwkStruct of entry.jwks) {\n      const { data: jwkData } = jwkStruct.variant;\n      const deserializer = new Deserializer(Hex.fromHexInput(jwkData).toUint8Array());\n      const jwk = MoveJWK.deserialize(deserializer);\n      jwks.push(jwk);\n    }\n    jwkMap.set(hexToAsciiString(entry.issuer), jwks);\n  }\n\n  return jwkMap;\n}\n\nexport class MoveJWK extends Serializable {\n  public kid: string;\n\n  public kty: string;\n\n  public alg: string;\n\n  public e: string;\n\n  public n: string;\n\n  constructor(args: { kid: string; kty: string; alg: string; e: string; n: string }) {\n    super();\n    const { kid, kty, alg, e, n } = args;\n    this.kid = kid;\n    this.kty = kty;\n    this.alg = alg;\n    this.e = e;\n    this.n = n;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.kid);\n    serializer.serializeStr(this.kty);\n    serializer.serializeStr(this.alg);\n    serializer.serializeStr(this.e);\n    serializer.serializeStr(this.n);\n  }\n\n  static fromMoveStruct(struct: MoveAnyStruct): MoveJWK {\n    const { data } = struct.variant;\n    const deserializer = new Deserializer(Hex.fromHexInput(data).toUint8Array());\n    return MoveJWK.deserialize(deserializer);\n  }\n\n  toScalar(): bigint {\n    if (this.alg !== \"RS256\") {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_VERIFICATION_FAILED,\n        details:\n          \"Failed to convert JWK to scalar when calculating the public inputs hash. Only RSA 256 is supported currently\",\n      });\n    }\n    const uint8Array = base64UrlToBytes(this.n);\n    const chunks = chunkInto24Bytes(uint8Array.reverse());\n    const scalars = chunks.map((chunk) => bytesToBigIntLE(chunk));\n    scalars.push(256n); // Add the modulus size\n    return poseidonHash(scalars);\n  }\n\n  static deserialize(deserializer: Deserializer): MoveJWK {\n    const kid = deserializer.deserializeStr();\n    const kty = deserializer.deserializeStr();\n    const alg = deserializer.deserializeStr();\n    const e = deserializer.deserializeStr();\n    const n = deserializer.deserializeStr();\n    return new MoveJWK({ kid, kty, alg, n, e });\n  }\n}\n\nfunction chunkInto24Bytes(data: Uint8Array): Uint8Array[] {\n  const chunks: Uint8Array[] = [];\n  for (let i = 0; i < data.length; i += 24) {\n    const chunk = data.slice(i, Math.min(i + 24, data.length));\n    // Pad last chunk with zeros if needed\n    if (chunk.length < 24) {\n      const paddedChunk = new Uint8Array(24);\n      paddedChunk.set(chunk);\n      chunks.push(paddedChunk);\n    } else {\n      chunks.push(chunk);\n    }\n  }\n  return chunks;\n}\n\ninterface JwtHeader {\n  kid: string; // Key ID\n}\n/**\n * Safely parses the JWT header.\n * @param jwtHeader The JWT header string\n * @returns Parsed JWT header as an object.\n */\nexport function parseJwtHeader(jwtHeader: string): JwtHeader {\n  try {\n    const header = JSON.parse(jwtHeader);\n    if (header.kid === undefined) {\n      throw new Error(\"JWT header missing kid\");\n    }\n    return header;\n  } catch (error) {\n    throw new Error(\"Failed to parse JWT header.\");\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { HexInput, AnyPublicKeyVariant, SigningScheme } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountAddress, AccountAddressInput } from \"../accountAddress\";\nimport {\n  KeylessConfiguration,\n  KeylessPublicKey,\n  KeylessSignature,\n  MoveJWK,\n  verifyKeylessSignature,\n  verifyKeylessSignatureWithJwkAndConfig,\n} from \"./keyless\";\nimport { AptosConfig } from \"../../api\";\nimport { Signature } from \"..\";\n\n/**\n * Represents the FederatedKeylessPublicKey public key\n *\n * These keys use an on-chain address as a source of truth for the JWK used to verify signatures.\n *\n * FederatedKeylessPublicKey authentication key is represented in the SDK as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class FederatedKeylessPublicKey extends AccountPublicKey {\n  /**\n   * The address that contains the JWK set to be used for verification.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly jwkAddress: AccountAddress;\n\n  /**\n   * The inner public key which contains the standard Keyless public key.\n   * @group Implementation\n   * @category Serialization\n   */\n  readonly keylessPublicKey: KeylessPublicKey;\n\n  constructor(jwkAddress: AccountAddressInput, keylessPublicKey: KeylessPublicKey) {\n    super();\n    this.jwkAddress = AccountAddress.from(jwkAddress);\n    this.keylessPublicKey = keylessPublicKey;\n  }\n\n  /**\n   * Get the authentication key for the federated keyless public key\n   *\n   * @returns AuthenticationKey\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(AnyPublicKeyVariant.FederatedKeyless);\n    serializer.serializeFixedBytes(this.bcsToBytes());\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: SigningScheme.SingleKey,\n      input: serializer.toUint8Array(),\n    });\n  }\n\n  /**\n   * Verifies a signed data with a public key\n   *\n   * @param args.message message\n   * @param args.signature The signature\n   * @param args.jwk - The JWK to use for verification.\n   * @param args.keylessConfig - The keyless configuration to use for verification.\n   * @returns true if the signature is valid\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: Signature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    try {\n      verifyKeylessSignatureWithJwkAndConfig({ ...args, publicKey: this });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    this.jwkAddress.serialize(serializer);\n    this.keylessPublicKey.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): FederatedKeylessPublicKey {\n    const jwkAddress = AccountAddress.deserialize(deserializer);\n    const keylessPublicKey = KeylessPublicKey.deserialize(deserializer);\n    return new FederatedKeylessPublicKey(jwkAddress, keylessPublicKey);\n  }\n\n  static isPublicKey(publicKey: PublicKey): publicKey is FederatedKeylessPublicKey {\n    return publicKey instanceof FederatedKeylessPublicKey;\n  }\n\n  /**\n   * Verifies a keyless signature for a given message.  It will fetch the keyless configuration and the JWK to\n   * use for verification from the appropriate network as defined by the aptosConfig.\n   *\n   * @param args.aptosConfig The aptos config to use for fetching the keyless configuration.\n   * @param args.message The message to verify the signature against.\n   * @param args.signature The signature to verify.\n   * @param args.options.throwErrorWithReason Whether to throw an error with the reason for the failure instead of returning false.\n   * @returns true if the signature is valid\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: KeylessSignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return verifyKeylessSignature({\n      ...args,\n      publicKey: this,\n    });\n  }\n\n  /**\n   * Creates a FederatedKeylessPublicKey from the JWT components plus pepper\n   *\n   * @param args.iss the iss of the identity\n   * @param args.uidKey the key to use to get the uidVal in the JWT token\n   * @param args.uidVal the value of the uidKey in the JWT token\n   * @param args.aud the client ID of the application\n   * @param args.pepper The pepper used to maintain privacy of the account\n   * @returns FederatedKeylessPublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  static create(args: {\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n  }): FederatedKeylessPublicKey {\n    return new FederatedKeylessPublicKey(args.jwkAddress, KeylessPublicKey.create(args));\n  }\n\n  static fromJwtAndPepper(args: {\n    jwt: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n  }): FederatedKeylessPublicKey {\n    return new FederatedKeylessPublicKey(args.jwkAddress, KeylessPublicKey.fromJwtAndPepper(args));\n  }\n\n  static isInstance(publicKey: PublicKey) {\n    return (\n      \"jwkAddress\" in publicKey &&\n      publicKey.jwkAddress instanceof AccountAddress &&\n      \"keylessPublicKey\" in publicKey &&\n      publicKey.keylessPublicKey instanceof KeylessPublicKey\n    );\n  }\n}\n","import { Deserializer, Serializer } from \"../../bcs\";\nimport {\n  AnyPublicKeyVariant,\n  AnySignatureVariant,\n  SigningScheme as AuthenticationKeyScheme,\n  HexInput,\n} from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AccountPublicKey, PublicKey } from \"./publicKey\";\nimport { Secp256k1PrivateKey, Secp256k1PublicKey, Secp256k1Signature } from \"./secp256k1\";\nimport { KeylessPublicKey, KeylessSignature } from \"./keyless\";\nimport { Signature } from \"./signature\";\nimport { FederatedKeylessPublicKey } from \"./federatedKeyless\";\nimport { AptosConfig } from \"../../api\";\n\nexport type PrivateKeyInput = Ed25519PrivateKey | Secp256k1PrivateKey;\n\n/**\n * Represents any public key supported by Aptos.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Any unified authentication key is represented in the SDK as `AnyPublicKey`.\n * @group Implementation\n * @category Serialization\n */\nexport class AnyPublicKey extends AccountPublicKey {\n  /**\n   * Reference to the inner public key\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKey: PublicKey;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly variant: AnyPublicKeyVariant;\n\n  // region Constructors\n\n  /**\n   * Creates an instance of the signature class based on the provided signature type.\n   * This allows for the handling of different signature variants such as Ed25519, Secp256k1, and Keyless.\n   *\n   * @param publicKey - The publicKey object which determines the variant to be used.\n   * @throws Error if the provided signature type is unsupported.\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(publicKey: PublicKey) {\n    super();\n    this.publicKey = publicKey;\n    if (publicKey instanceof Ed25519PublicKey) {\n      this.variant = AnyPublicKeyVariant.Ed25519;\n    } else if (publicKey instanceof Secp256k1PublicKey) {\n      this.variant = AnyPublicKeyVariant.Secp256k1;\n    } else if (publicKey instanceof KeylessPublicKey) {\n      this.variant = AnyPublicKeyVariant.Keyless;\n    } else if (publicKey instanceof FederatedKeylessPublicKey) {\n      this.variant = AnyPublicKeyVariant.FederatedKeyless;\n    } else {\n      throw new Error(\"Unsupported public key type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of AnySignature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: AnySignature }): boolean {\n    const { message, signature } = args;\n    if (this.publicKey instanceof KeylessPublicKey) {\n      throw new Error(\"Use verifySignatureAsync to verify Keyless signatures\");\n    }\n    return this.publicKey.verifySignature({\n      message,\n      signature: signature.signature,\n    });\n  }\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by confirming that the signature is valid.\n   *\n   * @param args - The arguments for signature verification.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify, which must be an instance of AnySignature.\n   * @returns A boolean indicating whether the signature is valid for the given message.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    if (!(args.signature instanceof AnySignature)) {\n      if (args.options?.throwErrorWithReason) {\n        throw new Error(\"Signature must be an instance of AnySignature\");\n      }\n      return false;\n    }\n    return await this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature.signature,\n    });\n  }\n\n  /**\n   * Generates an authentication key from the current instance's byte representation.\n   * This function is essential for creating a unique identifier for authentication purposes.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.SingleKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Get the signature in bytes (Uint8Array).\n   *\n   * This function is a warning that it will soon return the underlying signature bytes directly.\n   * Use AnySignature.bcsToBytes() instead.\n   *\n   * @returns Uint8Array representation of the signature.\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the current object using the provided serializer.\n   * This function helps in converting the object into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.publicKey.serialize(serializer);\n  }\n\n  /**\n   * Deserializes an AnySignature from the provided deserializer.\n   * This function helps in reconstructing the AnySignature object from its serialized form, allowing for further processing or validation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): AnyPublicKey {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let publicKey: PublicKey;\n    switch (variantIndex) {\n      case AnyPublicKeyVariant.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.Secp256k1:\n        publicKey = Secp256k1PublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.Keyless:\n        publicKey = KeylessPublicKey.deserialize(deserializer);\n        break;\n      case AnyPublicKeyVariant.FederatedKeyless:\n        publicKey = FederatedKeylessPublicKey.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnyPublicKey: ${variantIndex}`);\n    }\n    return new AnyPublicKey(publicKey);\n  }\n  // endregion\n\n  /**\n   * Determines if the provided public key is an instance of AnyPublicKey.\n   *\n   * @param publicKey - The public key to check.\n   * @deprecated Use `instanceof AnyPublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isPublicKey(publicKey: AccountPublicKey): publicKey is AnyPublicKey {\n    return publicKey instanceof AnyPublicKey;\n  }\n\n  /**\n   * Determines if the current public key is an instance of Ed25519PublicKey.\n   *\n   * @deprecated use `publicKey instanceof Ed25519PublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  isEd25519(): boolean {\n    return this.publicKey instanceof Ed25519PublicKey;\n  }\n\n  /**\n   * Checks if the public key is an instance of Secp256k1PublicKey.\n   *\n   * @deprecated use `publicKey instanceof Secp256k1PublicKey` instead.\n   * @group Implementation\n   * @category Serialization\n   */\n  isSecp256k1PublicKey(): boolean {\n    return this.publicKey instanceof Secp256k1PublicKey;\n  }\n\n  /**\n   * Determines if the provided publicKey is an instance of a valid PublicKey object.\n   *\n   * @param publicKey - The publicKey to be checked for validity.\n   * @param publicKey.publicKey - The actual publicKey object that needs to be validated.\n   * @returns True if the signature is a valid instance; otherwise, false.\n   * @group Implementation\n   * @category Serialization\n   */\n  static isInstance(publicKey: PublicKey): publicKey is AnyPublicKey {\n    return \"publicKey\" in publicKey && \"variant\" in publicKey;\n  }\n}\n\n/**\n * Represents a signature that utilizes the SingleKey authentication scheme.\n * This class is designed to encapsulate various types of signatures, which can\n * only be generated by a `SingleKeySigner` due to the shared authentication mechanism.\n *\n * @extends Signature\n * @group Implementation\n * @category Serialization\n */\nexport class AnySignature extends Signature {\n  public readonly signature: Signature;\n\n  /**\n   * Index of the underlying enum variant\n   * @group Implementation\n   * @category Serialization\n   */\n  private readonly variant: AnySignatureVariant;\n\n  // region Constructors\n\n  constructor(signature: Signature) {\n    super();\n    this.signature = signature;\n\n    if (signature instanceof Ed25519Signature) {\n      this.variant = AnySignatureVariant.Ed25519;\n    } else if (signature instanceof Secp256k1Signature) {\n      this.variant = AnySignatureVariant.Secp256k1;\n    } else if (signature instanceof KeylessSignature) {\n      this.variant = AnySignatureVariant.Keyless;\n    } else {\n      throw new Error(\"Unsupported signature type\");\n    }\n  }\n\n  // endregion\n\n  // region AccountSignature\n\n  toUint8Array(): Uint8Array {\n    // TODO: keep this warning around for a bit, and eventually change this to return `this.signature.toUint8Array()`.\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"[Aptos SDK] Calls to AnySignature.toUint8Array() will soon return the underlying signature bytes. \" +\n        \"Use AnySignature.bcsToBytes() instead.\",\n    );\n    return this.bcsToBytes();\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.variant);\n    this.signature.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): AnySignature {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let signature: Signature;\n    switch (variantIndex) {\n      case AnySignatureVariant.Ed25519:\n        signature = Ed25519Signature.deserialize(deserializer);\n        break;\n      case AnySignatureVariant.Secp256k1:\n        signature = Secp256k1Signature.deserialize(deserializer);\n        break;\n      case AnySignatureVariant.Keyless:\n        signature = KeylessSignature.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for AnySignature: ${variantIndex}`);\n    }\n    return new AnySignature(signature);\n  }\n\n  // endregion\n\n  static isInstance(signature: Signature): signature is AnySignature {\n    return (\n      \"signature\" in signature &&\n      typeof signature.signature === \"object\" &&\n      signature.signature !== null &&\n      \"toUint8Array\" in signature.signature\n    );\n  }\n}\n","import { SigningScheme as AuthenticationKeyScheme, HexInput } from \"../../types\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { AccountPublicKey, PublicKey, VerifySignatureAsyncArgs } from \"./publicKey\";\nimport { Signature } from \"./signature\";\nimport { AnyPublicKey, AnySignature } from \"./singleKey\";\nimport { AptosConfig } from \"../../api\";\n\n/**\n * Counts the number of set bits (1s) in a byte.\n * This function can help you determine the population count of a given byte value.\n *\n * @param byte - The byte value for which to count the number of set bits.\n * @group Implementation\n * @category Serialization\n */\n/* eslint-disable no-bitwise */\nfunction bitCount(byte: number) {\n  let n = byte;\n  n -= (n >> 1) & 0x55555555;\n  n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n  return (((n + (n >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n/* eslint-enable no-bitwise */\n\nexport abstract class AbstractMultiKey extends AccountPublicKey {\n  publicKeys: PublicKey[];\n\n  constructor(args: { publicKeys: PublicKey[] }) {\n    super();\n    this.publicKeys = args.publicKeys;\n  }\n\n  /**\n   * Create a bitmap that holds the mapping from the original public keys\n   * to the signatures passed in\n   *\n   * @param args.bits array of the index mapping to the matching public keys\n   * @returns Uint8array bit map\n   * @group Implementation\n   * @category Serialization\n   */\n  createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, idx: number) => {\n      if (idx + 1 > this.publicKeys.length) {\n        throw new Error(`Signature index ${idx + 1} is out of public keys range, ${this.publicKeys.length}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(`Duplicate bit ${bit} detected.`);\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   * @category Serialization\n   */\n  getIndex(publicKey: PublicKey): number {\n    const index = this.publicKeys.findIndex((pk) => pk.toString() === publicKey.toString());\n\n    if (index !== -1) {\n      return index;\n    }\n    throw new Error(`Public key ${publicKey} not found in multi key set ${this.publicKeys}`);\n  }\n}\n\n/**\n * Represents a multi-key authentication scheme for accounts, allowing multiple public keys\n * to be associated with a single account. This class enforces a minimum number of valid signatures\n * required to authorize actions, ensuring enhanced security for multi-agent accounts.\n *\n * The public keys of each individual agent can be any type of public key supported by Aptos.\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263), Aptos supports\n * `Legacy` and `Unified` authentication keys.\n * @group Implementation\n * @category Serialization\n */\nexport class MultiKey extends AbstractMultiKey {\n  /**\n   * List of any public keys\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKeys: AnyPublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signaturesRequired: number;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   * This constructor initializes a multi-signature transaction with the provided signatures and bitmap.\n   *\n   * @param args An object containing the parameters for the multi-signature transaction.\n   * @param args.signatures A list of signatures.\n   * @param args.bitmap A bitmap represented as a Uint8Array or an array of numbers, where each bit indicates whether a\n   * corresponding signature is present. A maximum of 32 signatures is supported, and the length of the bitmap must be 4 bytes.\n   *\n   * @throws Error if the number of signatures exceeds the maximum supported, if the bitmap length is incorrect, or if the number\n   * of signatures does not match the bitmap.\n   * @group Implementation\n   * @category Serialization\n   */\n  // region Constructors\n  constructor(args: { publicKeys: Array<PublicKey>; signaturesRequired: number }) {\n    const { publicKeys, signaturesRequired } = args;\n    super({ publicKeys });\n\n    // Validate number of public keys is greater than signature required\n    if (signaturesRequired < 1) {\n      throw new Error(\"The number of required signatures needs to be greater than 0\");\n    }\n\n    // Validate number of public keys is greater than signature required\n    if (publicKeys.length < signaturesRequired) {\n      throw new Error(\n        `Provided ${publicKeys.length} public keys is smaller than the ${signaturesRequired} required signatures`,\n      );\n    }\n\n    // Make sure that all keys are normalized to the SingleKey authentication scheme\n    this.publicKeys = publicKeys.map((publicKey) =>\n      publicKey instanceof AnyPublicKey ? publicKey : new AnyPublicKey(publicKey),\n    );\n\n    this.signaturesRequired = signaturesRequired;\n  }\n\n  // endregion\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by checking if the signature is valid.\n   *\n   * Note: This function will fail if a keyless signature is used.  Use `verifySignatureAsync` instead.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: MultiKeySignature }): boolean {\n    const { message, signature } = args;\n    if (signature.signatures.length !== this.signaturesRequired) {\n      throw new Error(\"The number of signatures does not match the number of required signatures\");\n    }\n    const signerIndices = signature.bitMapToSignerIndices();\n    for (let i = 0; i < signature.signatures.length; i += 1) {\n      const singleSignature = signature.signatures[i];\n      const publicKey = this.publicKeys[signerIndices[i]];\n      if (!publicKey.verifySignature({ message, signature: singleSignature })) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Verifies the provided signature against the given message.\n   * This function helps ensure the integrity and authenticity of the message by checking if the signature is valid.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The Aptos configuration to use\n   * @param args.message - The message that was signed.\n   * @param args.signature - The signature to verify.\n   * @group Implementation\n   * @category Serialization\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    const { signature } = args;\n    try {\n      if (!(signature instanceof MultiKeySignature)) {\n        throw new Error(\"Signature is not a MultiKeySignature\");\n      }\n      if (signature.signatures.length !== this.signaturesRequired) {\n        throw new Error(\"The number of signatures does not match the number of required signatures\");\n      }\n      const signerIndices = signature.bitMapToSignerIndices();\n      for (let i = 0; i < signature.signatures.length; i += 1) {\n        const singleSignature = signature.signatures[i];\n        const publicKey = this.publicKeys[signerIndices[i]];\n        if (!(await publicKey.verifySignatureAsync({ ...args, signature: singleSignature }))) {\n          return false;\n        }\n      }\n      return true;\n    } catch (error) {\n      if (args.options?.throwErrorWithReason) {\n        throw error;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Generates an authentication key based on the current instance's byte representation.\n   * This key can be used for secure authentication processes within the system.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiKey,\n      input: this.toUint8Array(),\n    });\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the object by writing its signatures and bitmap to the provided serializer.\n   * This allows the object to be converted into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.publicKeys);\n    serializer.serializeU8(this.signaturesRequired);\n  }\n\n  /**\n   * Deserializes a MultiKeySignature from the provided deserializer.\n   * This function retrieves the signatures and bitmap necessary for creating a MultiKeySignature object.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): MultiKey {\n    const keys = deserializer.deserializeVector(AnyPublicKey);\n    const signaturesRequired = deserializer.deserializeU8();\n\n    return new MultiKey({ publicKeys: keys, signaturesRequired });\n  }\n\n  // endregion\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   */\n  getIndex(publicKey: PublicKey): number {\n    const anyPublicKey = publicKey instanceof AnyPublicKey ? publicKey : new AnyPublicKey(publicKey);\n    return super.getIndex(anyPublicKey);\n  }\n\n  public static isInstance(value: PublicKey): value is MultiKey {\n    return \"publicKeys\" in value && \"signaturesRequired\" in value;\n  }\n}\n\n/**\n * Represents a multi-signature transaction using Ed25519 signatures.\n * This class allows for the creation and management of a K-of-N multi-signature scheme,\n * where a specified number of signatures are required to authorize a transaction.\n *\n * It includes functionality to validate the number of signatures against a bitmap,\n * which indicates which public keys have signed the transaction.\n * @group Implementation\n * @category Serialization\n */\nexport class MultiKeySignature extends Signature {\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   * @group Implementation\n   * @category Serialization\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * Maximum number of Ed25519 signatures supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static MAX_SIGNATURES_SUPPORTED = MultiKeySignature.BITMAP_LEN * 8;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signatures: AnySignature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { signatures: Array<Signature | AnySignature>; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`The number of signatures cannot be greater than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED}`);\n    }\n\n    // Make sure that all signatures are normalized to the SingleKey authentication scheme\n    this.signatures = signatures.map((signature) =>\n      signature instanceof AnySignature ? signature : new AnySignature(signature),\n    );\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiKeySignature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiKeySignature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiKeySignature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n\n    const nSignatures = this.bitmap.reduce((acc, byte) => acc + bitCount(byte), 0);\n    if (nSignatures !== this.signatures.length) {\n      throw new Error(`Expecting ${nSignatures} signatures from the bitmap, but got ${this.signatures.length}`);\n    }\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   * @group Implementation\n   * @category Serialization\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MultiKeySignature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiKeySignature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Converts the bitmap to an array of signer indices.\n   *\n   * Example:\n   *\n   * bitmap: [0b10001000, 0b01000000, 0b00000000, 0b00000000]\n   * signerIndices: [0, 4, 9]\n   *\n   * @returns An array of signer indices.\n   * @group Implementation\n   * @category Serialization\n   */\n  bitMapToSignerIndices(): number[] {\n    const signerIndices: number[] = [];\n    for (let i = 0; i < this.bitmap.length; i += 1) {\n      const byte = this.bitmap[i];\n      for (let bit = 0; bit < 8; bit += 1) {\n        if ((byte & (128 >> bit)) !== 0) {\n          signerIndices.push(i * 8 + bit);\n        }\n      }\n    }\n    return signerIndices;\n  }\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    // Note: we should not need to serialize the vector length, as it can be derived from the bitmap\n    serializer.serializeVector(this.signatures);\n    serializer.serializeBytes(this.bitmap);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKeySignature {\n    const signatures = deserializer.deserializeVector(AnySignature);\n    const bitmap = deserializer.deserializeBytes();\n    return new MultiKeySignature({ signatures, bitmap });\n  }\n\n  // endregion\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../../api\";\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { SigningScheme as AuthenticationKeyScheme, HexInput } from \"../../types\";\nimport { AuthenticationKey } from \"../authenticationKey\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { AbstractMultiKey } from \"./multiKey\";\nimport { Signature } from \"./signature\";\n\n/**\n * Represents the public key of a K-of-N Ed25519 multi-sig transaction.\n *\n * A K-of-N multi-sig transaction requires at least K out of N authorized signers to sign the transaction\n * for it to be executed. This class encapsulates the logic for managing the public keys and the threshold\n * for valid signatures.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n * @group Implementation\n * @category Serialization\n */\nexport class MultiEd25519PublicKey extends AbstractMultiKey {\n  /**\n   * Maximum number of public keys supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MAX_KEYS = 32;\n\n  /**\n   * Minimum number of public keys needed\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MIN_KEYS = 2;\n\n  /**\n   * Minimum threshold for the number of valid signatures required\n   * @group Implementation\n   * @category Serialization\n   */\n  static readonly MIN_THRESHOLD = 1;\n\n  /**\n   * List of Ed25519 public keys for this LegacyMultiEd25519PublicKey\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly publicKeys: Ed25519PublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly threshold: number;\n\n  /**\n   * Public key for a K-of-N multi-sig transaction. A K-of-N multi-sig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   * @param args - A wrapper to let you choose the param order.\n   * @param args.publicKeys A list of public keys\n   * @param args.threshold At least \"threshold\" signatures must be valid\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { publicKeys: Ed25519PublicKey[]; threshold: number }) {\n    const { publicKeys, threshold } = args;\n    super({ publicKeys });\n\n    // Validate number of public keys\n    if (publicKeys.length > MultiEd25519PublicKey.MAX_KEYS || publicKeys.length < MultiEd25519PublicKey.MIN_KEYS) {\n      throw new Error(\n        `Must have between ${MultiEd25519PublicKey.MIN_KEYS} and ` +\n          `${MultiEd25519PublicKey.MAX_KEYS} public keys, inclusive`,\n      );\n    }\n\n    // Validate threshold: must be between 1 and the number of public keys, inclusive\n    if (threshold < MultiEd25519PublicKey.MIN_THRESHOLD || threshold > publicKeys.length) {\n      throw new Error(\n        `Threshold must be between ${MultiEd25519PublicKey.MIN_THRESHOLD} and ${publicKeys.length}, inclusive`,\n      );\n    }\n\n    this.publicKeys = publicKeys;\n    this.threshold = threshold;\n  }\n\n  // region AccountPublicKey\n\n  /**\n   * Verifies a multi-signature against a given message.\n   * This function ensures that the provided signatures meet the required threshold and are valid for the given message.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The message that was signed.\n   * @param args.signature - The multi-signature containing multiple signatures and a bitmap indicating which signatures are valid.\n   * @returns True if the signature is valid; otherwise, false.\n   * @throws Error if the bitmap and signatures length mismatch or if there are not enough valid signatures.\n   * @group Implementation\n   * @category Serialization\n   */\n  verifySignature(args: { message: HexInput; signature: Signature }): boolean {\n    const { message, signature } = args;\n    if (!(signature instanceof MultiEd25519Signature)) {\n      return false;\n    }\n\n    const indices: number[] = [];\n    for (let i = 0; i < 4; i += 1) {\n      for (let j = 0; j < 8; j += 1) {\n        // eslint-disable-next-line no-bitwise\n        const bitIsSet = (signature.bitmap[i] & (1 << (7 - j))) !== 0;\n        if (bitIsSet) {\n          const index = i * 8 + j;\n          indices.push(index);\n        }\n      }\n    }\n\n    if (indices.length !== signature.signatures.length) {\n      throw new Error(\"Bitmap and signatures length mismatch\");\n    }\n\n    if (indices.length < this.threshold) {\n      throw new Error(\"Not enough signatures\");\n    }\n\n    for (let i = 0; i < indices.length; i += 1) {\n      const publicKey = this.publicKeys[indices[i]];\n      if (!publicKey.verifySignature({ message, signature: signature.signatures[i] })) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.verifySignature(args);\n  }\n\n  /**\n   * Generates an authentication key based on the current instance's byte representation.\n   * This function is essential for creating a secure authentication key that can be used for various cryptographic operations.\n   *\n   * @returns {AuthenticationKey} The generated authentication key.\n   * @group Implementation\n   * @category Serialization\n   */\n  authKey(): AuthenticationKey {\n    return AuthenticationKey.fromSchemeAndBytes({\n      scheme: AuthenticationKeyScheme.MultiEd25519,\n      input: this.toUint8Array(),\n    });\n  }\n\n  /**\n   * Converts a PublicKeys into Uint8Array (bytes) with: bytes = p1_bytes | ... | pn_bytes | threshold\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.publicKeys.length * Ed25519PublicKey.LENGTH + 1);\n    this.publicKeys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.publicKeys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  /**\n   * Serializes the current instance into bytes using the provided serializer.\n   * This allows for the conversion of the instance's data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer used to convert the instance into bytes.\n   * @group Implementation\n   * @category Serialization\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  /**\n   * Deserializes a MultiEd25519Signature from the provided deserializer.\n   * This function helps in reconstructing a MultiEd25519Signature object from its serialized byte representation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Serialization\n   */\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Ed25519PublicKey[] = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey({ publicKeys: keys, threshold });\n  }\n\n  // endregion\n\n  /**\n   * Get the index of the provided public key.\n   *\n   * This function retrieves the index of a specified public key within the MultiKey.\n   * If the public key does not exist, it throws an error.\n   *\n   * @param publicKey - The public key to find the index for.\n   * @returns The corresponding index of the public key, if it exists.\n   * @throws Error - If the public key is not found in the MultiKey.\n   * @group Implementation\n   */\n  getIndex(publicKey: Ed25519PublicKey): number {\n    return super.getIndex(publicKey);\n  }\n}\n\n/**\n * Represents the signature of a K-of-N Ed25519 multi-sig transaction.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n * @group Implementation\n * @category Serialization\n */\nexport class MultiEd25519Signature extends Signature {\n  /**\n   * Maximum number of Ed25519 signatures supported\n   * @group Implementation\n   * @category Serialization\n   */\n  static MAX_SIGNATURES_SUPPORTED = 32;\n\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   * @group Implementation\n   * @category Serialization\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly signatures: Ed25519Signature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   * @group Implementation\n   * @category Serialization\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right.\n   * Alternatively, you can specify an array of bitmap positions.\n   * Valid position should range between 0 and 31.\n   * @see MultiEd25519Signature.createBitmap\n   * @group Implementation\n   * @category Serialization\n   */\n  constructor(args: { signatures: Ed25519Signature[]; bitmap: Uint8Array | number[] }) {\n    super();\n    const { signatures, bitmap } = args;\n\n    if (signatures.length > MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(\n        `The number of signatures cannot be greater than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED}`,\n      );\n    }\n    this.signatures = signatures;\n\n    if (!(bitmap instanceof Uint8Array)) {\n      this.bitmap = MultiEd25519Signature.createBitmap({ bits: bitmap });\n    } else if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    } else {\n      this.bitmap = bitmap;\n    }\n  }\n\n  // region AccountSignature\n\n  /**\n   * Converts a MultiSignature into Uint8Array (bytes) with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   * @group Implementation\n   * @category Serialization\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  // endregion\n\n  // region Serializable\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const signatures: Ed25519Signature[] = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      signatures.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap });\n  }\n\n  // endregion\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions.\n   * This function allows you to set specific bits in a 32-bit long bitmap based on the provided positions.\n   *\n   * @param args The arguments for creating the bitmap.\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0. Valid positions should range between 0 and 31.\n   *\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32 bits long.\n   * @group Implementation\n   * @category Serialization\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, index) => {\n      if (bit >= MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      if (index > 0 && bit <= bits[index - 1]) {\n        throw new Error(\"The bits need to be sorted in ascending order.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Serializer, Deserializer, Serializable } from \"../../bcs\";\nimport { AnyPublicKey, AnySignature } from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { MultiKey, MultiKeySignature } from \"../../core/crypto/multiKey\";\nimport { AccountAuthenticatorVariant, HexInput, MoveFunctionId } from \"../../types\";\nimport { AbstractionAuthDataVariant } from \"../../types/abstraction\";\nimport { AccountAddress, Hex } from \"../../core\";\nimport { getFunctionParts, isValidFunctionInfo } from \"../../utils/helpers\";\n\n/**\n * Represents an account authenticator that can handle multiple authentication variants.\n * This class serves as a base for different types of account authenticators, allowing for serialization\n * and deserialization of various authenticator types.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class AccountAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes an AccountAuthenticator from the provided deserializer.\n   * This function helps in reconstructing the AccountAuthenticator object based on the variant index.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AccountAuthenticatorVariant.Ed25519:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.MultiEd25519:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.SingleKey:\n        return AccountAuthenticatorSingleKey.load(deserializer);\n      case AccountAuthenticatorVariant.MultiKey:\n        return AccountAuthenticatorMultiKey.load(deserializer);\n      case AccountAuthenticatorVariant.NoAccountAuthenticator:\n        return AccountAuthenticatorNoAccountAuthenticator.load(deserializer);\n      case AccountAuthenticatorVariant.Abstraction:\n        return AccountAuthenticatorAbstraction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n\n  /**\n   * Determines if the current instance is an Ed25519 account authenticator.\n   *\n   * @returns {boolean} True if the instance is of type AccountAuthenticatorEd25519, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isEd25519(): this is AccountAuthenticatorEd25519 {\n    return this instanceof AccountAuthenticatorEd25519;\n  }\n\n  /**\n   * Determines if the current instance is of type AccountAuthenticatorMultiEd25519.\n   *\n   * @returns {boolean} True if the instance is a multi-signature Ed25519 account authenticator, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isMultiEd25519(): this is AccountAuthenticatorMultiEd25519 {\n    return this instanceof AccountAuthenticatorMultiEd25519;\n  }\n\n  /**\n   * Determines if the current instance is of the type AccountAuthenticatorSingleKey.\n   *\n   * @returns {boolean} True if the instance is an AccountAuthenticatorSingleKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isSingleKey(): this is AccountAuthenticatorSingleKey {\n    return this instanceof AccountAuthenticatorSingleKey;\n  }\n\n  /**\n   * Determine if the current instance is of type AccountAuthenticatorMultiKey.\n   *\n   * @returns {boolean} Returns true if the instance is an AccountAuthenticatorMultiKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isMultiKey(): this is AccountAuthenticatorMultiKey {\n    return this instanceof AccountAuthenticatorMultiKey;\n  }\n}\n\n/**\n * Represents an Ed25519 transaction authenticator for multi-signer transactions.\n * This class encapsulates the account's Ed25519 public key and signature.\n *\n * @param public_key - The Ed25519 public key associated with the account.\n * @param signature - The Ed25519 signature for the account.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  /**\n   * Creates an instance of the class with the specified public keys and signatures.\n   *\n   * @param public_key The public key used for verification.\n   * @param signature The signatures corresponding to the public keys.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  /**\n   * Serializes the account authenticator data into the provided serializer.\n   * This function captures the multi-key variant, public keys, and signatures for serialization.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  /**\n   * Loads an instance of AccountAuthenticatorMultiKey from the provided deserializer.\n   * This function helps in reconstructing the authenticator object using the deserialized public keys and signatures.\n   *\n   * @param deserializer - The deserializer used to extract the necessary data for loading the authenticator.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for Multi Ed25519, designed for multi-signer transactions.\n *\n * @param public_key - The MultiEd25519 public key of the account.\n * @param signature - The MultiEd25519 signature of the account.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents an account authenticator that utilizes a single key for signing.\n * This class is designed to handle authentication using a public key and its corresponding signature.\n *\n * @param public_key - The public key used for authentication.\n * @param signature - The signature associated with the public key.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorSingleKey extends AccountAuthenticator {\n  public readonly public_key: AnyPublicKey;\n\n  public readonly signature: AnySignature;\n\n  constructor(public_key: AnyPublicKey, signature: AnySignature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.SingleKey);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorSingleKey {\n    const public_key = AnyPublicKey.deserialize(deserializer);\n    const signature = AnySignature.deserialize(deserializer);\n    return new AccountAuthenticatorSingleKey(public_key, signature);\n  }\n}\n\n/**\n * Represents an account authenticator that supports multiple keys and signatures for multi-signature scenarios.\n *\n * @param public_keys - The public keys used for authentication.\n * @param signatures - The signatures corresponding to the public keys.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountAuthenticatorMultiKey extends AccountAuthenticator {\n  public readonly public_keys: MultiKey;\n\n  public readonly signatures: MultiKeySignature;\n\n  constructor(public_keys: MultiKey, signatures: MultiKeySignature) {\n    super();\n    this.public_keys = public_keys;\n    this.signatures = signatures;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiKey);\n    this.public_keys.serialize(serializer);\n    this.signatures.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiKey {\n    const public_keys = MultiKey.deserialize(deserializer);\n    const signatures = MultiKeySignature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiKey(public_keys, signatures);\n  }\n}\n\n/**\n * AccountAuthenticatorNoAccountAuthenticator for no account authenticator\n * It represents the absence of a public key for transaction simulation.\n * It allows skipping the public/auth key check during the simulation.\n */\nexport class AccountAuthenticatorNoAccountAuthenticator extends AccountAuthenticator {\n  // eslint-disable-next-line class-methods-use-this\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.NoAccountAuthenticator);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static load(deserializer: Deserializer): AccountAuthenticatorNoAccountAuthenticator {\n    return new AccountAuthenticatorNoAccountAuthenticator();\n  }\n}\n\nexport class AccountAuthenticatorAbstraction extends AccountAuthenticator {\n  public readonly functionInfo: string;\n\n  public readonly signingMessageDigest: Hex;\n\n  public readonly authenticator: Uint8Array;\n\n  /**\n   * DAA, which is extended of the AA module, requires an account identity\n   */\n  public readonly accountIdentity?: Uint8Array;\n\n  constructor(\n    functionInfo: string,\n    signingMessageDigest: HexInput,\n    authenticator: Uint8Array,\n    accountIdentity?: Uint8Array,\n  ) {\n    super();\n    if (!isValidFunctionInfo(functionInfo)) {\n      throw new Error(`Invalid function info ${functionInfo} passed into AccountAuthenticatorAbstraction`);\n    }\n    this.functionInfo = functionInfo;\n    this.authenticator = authenticator;\n    this.signingMessageDigest = Hex.fromHexInput(Hex.fromHexInput(signingMessageDigest).toUint8Array());\n    this.accountIdentity = accountIdentity;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Abstraction);\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(this.functionInfo as MoveFunctionId);\n    AccountAddress.fromString(moduleAddress).serialize(serializer);\n    serializer.serializeStr(moduleName);\n    serializer.serializeStr(functionName);\n    if (this.accountIdentity) {\n      serializer.serializeU32AsUleb128(AbstractionAuthDataVariant.DerivableV1);\n    } else {\n      serializer.serializeU32AsUleb128(AbstractionAuthDataVariant.V1);\n    }\n    serializer.serializeBytes(this.signingMessageDigest.toUint8Array());\n    if (this.accountIdentity) {\n      serializer.serializeBytes(this.authenticator);\n    } else {\n      serializer.serializeFixedBytes(this.authenticator);\n    }\n\n    if (this.accountIdentity) {\n      serializer.serializeBytes(this.accountIdentity);\n    }\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorAbstraction {\n    const moduleAddress = AccountAddress.deserialize(deserializer);\n    const moduleName = deserializer.deserializeStr();\n    const functionName = deserializer.deserializeStr();\n    const variant = deserializer.deserializeUleb128AsU32();\n    if (variant === AbstractionAuthDataVariant.V1) {\n      const signingMessageDigest = deserializer.deserializeBytes();\n      const authenticator = deserializer.deserializeFixedBytes(deserializer.remaining());\n      return new AccountAuthenticatorAbstraction(\n        `${moduleAddress}::${moduleName}::${functionName}`,\n        signingMessageDigest,\n        authenticator,\n      );\n    }\n    if (variant === AbstractionAuthDataVariant.DerivableV1) {\n      const signingMessageDigest = deserializer.deserializeBytes();\n      const abstractSignature = deserializer.deserializeBytes();\n\n      const abstractPublicKey = deserializer.deserializeBytes();\n      return new AccountAuthenticatorAbstraction(\n        `${moduleAddress}::${moduleName}::${functionName}`,\n        signingMessageDigest,\n        abstractSignature,\n        abstractPublicKey,\n      );\n    }\n    throw new Error(`Unknown variant index for AccountAuthenticatorAbstraction: ${variant}`);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the generation of the signing message.\n * @group Implementation\n * @category Transactions\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { RAW_TRANSACTION_SALT, RAW_TRANSACTION_WITH_DATA_SALT } from \"../../utils/const\";\nimport { FeePayerRawTransaction, MultiAgentRawTransaction } from \"../instances\";\nimport { AnyRawTransaction, AnyRawTransactionInstance } from \"../types\";\nimport { Serializable } from \"../../bcs\";\n\n/**\n * Derives the appropriate raw transaction type based on the provided transaction details.\n * This function helps in identifying whether the transaction is a FeePayerRawTransaction,\n * MultiAgentRawTransaction, or a standard RawTransaction.\n *\n * @param transaction - An object representing an Aptos transaction, which may include:\n *   - feePayerAddress - The address of the fee payer (optional).\n *   - secondarySignerAddresses - An array of secondary signer addresses (optional).\n *   - rawTransaction - The raw transaction data.\n *\n * @returns FeePayerRawTransaction | MultiAgentRawTransaction | RawTransaction\n * @group Implementation\n * @category Transactions\n */\nexport function deriveTransactionType(transaction: AnyRawTransaction): AnyRawTransactionInstance {\n  if (transaction.feePayerAddress) {\n    return new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n  }\n  if (transaction.secondarySignerAddresses) {\n    return new MultiAgentRawTransaction(transaction.rawTransaction, transaction.secondarySignerAddresses);\n  }\n\n  return transaction.rawTransaction;\n}\n\n/**\n * Generates the 'signing message' form of a message to be signed.\n * This function combines a domain separator with the byte representation of the message to create a signing message.\n *\n * @param bytes - The byte representation of the message to be signed and sent to the chain.\n * @param domainSeparator - A domain separator that starts with 'APTOS::'.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessage(bytes: Uint8Array, domainSeparator: string): Uint8Array {\n  const hash = sha3Hash.create();\n\n  if (!domainSeparator.startsWith(\"APTOS::\")) {\n    throw new Error(`Domain separator needs to start with 'APTOS::'.  Provided - ${domainSeparator}`);\n  }\n\n  hash.update(domainSeparator);\n\n  const prefix = hash.digest();\n\n  const body = bytes;\n\n  const mergedArray = new Uint8Array(prefix.length + body.length);\n  mergedArray.set(prefix);\n  mergedArray.set(body, prefix.length);\n\n  return mergedArray;\n}\n\n/**\n * @deprecated\n * Use CryptoHashable instead by having your class implement it and call hash() to get the signing message.\n *\n * Generates the 'signing message' form of a serializable value by serializing it and using the constructor name as the domain\n * separator.\n *\n * @param serializable - An object that has a BCS serialized form.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessageForSerializable(serializable: Serializable): Uint8Array {\n  return generateSigningMessage(serializable.bcsToBytes(), `APTOS::${serializable.constructor.name}`);\n}\n\n/**\n * Generates the 'signing message' form of a transaction by deriving the type of transaction and applying the appropriate domain\n * separator based on the presence of a fee payer or secondary signers.\n *\n * @param transaction - A transaction that is to be signed, which can include a fee payer address or secondary signer addresses.\n *\n * @returns The Uint8Array of the signing message.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSigningMessageForTransaction(transaction: AnyRawTransaction): Uint8Array {\n  const rawTxn = deriveTransactionType(transaction);\n  if (transaction.feePayerAddress) {\n    return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_WITH_DATA_SALT);\n  }\n  if (transaction.secondarySignerAddresses) {\n    return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_WITH_DATA_SALT);\n  }\n  return generateSigningMessage(rawTxn.bcsToBytes(), RAW_TRANSACTION_SALT);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { MoveModuleId } from \"../../types\";\n\n/**\n * Represents a ModuleId that can be serialized and deserialized.\n * A ModuleId consists of a module address (e.g., \"0x1\") and a module name (e.g., \"coin\").\n * @group Implementation\n * @category Transactions\n */\nexport class ModuleId extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly name: Identifier;\n\n  /**\n   * Initializes a new instance of the module with the specified account address and name.\n   *\n   * @param address - The account address, e.g., \"0x1\".\n   * @param name - The module name under the specified address, e.g., \"coin\".\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(address: AccountAddress, name: Identifier) {\n    super();\n    this.address = address;\n    this.name = name;\n  }\n\n  /**\n   * Converts a string literal in the format \"account_address::module_name\" to a ModuleId.\n   * @param moduleId - A string literal representing the module identifier.\n   * @throws Error if the provided moduleId is not in the correct format.\n   * @returns ModuleId - The corresponding ModuleId object.\n   * @group Implementation\n   * @category Transactions\n   */\n  static fromStr(moduleId: MoveModuleId): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromString(parts[0]), new Identifier(parts[1]));\n  }\n\n  /**\n   * Serializes the address and name properties using the provided serializer.\n   * This function is essential for converting the object's data into a format suitable for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  /**\n   * Deserializes a ModuleId from the provided deserializer.\n   * This function retrieves the account address and identifier to construct a ModuleId instance.\n   *\n   * @param deserializer - The deserializer instance used to read the data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\nimport { TypeTagVariants } from \"../../types\";\n\n/**\n * Represents a type tag in the serialization framework, serving as a base class for various specific type tags.\n * This class provides methods for serialization and deserialization of type tags, as well as type checking methods\n * to determine the specific type of the tag at runtime.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TypeTag extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes a StructTag from the provided deserializer.\n   * This function allows you to reconstruct a StructTag object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TypeTagVariants.Bool:\n        return TypeTagBool.load(deserializer);\n      case TypeTagVariants.U8:\n        return TypeTagU8.load(deserializer);\n      case TypeTagVariants.U64:\n        return TypeTagU64.load(deserializer);\n      case TypeTagVariants.U128:\n        return TypeTagU128.load(deserializer);\n      case TypeTagVariants.Address:\n        return TypeTagAddress.load(deserializer);\n      case TypeTagVariants.Signer:\n        return TypeTagSigner.load(deserializer);\n      case TypeTagVariants.Vector:\n        return TypeTagVector.load(deserializer);\n      case TypeTagVariants.Struct:\n        return TypeTagStruct.load(deserializer);\n      case TypeTagVariants.U16:\n        return TypeTagU16.load(deserializer);\n      case TypeTagVariants.U32:\n        return TypeTagU32.load(deserializer);\n      case TypeTagVariants.U256:\n        return TypeTagU256.load(deserializer);\n      case TypeTagVariants.Generic:\n        // This is only used for ABI representation, and cannot actually be used as a type.\n        return TypeTagGeneric.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n\n  abstract toString(): string;\n\n  /**\n   * Determines if the current instance is of type TypeTagBool.\n   *\n   * @returns {boolean} True if the instance is a TypeTagBool, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isBool(): this is TypeTagBool {\n    return this instanceof TypeTagBool;\n  }\n\n  /**\n   * Determines if the current instance is of type TypeTagAddress.\n   *\n   * @returns {boolean} True if the instance is a TypeTagAddress, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isAddress(): this is TypeTagAddress {\n    return this instanceof TypeTagAddress;\n  }\n\n  /**\n   * Determines if the current instance is of type TypeTagGeneric.\n   *\n   * @returns {boolean} Returns true if the instance is a TypeTagGeneric, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isGeneric(): this is TypeTagGeneric {\n    return this instanceof TypeTagGeneric;\n  }\n\n  /**\n   * Determine if the current instance is a TypeTagSigner.\n   *\n   * @returns {boolean} Returns true if the instance is a TypeTagSigner, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isSigner(): this is TypeTagSigner {\n    return this instanceof TypeTagSigner;\n  }\n\n  /**\n   * Checks if the current instance is a vector type.\n   * This can help determine the specific type of data structure being used.\n   *\n   * @returns {boolean} True if the instance is of type TypeTagVector, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isVector(): this is TypeTagVector {\n    return this instanceof TypeTagVector;\n  }\n\n  /**\n   * Determines if the current instance is a structure type.\n   *\n   * @returns {boolean} True if the instance is of type TypeTagStruct, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isStruct(): this is TypeTagStruct {\n    return this instanceof TypeTagStruct;\n  }\n\n  /**\n   * Determines if the current instance is of type `TypeTagU8`.\n   *\n   * @returns {boolean} Returns true if the instance is of type `TypeTagU8`, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU8(): this is TypeTagU8 {\n    return this instanceof TypeTagU8;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU16.\n   *\n   * @returns {boolean} True if the instance is TypeTagU16, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU16(): this is TypeTagU16 {\n    return this instanceof TypeTagU16;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU32.\n   *\n   * @returns {boolean} Returns true if the instance is TypeTagU32, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU32(): this is TypeTagU32 {\n    return this instanceof TypeTagU32;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU64.\n   *\n   * @returns {boolean} True if the instance is a TypeTagU64, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU64(): this is TypeTagU64 {\n    return this instanceof TypeTagU64;\n  }\n\n  /**\n   * Determines if the current instance is of the TypeTagU128 type.\n   *\n   * @returns {boolean} True if the instance is of TypeTagU128, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU128(): this is TypeTagU128 {\n    return this instanceof TypeTagU128;\n  }\n\n  /**\n   * Checks if the current instance is of type TypeTagU256.\n   *\n   * @returns {boolean} Returns true if the instance is of type TypeTagU256, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isU256(): this is TypeTagU256 {\n    return this instanceof TypeTagU256;\n  }\n\n  isPrimitive(): boolean {\n    return (\n      this instanceof TypeTagSigner ||\n      this instanceof TypeTagAddress ||\n      this instanceof TypeTagBool ||\n      this instanceof TypeTagU8 ||\n      this instanceof TypeTagU16 ||\n      this instanceof TypeTagU32 ||\n      this instanceof TypeTagU64 ||\n      this instanceof TypeTagU128 ||\n      this instanceof TypeTagU256\n    );\n  }\n}\n\n/**\n * Represents a boolean type tag in the type system.\n * This class extends the base TypeTag class and provides\n * methods for serialization and deserialization of the boolean\n * type tag.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagBool extends TypeTag {\n  /**\n   * Returns the string representation of the object.\n   *\n   * @returns {string} The string representation of the object.\n   * @group Implementation\n   * @category Transactions\n   */\n  toString(): string {\n    return \"bool\";\n  }\n\n  /**\n   * Serializes the current instance's properties into a provided serializer.\n   * This function ensures that the address, module name, name, and type arguments are properly serialized.\n   *\n   * @param serializer - The serializer instance used to serialize the properties.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Bool);\n  }\n\n  /**\n   * Deserializes a StructTag and returns a new TypeTagStruct instance.\n   *\n   * @param _deserializer - The deserializer used to read the StructTag data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(_deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\n/**\n * Represents a type tag for an 8-bit unsigned integer (u8).\n * This class extends the base TypeTag class and provides methods\n * for serialization and deserialization specific to the u8 type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU8 extends TypeTag {\n  toString(): string {\n    return \"u8\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U8);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\n/**\n * Represents a type tag for unsigned 16-bit integers (u16).\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU16 extends TypeTag {\n  toString(): string {\n    return \"u16\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U16);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\n/**\n * Represents a type tag for a 32-bit unsigned integer (u32).\n * This class extends the base TypeTag class and provides methods for serialization\n * and deserialization specific to the u32 type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU32 extends TypeTag {\n  toString(): string {\n    return \"u32\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U32);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\n/**\n * Represents a type tag for 64-bit unsigned integers (u64).\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU64 extends TypeTag {\n  toString(): string {\n    return \"u64\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U64);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\n/**\n * Represents a type tag for the u128 data type.\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU128 extends TypeTag {\n  toString(): string {\n    return \"u128\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U128);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\n/**\n * Represents a type tag for the U256 data type.\n * This class extends the base TypeTag class and provides methods for serialization and deserialization.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagU256 extends TypeTag {\n  toString(): string {\n    return \"u256\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U256);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\n/**\n * Represents a type tag for an address in the system.\n * This class extends the TypeTag class and provides functionality\n * to serialize the address type and load it from a deserializer.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagAddress extends TypeTag {\n  toString(): string {\n    return \"address\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Address);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\n/**\n * Represents a type tag for a signer in the system.\n * This class extends the base TypeTag and provides specific functionality\n * related to the signer type.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagSigner extends TypeTag {\n  toString(): string {\n    return \"signer\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Signer);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\n/**\n * Represents a reference to a type tag in the type system.\n * This class extends the TypeTag class and provides functionality\n * to serialize and deserialize type tag references.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagReference extends TypeTag {\n  toString(): `&${string}` {\n    return `&${this.value.toString()}`;\n  }\n\n  /**\n   * Initializes a new instance of the class with the specified parameters.\n   *\n   * @param value - The TypeTag to reference.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Reference);\n  }\n\n  static load(deserializer: Deserializer): TypeTagReference {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagReference(value);\n  }\n}\n\n/**\n * Represents a generic type tag used for type parameters in entry functions.\n * Generics are not serialized into a real type, so they cannot be used as a type directly.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagGeneric extends TypeTag {\n  toString(): `T${number}` {\n    return `T${this.value}`;\n  }\n\n  constructor(public readonly value: number) {\n    super();\n    if (value < 0) throw new Error(\"Generic type parameter index cannot be negative\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Generic);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TypeTagGeneric {\n    const value = deserializer.deserializeU32();\n    return new TypeTagGeneric(value);\n  }\n}\n\n/**\n * Represents a vector type tag, which encapsulates a single type tag value.\n * This class extends the base TypeTag class and provides methods for serialization,\n * deserialization, and string representation of the vector type tag.\n *\n * @extends TypeTag\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagVector extends TypeTag {\n  toString(): `vector<${string}>` {\n    return `vector<${this.value.toString()}>`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  /**\n   * Creates a new TypeTagVector instance with a TypeTagU8 type.\n   *\n   * @returns {TypeTagVector} A new TypeTagVector initialized with TypeTagU8.\n   * @group Implementation\n   * @category Transactions\n   */\n  static u8(): TypeTagVector {\n    return new TypeTagVector(new TypeTagU8());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Vector);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\n/**\n * Represents a structured type tag in the system, extending the base TypeTag class.\n * This class encapsulates information about a specific structure, including its address,\n * module name, and type arguments, and provides methods for serialization and type checking.\n *\n * @param value - The StructTag instance containing the details of the structured type.\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagStruct extends TypeTag {\n  toString(): `0x${string}::${string}::${string}` {\n    // Collect type args and add it if there are any\n    let typePredicate = \"\";\n    if (this.value.typeArgs.length > 0) {\n      typePredicate = `<${this.value.typeArgs.map((typeArg) => typeArg.toString()).join(\", \")}>`;\n    }\n\n    return `${this.value.address.toString()}::${this.value.moduleName.identifier}::${\n      this.value.name.identifier\n    }${typePredicate}`;\n  }\n\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Struct);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  /**\n   * Determines if the provided address, module name, and struct name match the current type tag.\n   *\n   * @param address - The account address to compare against the type tag.\n   * @param moduleName - The name of the module to compare against the type tag.\n   * @param structName - The name of the struct to compare against the type tag.\n   * @returns True if the address, module name, and struct name match the type tag; otherwise, false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isTypeTag(address: AccountAddress, moduleName: string, structName: string): boolean {\n    return (\n      this.value.moduleName.identifier === moduleName &&\n      this.value.name.identifier === structName &&\n      this.value.address.equals(address)\n    );\n  }\n\n  /**\n   * Checks if the provided value is of type string.\n   * This function can help ensure that the data being processed is in the correct format before further operations.\n   *\n   * @returns {boolean} Returns true if the value is a string, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isString(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"string\", \"String\");\n  }\n\n  /**\n   * Checks if the specified account address is of type \"option\".\n   *\n   * @returns {boolean} Returns true if the account address is an option type, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isOption(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"option\", \"Option\");\n  }\n\n  /**\n   * Checks if the provided value is of type 'object'.\n   * This function helps determine if a value can be treated as an object type in the context of the SDK.\n   *\n   * @returns {boolean} Returns true if the value is an object, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isObject(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"object\", \"Object\");\n  }\n\n  /**\n   * Checks if the provided value is a 'DelegationKey' for permissioned signers.\n   *\n   * @returns {boolean} Returns true if the value is a DelegationKey, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isDelegationKey(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"permissioned_delegation\", \"DelegationKey\");\n  }\n\n  /**\n   * Checks if the provided value is of type `RateLimiter`.\n   *\n   * @returns {boolean} Returns true if the value is a RateLimiter, otherwise false.\n   * @group Implementation\n   * @category Transactions\n   */\n  isRateLimiter(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"rate_limiter\", \"RateLimiter\");\n  }\n}\n\n/**\n * Represents a structured tag that includes an address, module name,\n * name, and type arguments. This class is used to define and manage\n * structured data types within the SDK.\n *\n * @property {AccountAddress} address - The address associated with the struct tag.\n * @property {Identifier} moduleName - The name of the module that contains the struct.\n * @property {Identifier} name - The name of the struct.\n * @property {Array<TypeTag>} typeArgs - An array of type arguments associated with the struct.\n * @group Implementation\n * @category Transactions\n */\nexport class StructTag extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly moduleName: Identifier;\n\n  public readonly name: Identifier;\n\n  public readonly typeArgs: Array<TypeTag>;\n\n  constructor(address: AccountAddress, module_name: Identifier, name: Identifier, type_args: Array<TypeTag>) {\n    super();\n    this.address = address;\n    this.moduleName = module_name;\n    this.name = name;\n    this.typeArgs = type_args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.address);\n    serializer.serialize(this.moduleName);\n    serializer.serialize(this.name);\n    serializer.serializeVector(this.typeArgs);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\n/**\n * Retrieves the StructTag for the AptosCoin, which represents the Aptos Coin in the Aptos blockchain.\n *\n * @returns {StructTag} The StructTag for the AptosCoin.\n * @group Implementation\n * @category Transactions\n */\nexport function aptosCoinStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"aptos_coin\"), new Identifier(\"AptosCoin\"), []);\n}\n\n/**\n * Returns a new StructTag representing a string type.\n *\n * @returns {StructTag} A StructTag for the string type.\n * @group Implementation\n * @category Transactions\n */\nexport function stringStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"string\"), new Identifier(\"String\"), []);\n}\n\n/**\n * Creates a new StructTag for the Option type with the specified type argument.\n * This can help in defining a specific instance of an Option type in your application.\n *\n * @param typeArg - The type tag that specifies the type of the value contained in the Option.\n * @group Implementation\n * @category Transactions\n */\nexport function optionStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\n/**\n * Creates a new StructTag for the Object type with the specified type argument.\n * This function helps in defining a structured representation of an Object with a specific type.\n *\n * @param typeArg - The type tag that specifies the type of the Object.\n * @group Implementation\n * @category Transactions\n */\nexport function objectStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { EntryFunctionBytes } from \"../../bcs/serializable/entryFunctionBytes\";\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"../../bcs/serializable/movePrimitives\";\nimport { MoveVector, Serialized } from \"../../bcs/serializable/moveStructs\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { ModuleId } from \"./moduleId\";\nimport type { EntryFunctionArgument, ScriptFunctionArgument, TransactionArgument } from \"./transactionArgument\";\nimport { MoveModuleId, ScriptTransactionArgumentVariants, TransactionPayloadVariants } from \"../../types\";\nimport { TypeTag } from \"../typeTag\";\n\n/**\n * Deserialize a Script Transaction Argument.\n * This function retrieves and deserializes various types of script transaction arguments based on the provided deserializer.\n *\n * @param deserializer - The deserializer used to read the script transaction argument.\n * @returns The deserialized script transaction argument.\n * @throws Error if the variant index is unknown.\n * @group Implementation\n * @category Transactions\n */\nexport function deserializeFromScriptArgument(deserializer: Deserializer): TransactionArgument {\n  // index enum variant\n  const index = deserializer.deserializeUleb128AsU32();\n  switch (index) {\n    case ScriptTransactionArgumentVariants.U8:\n      return U8.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U64:\n      return U64.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U128:\n      return U128.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Address:\n      return AccountAddress.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U8Vector:\n      return MoveVector.deserialize(deserializer, U8);\n    case ScriptTransactionArgumentVariants.Bool:\n      return Bool.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U16:\n      return U16.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U32:\n      return U32.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U256:\n      return U256.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Serialized:\n      return Serialized.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown variant index for ScriptTransactionArgument: ${index}`);\n  }\n}\n\n/**\n * Represents a supported Transaction Payload that can be serialized and deserialized.\n *\n * This class serves as a base for different types of transaction payloads, allowing for\n * their serialization into a format suitable for transmission and deserialization back\n * into their original form.\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TransactionPayload extends Serializable {\n  /**\n   * Serialize a Transaction Payload\n   * @group Implementation\n   * @category Transactions\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Transaction Payload\n   * @group Implementation\n   * @category Transactions\n   */\n\n  /**\n   * Deserializes a multisig transaction payload from the provided deserializer.\n   * This function enables the reconstruction of a MultiSigTransactionPayload object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionPayloadVariants.Script:\n        return TransactionPayloadScript.load(deserializer);\n      case TransactionPayloadVariants.EntryFunction:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case TransactionPayloadVariants.Multisig:\n        return TransactionPayloadMultiSig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\n/**\n * Represents a transaction payload script that can be serialized and deserialized.\n *\n * This class encapsulates a script that defines the logic for a transaction payload.\n *\n * @extends TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadScript extends TransactionPayload {\n  public readonly script: Script;\n\n  /**\n   * Initializes a multi-sig account transaction with the provided payload.\n   *\n   * @param script - The payload of the multi-sig transaction. This can only be an EntryFunction for now, but Script might be\n   * supported in the future.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(script: Script) {\n    super();\n    this.script = script;\n  }\n\n  /**\n   * Serializes the transaction payload, enabling future support for multiple types of inner transaction payloads.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Script);\n    this.script.serialize(serializer);\n  }\n\n  /**\n   * Loads a MultiSig transaction payload from the provided deserializer.\n   * This function helps in reconstructing a MultiSig transaction payload from its serialized form.\n   *\n   * @param deserializer - The deserializer used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const script = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(script);\n  }\n}\n\n/**\n * Represents a transaction payload entry function that can be serialized and deserialized.\n *\n * @extends TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  public readonly entryFunction: EntryFunction;\n\n  constructor(entryFunction: EntryFunction) {\n    super();\n    this.entryFunction = entryFunction;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.EntryFunction);\n    this.entryFunction.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const entryFunction = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(entryFunction);\n  }\n}\n\n/**\n * Represents a multi-signature transaction payload that can be serialized and deserialized.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionPayloadMultiSig extends TransactionPayload {\n  public readonly multiSig: MultiSig;\n\n  constructor(multiSig: MultiSig) {\n    super();\n    this.multiSig = multiSig;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Multisig);\n    this.multiSig.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultiSig {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultiSig(value);\n  }\n}\n\n/**\n * Represents an entry function that can be serialized and deserialized.\n * This class encapsulates the details required to invoke a function within a module,\n * including the module name, function name, type arguments, and function arguments.\n *\n * @param module_name - Fully qualified module name in the format \"account_address::module_name\" (e.g., \"0x1::coin\").\n * @param function_name - The name of the function (e.g., \"transfer\").\n * @param type_args - Type arguments required by the Move function.\n * @param args - Arguments to the Move function.\n * @group Implementation\n * @category Transactions\n */\nexport class EntryFunction {\n  public readonly module_name: ModuleId;\n\n  public readonly function_name: Identifier;\n\n  public readonly type_args: Array<TypeTag>;\n\n  public readonly args: Array<EntryFunctionArgument>;\n\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name in format \"account_address::module_name\" e.g. \"0x1::coin\"\n   * @param function_name The function name. e.g \"transfer\"\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    module_name: ModuleId,\n    function_name: Identifier,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  /**\n   * Build an EntryFunction payload from raw primitive values.\n   *\n   * @param module_id - Fully qualified module name in the format \"AccountAddress::module_id\", e.g., \"0x1::coin\".\n   * @param function_name - The name of the function to be called.\n   * @param type_args - Type arguments that the Move function requires.\n   * @param args - Arguments to the Move function.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   *\n   * A coin transfer function has three arguments \"from\", \"to\", and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   *\n   * @returns EntryFunction\n   * @group Implementation\n   * @category Transactions\n   */\n  static build(\n    module_id: MoveModuleId,\n    function_name: string,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module_id), new Identifier(function_name), type_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: EntryFunctionArgument) => {\n      item.serializeForEntryFunction(serializer);\n    });\n  }\n\n  /**\n   * Deserializes an entry function payload with the arguments represented as EntryFunctionBytes instances.\n   * @see EntryFunctionBytes\n   *\n   * NOTE: When you deserialize an EntryFunction payload with this method, the entry function\n   * arguments are populated into the deserialized instance as type-agnostic, raw fixed bytes\n   * in the form of the EntryFunctionBytes class.\n   *\n   * In order to correctly deserialize these arguments as their actual type representations, you\n   * must know the types of the arguments beforehand and deserialize them yourself individually.\n   *\n   * One way you could achieve this is by using the ABIs for an entry function and deserializing each\n   * argument as its given, corresponding type.\n   *\n   * @param deserializer\n   * @returns A deserialized EntryFunction payload for a transaction.\n   *\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const type_args = deserializer.deserializeVector(TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const args: Array<EntryFunctionArgument> = new Array<EntryFunctionBytes>();\n\n    for (let i = 0; i < length; i += 1) {\n      const fixedBytesLength = deserializer.deserializeUleb128AsU32();\n      const fixedBytes = EntryFunctionBytes.deserialize(deserializer, fixedBytesLength);\n      args.push(fixedBytes);\n    }\n\n    return new EntryFunction(module_name, function_name, type_args, args);\n  }\n}\n\n/**\n * Represents a Script that can be serialized and deserialized.\n * Scripts contain the Move bytecode payload that can be submitted to the Aptos chain for execution.\n * @group Implementation\n * @category Transactions\n */\nexport class Script {\n  /**\n   * The move module bytecode\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly bytecode: Uint8Array;\n\n  /**\n   * The type arguments that the bytecode function requires.\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly type_args: Array<TypeTag>;\n\n  /**\n   * The arguments that the bytecode function requires.\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly args: Array<ScriptFunctionArgument>;\n\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   *\n   * @param bytecode The move module bytecode\n   * @param type_args The type arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args The arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(bytecode: Uint8Array, type_args: Array<TypeTag>, args: Array<ScriptFunctionArgument>) {\n    this.bytecode = bytecode;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.bytecode);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: ScriptFunctionArgument) => {\n      item.serializeForScriptFunction(serializer);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const bytecode = deserializer.deserializeBytes();\n    const type_args = deserializer.deserializeVector(TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const args = new Array<ScriptFunctionArgument>();\n    for (let i = 0; i < length; i += 1) {\n      // Note that we deserialize directly to the Move value, not its Script argument representation.\n      // We are abstracting away the Script argument representation because knowing about it is\n      // functionally useless.\n      const scriptArgument = deserializeFromScriptArgument(deserializer);\n      args.push(scriptArgument);\n    }\n    return new Script(bytecode, type_args, args);\n  }\n}\n\n/**\n * Represents a MultiSig account that can be serialized and deserialized.\n *\n * This class encapsulates the functionality to manage multi-signature transactions, including the address of the\n * multi-sig account and the associated transaction payload.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiSig {\n  public readonly multisig_address: AccountAddress;\n\n  public readonly transaction_payload?: MultiSigTransactionPayload;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param multisig_address The multi-sig account address the transaction will be executed as.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction. This is optional when executing a multi-sig\n   *  transaction whose payload is already stored on chain.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(multisig_address: AccountAddress, transaction_payload?: MultiSigTransactionPayload) {\n    this.multisig_address = multisig_address;\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\n/**\n * Represents a multi-signature transaction payload that can be serialized and deserialized.\n * This class is designed to encapsulate the transaction payload for multi-sig account transactions\n * as defined in the `multisig_account.move` module. Future enhancements may allow support for script\n * payloads as the `multisig_account.move` module evolves.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiSigTransactionPayload extends Serializable {\n  public readonly transaction_payload: EntryFunction;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction.\n   * This can only be EntryFunction for now but,\n   * Script might be supported in the future.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(transaction_payload: EntryFunction) {\n    super();\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    /**\n     * We can support multiple types of inner transaction payload in the future.\n     * For now, it's only EntryFunction but if we support more types,\n     * we need to serialize with the right enum values here\n     * @group Implementation\n     * @category Transactions\n     */\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSigTransactionPayload {\n    // TODO: Support other types of payload beside EntryFunction.\n    // This is the enum value indicating which type of payload the multisig tx contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { ChainId } from \"./chainId\";\nimport { AccountAddress } from \"../../core\";\nimport { TransactionPayload } from \"./transactionPayload\";\nimport { TransactionVariants } from \"../../types\";\n\n/**\n * Represents a raw transaction that can be serialized and deserialized.\n * Raw transactions contain the metadata and payloads that can be submitted to the Aptos chain for execution.\n * They must be signed before the Aptos chain can execute them.\n * @group Implementation\n * @category Transactions\n */\nexport class RawTransaction extends Serializable {\n  public readonly sender: AccountAddress;\n\n  public readonly sequence_number: bigint;\n\n  public readonly payload: TransactionPayload;\n\n  public readonly max_gas_amount: bigint;\n\n  public readonly gas_unit_price: bigint;\n\n  public readonly expiration_timestamp_secs: bigint;\n\n  public readonly chain_id: ChainId;\n\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender The sender Account Address\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute an entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    sender: AccountAddress,\n    sequence_number: bigint,\n    payload: TransactionPayload,\n    max_gas_amount: bigint,\n    gas_unit_price: bigint,\n    expiration_timestamp_secs: bigint,\n    chain_id: ChainId,\n  ) {\n    super();\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n\n  /**\n   * Serializes the transaction data, including the fee payer transaction type, raw transaction, secondary signer addresses,\n   * and fee payer address.\n   * This function is essential for preparing the transaction for transmission or storage in a serialized format.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  /**\n   * Deserialize a Raw Transaction With Data.\n   * This function retrieves the appropriate raw transaction based on the variant index provided by the deserializer.\n   *\n   * @param deserializer - An instance of the Deserializer used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\n/**\n * Represents a raw transaction with associated data that can be serialized and deserialized.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class RawTransactionWithData extends Serializable {\n  /**\n   * Serialize a Raw Transaction With Data\n   * @group Implementation\n   * @category Transactions\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Raw Transaction With Data\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionVariants.MultiAgentTransaction:\n        return MultiAgentRawTransaction.load(deserializer);\n      case TransactionVariants.FeePayerTransaction:\n        return FeePayerRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\n/**\n * Represents a multi-agent transaction that can be serialized and deserialized.\n *\n * @extends RawTransactionWithData\n * @group Implementation\n * @category Transactions\n */\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  constructor(raw_txn: RawTransaction, secondary_signer_addresses: Array<AccountAddress>) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.MultiAgentTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n  }\n\n  /**\n   * Deserializes a Fee Payer Raw Transaction from the provided deserializer.\n   * This function allows you to reconstruct a Fee Payer Raw Transaction object, which includes the raw transaction data,\n   * secondary signer addresses, and the fee payer address.\n   *\n   * @param deserializer - The deserializer used to read the raw transaction data.\n   * @returns A FeePayerRawTransaction object constructed from the deserialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\n/**\n * Represents a Fee Payer Transaction that can be serialized and deserialized.\n * @group Implementation\n * @category Transactions\n */\nexport class FeePayerRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction - optional and can be empty\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  /**\n   * The fee payer account address\n   * @group Implementation\n   * @category Transactions\n   */\n  public readonly fee_payer_address: AccountAddress;\n\n  constructor(\n    raw_txn: RawTransaction,\n    secondary_signer_addresses: Array<AccountAddress>,\n    fee_payer_address: AccountAddress,\n  ) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.fee_payer_address = fee_payer_address;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.FeePayerTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): FeePayerRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { AccountAuthenticator } from \"./account\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { TransactionAuthenticatorVariant } from \"../../types\";\n\n/**\n * Represents an abstract base class for transaction authenticators.\n * This class provides methods for serializing and deserializing different types of transaction authenticators.\n *\n * @extends Serializable\n * @group Implementation\n * @category Transactions\n */\nexport abstract class TransactionAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserializes a TransactionAuthenticator from the provided deserializer.\n   * This function helps in reconstructing the TransactionAuthenticator based on the variant index found in the serialized data.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionAuthenticatorVariant.Ed25519:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiEd25519:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiAgent:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      case TransactionAuthenticatorVariant.FeePayer:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n      case TransactionAuthenticatorVariant.SingleSender:\n        return TransactionAuthenticatorSingleSender.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n\n  isEd25519(): this is TransactionAuthenticatorEd25519 {\n    return this instanceof TransactionAuthenticatorEd25519;\n  }\n\n  isMultiEd25519(): this is TransactionAuthenticatorMultiEd25519 {\n    return this instanceof TransactionAuthenticatorMultiEd25519;\n  }\n\n  isMultiAgent(): this is TransactionAuthenticatorMultiAgent {\n    return this instanceof TransactionAuthenticatorMultiAgent;\n  }\n\n  isFeePayer(): this is TransactionAuthenticatorFeePayer {\n    return this instanceof TransactionAuthenticatorFeePayer;\n  }\n\n  isSingleSender(): this is TransactionAuthenticatorSingleSender {\n    return this instanceof TransactionAuthenticatorSingleSender;\n  }\n}\n\n/**\n * Represents a transaction authenticator using Ed25519 for a single signer transaction.\n * This class encapsulates the client's public key and the Ed25519 signature of a raw transaction.\n *\n * @param public_key - The client's public key.\n * @param signature - The Ed25519 signature of a raw transaction.\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * for details about generating a signature.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  /**\n   * Creates an instance of the class with the specified account authenticator.\n   *\n   * @param public_key - The Ed25519PublicKey that will be used for authentication.\n   * @param signature - The Ed25519Signature that will be used for authentication.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  /**\n   * Serializes the transaction authenticator by encoding the sender information.\n   *\n   * @param serializer - The serializer instance used to perform the serialization.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  /**\n   * Loads a TransactionAuthenticatorSingleSender instance from the provided deserializer.\n   * This function helps in deserializing the sender information to create a transaction authenticator.\n   *\n   * @param deserializer - The deserializer used to extract the sender data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for multi-signature transactions using Ed25519.\n * This class is used to validate transactions that require multiple signatures from different signers.\n *\n * @param public_key - The public key of the client involved in the transaction.\n * @param signature - The multi-signature of the raw transaction.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Represents a transaction authenticator for a multi-agent transaction.\n *\n * This class manages the authentication process involving a primary sender and multiple secondary signers.\n *\n * @param sender - The authenticator for the sender account.\n * @param secondary_signer_addresses - An array of addresses for the secondary signers.\n * @param secondary_signers - An array of authenticators for the secondary signer accounts.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiAgent);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\n/**\n * Represents a transaction authenticator specifically for fee payer transactions.\n * It encapsulates the sender's account authenticator, addresses of secondary signers,\n * their respective authenticators, and the fee payer's account information.\n *\n * @param sender - The authenticator for the sender's account.\n * @param secondary_signer_addresses - An array of addresses for secondary signers.\n * @param secondary_signers - An array of authenticators for secondary signers' accounts.\n * @param fee_payer - An object containing the fee payer's account address and authenticator.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  public readonly fee_payer: {\n    address: AccountAddress;\n    authenticator: AccountAuthenticator;\n  };\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n    fee_payer: { address: AccountAddress; authenticator: AccountAuthenticator },\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n    this.fee_payer = fee_payer;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.FeePayer);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = { address, authenticator };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n}\n\n/**\n * Represents a single sender authenticator for transactions that require a single signer.\n * This class is responsible for managing the authentication of a transaction initiated by a single sender.\n *\n * @param sender - An instance of AccountAuthenticator that represents the account of the sender.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionAuthenticatorSingleSender extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  constructor(sender: AccountAuthenticator) {\n    super();\n    this.sender = sender;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.SingleSender);\n    this.sender.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorSingleSender {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    return new TransactionAuthenticatorSingleSender(sender);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { TransactionAuthenticator } from \"../authenticator/transaction\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a signed transaction that includes a raw transaction and an authenticator.\n * The authenticator contains a client's public key and the signature of the raw transaction.\n *\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * @param raw_txn - The raw transaction to be signed.\n * @param authenticator - Contains a client's public key and the signature of the raw transaction.\n * Authenticator can have three variations: single signature, multi-signature, and multi-agent.\n * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n * @group Implementation\n * @category Transactions\n */\nexport class SignedTransaction extends Serializable {\n  public readonly raw_txn: RawTransaction;\n\n  public readonly authenticator: TransactionAuthenticator;\n\n  /**\n   * Represents a signed transaction that includes a raw transaction and an authenticator.\n   * The authenticator contains a client's public key and the signature of the raw transaction,\n   * which can be of three types: single signature, multi-signature, and multi-agent.\n   *\n   * @param raw_txn The raw transaction to be signed.\n   * @param authenticator Contains a client's public key and the signature of the raw transaction. The authenticator has 3\n   * flavors: single signature, multi-signature and multi-agent.\n   * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n   * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(raw_txn: RawTransaction, authenticator: TransactionAuthenticator) {\n    super();\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n\n  /**\n   * Serializes the raw transaction and its authenticator using the provided serializer.\n   * This function is essential for preparing the transaction data for transmission or storage.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction and authenticator.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  /**\n   * Deserializes a signed transaction from the provided deserializer.\n   * This function allows you to reconstruct a SignedTransaction object from its serialized form, enabling further processing or validation.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a simple transaction type that can be submitted to the Aptos chain for execution.\n *\n * This transaction type is designed for a single signer and includes metadata such as the Raw Transaction\n * and an optional sponsor Account Address to cover gas fees.\n *\n * @param rawTransaction - The Raw Transaction.\n * @param feePayerAddress - The optional sponsor Account Address.\n * @group Implementation\n * @category Transactions\n */\nexport class SimpleTransaction extends Serializable {\n  public rawTransaction: RawTransaction;\n\n  public feePayerAddress?: AccountAddress | undefined;\n\n  // We don't really need it, we add it for type checking we do\n  // throughout the SDK\n  public readonly secondarySignerAddresses: undefined;\n\n  /**\n   * SimpleTransaction represents a transaction signed by a single account that\n   * can be submitted to the Aptos chain for execution.\n   *\n   * @param rawTransaction The Raw Transaction.\n   * @param feePayerAddress The optional sponsor Account Address to pay the gas fees.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(rawTransaction: RawTransaction, feePayerAddress?: AccountAddress) {\n    super();\n    this.rawTransaction = rawTransaction;\n    this.feePayerAddress = feePayerAddress;\n  }\n\n  /**\n   * Serializes the transaction data using the provided serializer.\n   * This function ensures that the raw transaction and fee payer address are properly serialized for further processing.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.rawTransaction.serialize(serializer);\n\n    if (this.feePayerAddress === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.feePayerAddress.serialize(serializer);\n    }\n  }\n\n  /**\n   * Deserializes a SimpleTransaction from the given deserializer.\n   * This function helps in reconstructing a SimpleTransaction object from its serialized form.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): SimpleTransaction {\n    const rawTransaction = RawTransaction.deserialize(deserializer);\n    const feePayerPresent = deserializer.deserializeBool();\n    let feePayerAddress;\n    if (feePayerPresent) {\n      feePayerAddress = AccountAddress.deserialize(deserializer);\n    }\n\n    return new SimpleTransaction(rawTransaction, feePayerAddress);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { RawTransaction } from \"./rawTransaction\";\n\n/**\n * Represents a multi-agent transaction that can be serialized and deserialized.\n * This transaction includes a raw transaction, optional fee payer address, and multiple secondary signer addresses.\n *\n * @param rawTransaction The raw transaction to be executed.\n * @param secondarySignerAddresses An array of secondary signer addresses involved in the transaction.\n * @param feePayerAddress An optional account address that sponsors the transaction's gas fees.\n * @group Implementation\n * @category Transactions\n */\nexport class MultiAgentTransaction extends Serializable {\n  public rawTransaction: RawTransaction;\n\n  public feePayerAddress?: AccountAddress | undefined;\n\n  public secondarySignerAddresses: AccountAddress[];\n\n  /**\n   * Represents a MultiAgentTransaction that can be submitted to the Aptos chain for execution.\n   * This class encapsulates the raw transaction data, the secondary signer addresses, and an optional fee payer address.\n   *\n   * @param rawTransaction The raw transaction data.\n   * @param secondarySignerAddresses An array of secondary signer addresses.\n   * @param feePayerAddress An optional account address that sponsors the gas fees.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    rawTransaction: RawTransaction,\n    secondarySignerAddresses: AccountAddress[],\n    feePayerAddress?: AccountAddress,\n  ) {\n    super();\n    this.rawTransaction = rawTransaction;\n    this.feePayerAddress = feePayerAddress;\n    this.secondarySignerAddresses = secondarySignerAddresses;\n  }\n\n  /**\n   * Serializes the transaction data, including the raw transaction, secondary signer addresses, and fee payer address.\n   * This function is essential for preparing the transaction for transmission or storage in a serialized format.\n   *\n   * @param serializer - The serializer instance used to serialize the transaction data.\n   * @group Implementation\n   * @category Transactions\n   */\n  serialize(serializer: Serializer): void {\n    this.rawTransaction.serialize(serializer);\n\n    serializer.serializeVector<AccountAddress>(this.secondarySignerAddresses);\n\n    if (this.feePayerAddress === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.feePayerAddress.serialize(serializer);\n    }\n  }\n\n  /**\n   * Deserializes a MultiAgentTransaction from the provided deserializer.\n   * This function allows you to reconstruct a MultiAgentTransaction object from its serialized form, including any secondary\n   * signer addresses and the fee payer address if present.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Transactions\n   */\n  static deserialize(deserializer: Deserializer): MultiAgentTransaction {\n    const rawTransaction = RawTransaction.deserialize(deserializer);\n\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    const feePayerPresent = deserializer.deserializeBool();\n    let feePayerAddress;\n    if (feePayerPresent) {\n      feePayerAddress = AccountAddress.deserialize(deserializer);\n    }\n\n    return new MultiAgentTransaction(rawTransaction, secondarySignerAddresses, feePayerAddress);\n  }\n}\n","import { AccountAuthenticatorEd25519 } from \"../transactions/authenticator/account\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Ed25519PrivateKey, Ed25519PublicKey, Ed25519Signature, Signature } from \"../core/crypto\";\nimport type { Account } from \"./Account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * Arguments required to create an instance of an Ed25519 signer.\n *\n * @param privateKey - The private key used for signing.\n * @param address - Optional account address associated with the signer.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface Ed25519SignerConstructorArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n}\n\n/**\n * Arguments for creating an Ed25519 signer from a derivation path.\n *\n * @param path - The derivation path for the Ed25519 key.\n * @param mnemonic - The mnemonic phrase used to generate the key.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface Ed25519SignerFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\n/**\n * Arguments required to verify an Ed25519 signature against a given message.\n *\n * @param message - The message to be verified, represented in hexadecimal format.\n * @param signature - The Ed25519 signature to validate.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifyEd25519SignatureArgs {\n  message: HexInput;\n  signature: Ed25519Signature;\n}\n\n/**\n * Represents an Ed25519 account that provides signing capabilities through an Ed25519 private key.\n * This class allows for the creation of accounts, signing messages and transactions, and verifying signatures.\n *\n * Note: Generating an instance of this class does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class Ed25519Account implements Account {\n  /**\n   * Private key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly privateKey: Ed25519PrivateKey;\n\n  readonly publicKey: Ed25519PublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.Ed25519;\n\n  // region Constructors\n\n  /**\n   * Creates an instance of the Ed25519Signer with the specified parameters.\n   * This constructor initializes the private key, public key, and account address for the signer.\n   *\n   * @param args - The constructor arguments for the Ed25519Signer.\n   * @param args.privateKey - The private key used for signing.\n   * @param args.address - The optional account address; if not provided, it will derive the address from the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: Ed25519SignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = privateKey.publicKey();\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  /**\n   * Generates a new Ed25519 account using a randomly generated private key.\n   * This function is useful for creating a signer that can be used for cryptographic operations.\n   *\n   * @returns {Ed25519Account} The newly generated Ed25519 account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(): Ed25519Account {\n    const privateKey = Ed25519PrivateKey.generate();\n    return new Ed25519Account({ privateKey });\n  }\n\n  /**\n   * Derives an Ed25519 account using a specified BIP44 path and mnemonic seed phrase.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.path - The BIP44 derive hardened path, e.g., m/44'/637'/0'/0'/0'.\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic - The mnemonic seed phrase of the account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: Ed25519SignerFromDerivationPathArgs) {\n    const { path, mnemonic } = args;\n    const privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n    return new Ed25519Account({ privateKey });\n  }\n  // endregion\n\n  // region Account\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifyEd25519SignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * Ed25519 signatures do not depend on chain state, so this function is equivalent to the synchronous verifySignature method.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's Ed25519 private key.\n   * This function returns an AccountAuthenticator containing the signature along with the account's public key.\n   *\n   * @param message - The signing message, represented as hexadecimal input.\n   * @returns An AccountAuthenticator containing the signature and the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorEd25519 {\n    return new AccountAuthenticatorEd25519(this.publicKey, this.privateKey.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's Ed25519 private key.\n   * This function returns an AccountAuthenticator that contains the signature of the transaction along with the account's public key.\n   *\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticator containing the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorEd25519 {\n    return new AccountAuthenticatorEd25519(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's Ed25519 private key.\n   * @param message - The message to be signed in HexInput format.\n   * @returns Signature - The resulting signature of the signed message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): Ed25519Signature {\n    return this.privateKey.sign(message);\n  }\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * This function helps ensure that the transaction is properly authenticated before submission.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns Signature - The resulting signature for the transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): Ed25519Signature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n}\n","import { AccountAuthenticatorSingleKey } from \"../transactions/authenticator/account\";\nimport { type HexInput, SigningScheme, SigningSchemeInput } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  Ed25519PrivateKey,\n  KeylessSignature,\n  PrivateKeyInput,\n  Secp256k1PrivateKey,\n  Signature,\n} from \"../core/crypto\";\nimport type { Account } from \"./Account\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * An interface which defines if an Account utilizes SingleKey signing.\n *\n * Such an account will use the AnyPublicKey enum to represent its public key when deriving the auth key.\n */\nexport interface SingleKeySigner extends Account {\n  getAnyPublicKey(): AnyPublicKey;\n}\n\nexport function isSingleKeySigner(obj: unknown): obj is SingleKeySigner {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    \"getAnyPublicKey\" in obj &&\n    typeof (obj as any).getAnyPublicKey === \"function\"\n  );\n}\n\nexport type SingleKeySignerOrLegacyEd25519Account = SingleKeySigner | Ed25519Account;\n\n/**\n * Arguments required to create a single key signer.\n *\n * @param privateKey - The private key used for signing.\n * @param address - Optional account address associated with the signer.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface SingleKeySignerConstructorArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n}\n\n/**\n * Arguments for generating a single key signer.\n *\n * @param scheme - The signing scheme to be used.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface SingleKeySignerGenerateArgs {\n  scheme?: SigningSchemeInput;\n}\n\n/**\n * The arguments for generating a single key signer from a specified derivation path.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type SingleKeySignerFromDerivationPathArgs = SingleKeySignerGenerateArgs & {\n  path: string;\n  mnemonic: string;\n};\n\n/**\n * Arguments required to verify a single key signature for a given message.\n *\n * @param message - The message to be verified, represented in hexadecimal format.\n * @param signature - The signature that corresponds to the message.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifySingleKeySignatureArgs {\n  message: HexInput;\n  signature: AnySignature;\n}\n\n/**\n * Signer implementation for the SingleKey authentication scheme.\n * This class extends a SingleKeyAccount by adding signing capabilities through a valid private key.\n * Currently, the only supported signature schemes are Ed25519 and Secp256k1.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class SingleKeyAccount implements Account, SingleKeySigner {\n  /**\n   * Private key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly privateKey: PrivateKeyInput;\n\n  readonly publicKey: AnyPublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.SingleKey;\n\n  /**\n   * Creates an instance of the SingleKeySigner using the provided private key and address.\n   * This allows for signing transactions and messages with the specified private key.\n   *\n   * @param args - The constructor arguments for initializing the SingleKeySigner.\n   * @param args.privateKey - The private key used for signing.\n   * @param args.address - The optional account address; if not provided, it will derive the address from the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: SingleKeySignerConstructorArgs) {\n    const { privateKey, address } = args;\n    this.privateKey = privateKey;\n    this.publicKey = new AnyPublicKey(privateKey.publicKey());\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n  }\n\n  getAnyPublicKey(): AnyPublicKey {\n    return this.publicKey;\n  }\n\n  /**\n   * Derives an account from a randomly generated private key based on the specified signing scheme.\n   * The default generation scheme is Ed25519, but it can also support Secp256k1Ecdsa.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for generating the private key. Defaults to SigningSchemeInput.Ed25519.\n   * @returns An account with the generated private key based on the specified signing scheme.\n   * @throws Error if an unsupported signature scheme is provided.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args: SingleKeySignerGenerateArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519 } = args;\n    let privateKey: PrivateKeyInput;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.generate();\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.generate();\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  /**\n   * Derives an account using a specified BIP44 path and mnemonic seed phrase, defaulting to the Ed25519 signature scheme.\n   * This function allows you to create a single key account based on the provided derivation path and mnemonic.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.scheme - The signature scheme to derive the private key with. Defaults to Ed25519.\n   * @param args.path - The BIP44 derive hardened path (e.g. m/44'/637'/0'/0'/0') for Ed25519, or non-hardened path\n   * (e.g. m/44'/637'/0'/0/0) for secp256k1.\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic - The mnemonic seed phrase of the account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: SingleKeySignerFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, path, mnemonic } = args;\n    let privateKey: PrivateKeyInput;\n    switch (scheme) {\n      case SigningSchemeInput.Ed25519:\n        privateKey = Ed25519PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.fromDerivationPath(path, mnemonic);\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${scheme}`);\n    }\n    return new SingleKeyAccount({ privateKey });\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifySingleKeySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the account's public key.\n   *\n   * This function checks if the provided signature is valid for the given message using the account's public key.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @param args.options.throwErrorWithReason - Whether to throw an error with the reason for the verification failure.\n   * @returns A boolean indicating whether the signature is valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's private key and return an AccountAuthenticator containing the signature along with the\n   * account's public key.\n   * @param message - The signing message, represented as binary input in hexadecimal format.\n   * @returns An instance of AccountAuthenticatorSingleKey containing the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorSingleKey {\n    return new AccountAuthenticatorSingleKey(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's private key.\n   * This function returns an AccountAuthenticator that contains the signature of the transaction along with the account's public key.\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticatorSingleKey containing the signature of the transaction and the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorSingleKey {\n    return new AccountAuthenticatorSingleKey(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's private key.\n   * @param message - The message to be signed in HexInput format.\n   * @returns A new AnySignature containing the signature of the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): AnySignature {\n    return new AnySignature(this.privateKey.sign(message));\n  }\n\n  /**\n   * Sign the given transaction using the account's private key.\n   * This function generates a signing message for the transaction and then signs it.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns Signature - The resulting signature for the signed transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): AnySignature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n\n  static fromEd25519Account(account: Ed25519Account): SingleKeyAccount {\n    return new SingleKeyAccount({ privateKey: account.privateKey, address: account.accountAddress });\n  }\n}\n","import type { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport { HexInput, SigningScheme, SigningSchemeInput } from \"../types\";\nimport type { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { AuthenticationKey } from \"../core/authenticationKey\";\nimport { AccountPublicKey, Ed25519PrivateKey, PrivateKeyInput, Signature, VerifySignatureArgs } from \"../core/crypto\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { SingleKeyAccount } from \"./SingleKeyAccount\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { AptosConfig } from \"../api\";\n\n/**\n * Arguments for creating an `Ed25519Account` from an `Ed25519PrivateKey`.\n * To use the SingleKey authentication scheme, set `legacy` to false.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address for the account.\n * @param legacy - Indicates whether to use legacy authentication (default is true).\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateEd25519AccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy?: true;\n}\n\n/**\n * Arguments for creating a `SingleKeyAccount` using an `Ed25519PrivateKey`.\n * The `legacy` property must be set to false to utilize the `SingleKey` authentication scheme.\n *\n * @param privateKey - The Ed25519 private key used for account creation.\n * @param address - Optional account address input.\n * @param legacy - Must be false to enable the `SingleKey` authentication scheme.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateEd25519SingleKeyAccountFromPrivateKeyArgs {\n  privateKey: Ed25519PrivateKey;\n  address?: AccountAddressInput;\n  legacy: false;\n}\n\n/**\n * Arguments for creating a `SingleKeyAccount` from a supported private key, excluding `Ed25519PrivateKey`.\n * The `legacy` argument is always false and cannot be set to true.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address input for the account.\n * @param legacy - Always false; cannot be explicitly set to true.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateSingleKeyAccountFromPrivateKeyArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n  legacy?: false;\n}\n\n/**\n * Arguments for creating an `Account` from a private key when the key type is unknown at compile time.\n *\n * @param privateKey - The private key used to create the account.\n * @param address - Optional address for the account.\n * @param legacy - Optional flag indicating if the account is a legacy account.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface CreateAccountFromPrivateKeyArgs {\n  privateKey: PrivateKeyInput;\n  address?: AccountAddressInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for generating an Ed25519 account, specifying the signing scheme and legacy option.\n *\n * @param scheme - The signing scheme to use for the account.\n * @param legacy - Indicates if the account should be created in legacy mode.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateEd25519AccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy?: true;\n}\n\n/**\n * Arguments for generating a `SingleKeyAccount` with an underlying `Ed25519PrivateKey`.\n * The `legacy` argument must be set to false to ensure an `Ed25519SingleKeyAccount` is returned.\n *\n * @param scheme - Optional signing scheme input for the account.\n * @param legacy - Indicates whether to use legacy account generation.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateEd25519SingleKeyAccountArgs {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy: false;\n}\n\n/**\n * Arguments for generating a `SingleKeyAccount` using a supported private key other than `Ed25519PrivateKey`.\n * The `legacy` argument is optional and defaults to false, and cannot be set to true.\n *\n * @param scheme - The signing scheme to use for the account.\n * @param legacy - Indicates whether to use legacy account generation (defaults to false).\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateSingleKeyAccountArgs {\n  scheme: Exclude<SigningSchemeInput, SigningSchemeInput.Ed25519>;\n  legacy?: false;\n}\n\n/**\n * Arguments for generating an opaque `Account` when the input signature scheme is unknown at compile time.\n *\n * @param scheme - The signing scheme to use for account generation.\n * @param legacy - Indicates whether to use legacy account generation methods.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface GenerateAccountArgs {\n  scheme?: SigningSchemeInput;\n  legacy?: boolean;\n}\n\n/**\n * Arguments for deriving a private key using a mnemonic phrase and a specified BIP44 path.\n *\n * @param path - The BIP44 derivation path for the key.\n * @param mnemonic - The mnemonic phrase used for key generation.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface PrivateKeyFromDerivationPathArgs {\n  path: string;\n  mnemonic: string;\n}\n\n/**\n * Abstract class representing a generic Aptos account.\n *\n * This class serves as a single entry point for account generation, allowing accounts to be created\n * either through `Account.generate()` or `Account.fromDerivationPath`. Although it is defined as an\n * abstract class, it should be treated as an interface and enforced using the `implements` keyword.\n *\n * Note: Generating an account instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport abstract class Account {\n  /**\n   * Public key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract readonly publicKey: AccountPublicKey;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signingScheme: SigningScheme;\n\n  /**\n   * Generates a new account based on the specified signing scheme and legacy option.\n   * This function allows you to create an account with either the Ed25519 signing scheme or a different scheme as specified.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for account generation. Defaults to Ed25519.\n   * @param args.legacy - Indicates whether to use the legacy account generation method. Defaults to true.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args?: GenerateEd25519AccountArgs): Ed25519Account;\n  static generate(args: GenerateEd25519SingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateSingleKeyAccountArgs): SingleKeyAccount;\n  static generate(args: GenerateAccountArgs): Account;\n  static generate(args: GenerateAccountArgs = {}) {\n    const { scheme = SigningSchemeInput.Ed25519, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.generate();\n    }\n    return SingleKeyAccount.generate({ scheme });\n  }\n\n  /**\n   * Creates an account from a given private key and address.\n   * This function allows you to instantiate an account based on the provided private key,\n   * and it can differentiate between legacy and non-legacy accounts.\n   *\n   * @param args - The arguments for creating the account.\n   * @param args.privateKey - The private key used to create the account.\n   * @param args.address - The address associated with the account.\n   * @param args.legacy - A boolean indicating whether to create a legacy account (default is true).\n   * @returns An instance of either Ed25519Account or SingleKeyAccount based on the provided private key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPrivateKey(args: CreateEd25519AccountFromPrivateKeyArgs): Ed25519Account;\n  static fromPrivateKey(args: CreateSingleKeyAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs): SingleKeyAccount;\n  static fromPrivateKey(args: CreateAccountFromPrivateKeyArgs): Ed25519Account | SingleKeyAccount {\n    const { privateKey, address, legacy = true } = args;\n    if (privateKey instanceof Ed25519PrivateKey && legacy) {\n      return new Ed25519Account({\n        privateKey,\n        address,\n      });\n    }\n    return new SingleKeyAccount({ privateKey, address });\n  }\n\n  /**\n   * @deprecated use `fromPrivateKey` instead.\n   * Instantiates an account using a private key and a specified account address. This is primarily used to instantiate an\n   * `Account` that has had its authentication key rotated.\n   *\n   * @param args - The arguments required to create an account from a private key.\n   * @param args.privateKey - The underlying private key for the account.\n   * @param args.address - The account address the `Account` will sign for.\n   * @param args.legacy - Optional. If set to false, the keypair generated is a Unified keypair. Defaults to generating a Legacy\n   * Ed25519 keypair.\n   *\n   * @returns Account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPrivateKeyAndAddress(args: CreateAccountFromPrivateKeyArgs) {\n    return this.fromPrivateKey(args);\n  }\n\n  /**\n   * Generates an account from a specified derivation path and mnemonic.\n   * This function allows you to create an account using different signing schemes based on the provided arguments.\n   *\n   * @param args - The arguments for generating the account.\n   * @param args.scheme - The signing scheme to use for account generation. Defaults to Ed25519.\n   * @param args.mnemonic - The mnemonic phrase used to derive the account.\n   * @param args.path - The derivation path used to generate the account.\n   * @param args.legacy - A boolean indicating whether to use the legacy account generation method. Defaults to true.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromDerivationPath(args: GenerateEd25519AccountArgs & PrivateKeyFromDerivationPathArgs): Ed25519Account;\n  static fromDerivationPath(\n    args: GenerateEd25519SingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs,\n  ): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateSingleKeyAccountArgs & PrivateKeyFromDerivationPathArgs): SingleKeyAccount;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs): Account;\n  static fromDerivationPath(args: GenerateAccountArgs & PrivateKeyFromDerivationPathArgs) {\n    const { scheme = SigningSchemeInput.Ed25519, mnemonic, path, legacy = true } = args;\n    if (scheme === SigningSchemeInput.Ed25519 && legacy) {\n      return Ed25519Account.fromDerivationPath({ mnemonic, path });\n    }\n    return SingleKeyAccount.fromDerivationPath({ scheme, mnemonic, path });\n  }\n\n  /**\n   * Retrieve the authentication key for the associated account using the provided public key.\n   * This key enables account owners to rotate their private key(s) associated with the account without changing the address that\n   * hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   *\n   * @param args - The arguments for retrieving the authentication key.\n   * @param args.publicKey - The public key of the account.\n   * @returns The authentication key for the associated account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static authKey(args: { publicKey: AccountPublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n    return publicKey.authKey();\n  }\n\n  /**\n   * Sign a message using the available signing capabilities.\n   * @param message the signing message, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signWithAuthenticator(message: HexInput): AccountAuthenticator;\n\n  /**\n   * Sign a transaction using the available signing capabilities.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticator;\n\n  /**\n   * Sign the given message using the available signing capabilities.\n   * @param message in HexInput format\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract sign(message: HexInput): Signature;\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * @param transaction the transaction to be signed\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  abstract signTransaction(transaction: AnyRawTransaction): Signature;\n\n  /**\n   * Verify the given message and signature with the public key.\n   * This function helps ensure the integrity and authenticity of a message by validating its signature.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: VerifySignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key. It fetches any on chain state if needed for verification.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync(args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { randomBytes } from \"@noble/hashes/utils\";\n\nimport {\n  bytesToBigIntLE,\n  padAndPackBytesWithLen,\n  poseidonHash,\n  Ed25519PrivateKey,\n  EphemeralPublicKey,\n  EphemeralSignature,\n  PrivateKey,\n} from \"../core/crypto\";\nimport { Hex } from \"../core/hex\";\nimport { EphemeralPublicKeyVariant, HexInput } from \"../types\";\nimport { Deserializer, Serializable, Serializer } from \"../bcs\";\nimport { floorToWholeHour, nowInSeconds } from \"../utils/helpers\";\n\nconst TWO_WEEKS_IN_SECONDS = 1_209_600;\n\n/**\n * Represents an ephemeral key pair used for signing transactions via the Keyless authentication scheme.\n * This key pair is temporary and includes an expiration time.\n * For more details on how this class is used, refer to the documentation:\n * https://aptos.dev/guides/keyless-accounts/#1-present-the-user-with-a-sign-in-with-idp-button-on-the-ui\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class EphemeralKeyPair extends Serializable {\n  static readonly BLINDER_LENGTH: number = 31;\n\n  /**\n   * A byte array of length BLINDER_LENGTH used to obfuscate the public key from the IdP.\n   * Used in calculating the nonce passed to the IdP and as a secret witness in proof generation.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly blinder: Uint8Array;\n\n  /**\n   * A timestamp in seconds indicating when the ephemeral key pair is expired.  After expiry, a new\n   * EphemeralKeyPair must be generated and a new JWT needs to be created.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly expiryDateSecs: number;\n\n  /**\n   * The value passed to the IdP when the user authenticates.  It consists of a hash of the\n   * ephemeral public key, expiry date, and blinder.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly nonce: string;\n\n  /**\n   * A private key used to sign transactions.  This private key is not tied to any account on the chain as it\n   * is ephemeral (not permanent) in nature.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private privateKey: PrivateKey;\n\n  /**\n   * A public key used to verify transactions.  This public key is not tied to any account on the chain as it\n   * is ephemeral (not permanent) in nature.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private publicKey: EphemeralPublicKey;\n\n  /**\n   * Creates an instance of the class with a specified private key, optional expiry date, and optional blinder.\n   * This constructor initializes the public key, sets the expiry date to a default value if not provided,\n   * generates a blinder if not supplied, and calculates the nonce based on the public key, expiry date, and blinder.\n   *\n   * @param args - The parameters for constructing the instance.\n   * @param args.privateKey - The private key used for creating the instance.\n   * @param args.expiryDateSecs - Optional expiry date in seconds from the current time. Defaults to two weeks from now.\n   * @param args.blinder - Optional blinder value. If not provided, a new blinder will be generated.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: { privateKey: PrivateKey; expiryDateSecs?: number; blinder?: HexInput }) {\n    super();\n    const { privateKey, expiryDateSecs, blinder } = args;\n    this.privateKey = privateKey;\n    this.publicKey = new EphemeralPublicKey(privateKey.publicKey());\n    // By default, we set the expiry date to be two weeks in the future floored to the nearest hour\n    this.expiryDateSecs = expiryDateSecs || floorToWholeHour(nowInSeconds() + TWO_WEEKS_IN_SECONDS);\n    // Generate the blinder if not provided\n    this.blinder = blinder !== undefined ? Hex.fromHexInput(blinder).toUint8Array() : generateBlinder();\n    // Calculate the nonce\n    const fields = padAndPackBytesWithLen(this.publicKey.bcsToBytes(), 93);\n    fields.push(BigInt(this.expiryDateSecs));\n    fields.push(bytesToBigIntLE(this.blinder));\n    const nonceHash = poseidonHash(fields);\n    this.nonce = nonceHash.toString();\n  }\n\n  /**\n   * Returns the public key of the key pair.\n   * @return EphemeralPublicKey\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  getPublicKey(): EphemeralPublicKey {\n    return this.publicKey;\n  }\n\n  /**\n   * Checks if the current time has surpassed the expiry date of the key pair.\n   * @return boolean - Returns true if the key pair is expired, otherwise false.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  isExpired(): boolean {\n    const currentTimeSecs: number = Math.floor(Date.now() / 1000);\n    return currentTimeSecs > this.expiryDateSecs;\n  }\n\n  /**\n   * Serializes the object's properties into a format suitable for transmission or storage.\n   * This function is essential for preparing the object data for serialization processes.\n   *\n   * @param serializer - The serializer instance used to serialize the object's properties.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.publicKey.variant);\n    serializer.serializeBytes(this.privateKey.toUint8Array());\n    serializer.serializeU64(this.expiryDateSecs);\n    serializer.serializeFixedBytes(this.blinder);\n  }\n\n  /**\n   * Deserializes an ephemeral key pair from the provided deserializer.\n   * This function helps in reconstructing an ephemeral key pair, which is essential for cryptographic operations.\n   *\n   * @param deserializer - The deserializer instance used to read the serialized data.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static deserialize(deserializer: Deserializer): EphemeralKeyPair {\n    const variantIndex = deserializer.deserializeUleb128AsU32();\n    let privateKey: PrivateKey;\n    switch (variantIndex) {\n      case EphemeralPublicKeyVariant.Ed25519:\n        privateKey = Ed25519PrivateKey.deserialize(deserializer);\n        break;\n      default:\n        throw new Error(`Unknown variant index for EphemeralPublicKey: ${variantIndex}`);\n    }\n    const expiryDateSecs = deserializer.deserializeU64();\n    const blinder = deserializer.deserializeFixedBytes(31);\n    return new EphemeralKeyPair({ privateKey, expiryDateSecs: Number(expiryDateSecs), blinder });\n  }\n\n  /**\n   * Deserialize a byte array into an EphemeralKeyPair object.\n   * This function allows you to reconstruct an EphemeralKeyPair from its serialized byte representation.\n   *\n   * @param bytes - The byte array representing the serialized EphemeralKeyPair.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromBytes(bytes: Uint8Array): EphemeralKeyPair {\n    return EphemeralKeyPair.deserialize(new Deserializer(bytes));\n  }\n\n  /**\n   * Generates a new ephemeral key pair with an optional expiry date.\n   * This function allows you to create a temporary key pair for secure operations.\n   *\n   * @param args - Optional parameters for key pair generation.\n   * @param args.scheme - The type of key pair to use for the EphemeralKeyPair. Only Ed25519 is supported for now.\n   * @param args.expiryDateSecs - The date of expiry for the key pair in seconds.\n   * @returns An instance of EphemeralKeyPair containing the generated private key and expiry date.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static generate(args?: { scheme?: EphemeralPublicKeyVariant; expiryDateSecs?: number }): EphemeralKeyPair {\n    let privateKey: PrivateKey;\n\n    switch (args?.scheme) {\n      case EphemeralPublicKeyVariant.Ed25519:\n      default:\n        privateKey = Ed25519PrivateKey.generate();\n    }\n\n    return new EphemeralKeyPair({ privateKey, expiryDateSecs: args?.expiryDateSecs });\n  }\n\n  /**\n   * Sign the given data using the private key, returning an ephemeral signature.\n   * This function is essential for creating a secure signature that can be used for authentication or verification purposes.\n   *\n   * @param data - The data to be signed, provided in HexInput format.\n   * @returns EphemeralSignature - The resulting ephemeral signature.\n   * @throws Error - Throws an error if the EphemeralKeyPair has expired.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(data: HexInput): EphemeralSignature {\n    if (this.isExpired()) {\n      throw new Error(\"EphemeralKeyPair has expired\");\n    }\n    return new EphemeralSignature(this.privateKey.sign(data));\n  }\n}\n\n/**\n * Generates a random byte array of length EphemeralKeyPair.BLINDER_LENGTH.\n * @returns Uint8Array A random byte array used for blinding.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nfunction generateBlinder(): Uint8Array {\n  return randomBytes(EphemeralKeyPair.BLINDER_LENGTH);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport EventEmitter from \"eventemitter3\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { EphemeralCertificateVariant, HexInput, SigningScheme } from \"../types\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  KeylessPublicKey,\n  KeylessSignature,\n  EphemeralCertificate,\n  ZeroKnowledgeSig,\n  ZkProof,\n  MoveJWK,\n  getKeylessConfig,\n  fetchJWK,\n  KeylessConfiguration,\n} from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Hex } from \"../core/hex\";\nimport { AccountAuthenticatorSingleKey } from \"../transactions/authenticator/account\";\nimport { Deserializer, Serializable, Serializer } from \"../bcs\";\nimport { deriveTransactionType, generateSigningMessage } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction, AnyRawTransactionInstance } from \"../transactions/types\";\nimport { base64UrlDecode } from \"../utils/helpers\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { Account } from \"./Account\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { KeylessError, KeylessErrorType } from \"../errors\";\nimport type { SingleKeySigner } from \"./SingleKeyAccount\";\n\n/**\n * An interface which defines if an Account utilizes Keyless signing.\n */\nexport interface KeylessSigner extends Account {\n  checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void>;\n}\n\nexport function isKeylessSigner(obj: any): obj is KeylessSigner {\n  return obj !== null && obj !== undefined && typeof obj.checkKeylessAccountValidity === \"function\";\n}\n\n/**\n * Account implementation for the Keyless authentication scheme.  This abstract class is used for standard Keyless Accounts\n * and Federated Keyless Accounts.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport abstract class AbstractKeylessAccount extends Serializable implements KeylessSigner, SingleKeySigner {\n  static readonly PEPPER_LENGTH: number = 31;\n\n  /**\n   * The KeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n\n  /**\n   * The EphemeralKeyPair used to generate sign.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly ephemeralKeyPair: EphemeralKeyPair;\n\n  /**\n   * The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly uidKey: string;\n\n  /**\n   * The value of the uidKey claim on the JWT.  This intended to be a stable user identifier.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly uidVal: string;\n\n  /**\n   * The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly aud: string;\n\n  /**\n   * A value contains 31 bytes of entropy that preserves privacy of the account. Typically fetched from a pepper provider.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly pepper: Uint8Array;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly accountAddress: AccountAddress;\n\n  /**\n   * The zero knowledge signature (if ready) which contains the proof used to validate the EphemeralKeyPair.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  proof: ZeroKnowledgeSig | undefined;\n\n  /**\n   * The proof of the EphemeralKeyPair or a promise that provides the proof.  This is used to allow for awaiting on\n   * fetching the proof.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly proofOrPromise: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signingScheme: SigningScheme = SigningScheme.SingleKey;\n\n  /**\n   * The JWT token used to derive the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly jwt: string;\n\n  /**\n   * The hash of the verification key used to verify the proof. This is optional and can be used to check verifying key\n   * rotations which may invalidate the proof.\n   */\n  readonly verificationKeyHash?: Uint8Array;\n\n  /**\n   * An event emitter used to assist in handling asynchronous proof fetching.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  private readonly emitter: EventEmitter<ProofFetchEvents>;\n\n  /**\n   * Use the static generator `create(...)` instead.\n   * Creates an instance of the KeylessAccount with an optional proof.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.publicKey - A KeylessPublicKey or FederatedKeylessPublicKey.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.iss - A JWT issuer.\n   * @param args.uidKey - The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @param args.uidVal - The unique id for this user, intended to be a stable user identifier.\n   * @param args.aud - The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.verificationKeyHash Optional 32-byte verification key hash as hex input used to check proof validity.\n   */\n  protected constructor(args: {\n    address?: AccountAddress;\n    publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n  }) {\n    super();\n    const {\n      address,\n      ephemeralKeyPair,\n      publicKey,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      proof,\n      proofFetchCallback,\n      jwt,\n      verificationKeyHash,\n    } = args;\n    this.ephemeralKeyPair = ephemeralKeyPair;\n    this.publicKey = publicKey;\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n    this.uidKey = uidKey;\n    this.uidVal = uidVal;\n    this.aud = aud;\n    this.jwt = jwt;\n    this.emitter = new EventEmitter<ProofFetchEvents>();\n    this.proofOrPromise = proof;\n    if (proof instanceof ZeroKnowledgeSig) {\n      this.proof = proof;\n    } else {\n      if (proofFetchCallback === undefined) {\n        throw new Error(\"Must provide callback for async proof fetch\");\n      }\n      this.emitter.on(\"proofFetchFinish\", async (status) => {\n        await proofFetchCallback(status);\n        this.emitter.removeAllListeners();\n      });\n      // Note, this is purposely not awaited to be non-blocking.  The caller should await on the proofFetchCallback.\n      this.init(proof);\n    }\n    const pepperBytes = Hex.fromHexInput(pepper).toUint8Array();\n    if (pepperBytes.length !== AbstractKeylessAccount.PEPPER_LENGTH) {\n      throw new Error(`Pepper length in bytes should be ${AbstractKeylessAccount.PEPPER_LENGTH}`);\n    }\n    this.pepper = pepperBytes;\n    if (verificationKeyHash !== undefined) {\n      if (Hex.hexInputToUint8Array(verificationKeyHash).length !== 32) {\n        throw new Error(\"verificationKeyHash must be 32 bytes\");\n      }\n      this.verificationKeyHash = Hex.hexInputToUint8Array(verificationKeyHash);\n    }\n  }\n\n  getAnyPublicKey(): AnyPublicKey {\n    return new AnyPublicKey(this.publicKey);\n  }\n\n  /**\n   * This initializes the asynchronous proof fetch\n   * @return Emits whether the proof succeeds or fails, but has no return.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async init(promise: Promise<ZeroKnowledgeSig>) {\n    try {\n      this.proof = await promise;\n      this.emitter.emit(\"proofFetchFinish\", { status: \"Success\" });\n    } catch (error) {\n      if (error instanceof Error) {\n        this.emitter.emit(\"proofFetchFinish\", { status: \"Failed\", error: error.toString() });\n      } else {\n        this.emitter.emit(\"proofFetchFinish\", { status: \"Failed\", error: \"Unknown\" });\n      }\n    }\n  }\n\n  /**\n   * Serializes the jwt data into a format suitable for transmission or storage.\n   * This function ensures that both the jwt data and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the jwt data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.jwt);\n    serializer.serializeStr(this.uidKey);\n    serializer.serializeFixedBytes(this.pepper);\n    this.ephemeralKeyPair.serialize(serializer);\n    if (this.proof === undefined) {\n      throw new Error(\"Cannot serialize - proof undefined\");\n    }\n    this.proof.serialize(serializer);\n    serializer.serializeOption(this.verificationKeyHash, 32);\n  }\n\n  static partialDeserialize(deserializer: Deserializer): {\n    address: AccountAddress;\n    jwt: string;\n    uidKey: string;\n    pepper: Uint8Array;\n    ephemeralKeyPair: EphemeralKeyPair;\n    proof: ZeroKnowledgeSig;\n    verificationKeyHash?: Uint8Array;\n  } {\n    const address = AccountAddress.deserialize(deserializer);\n    const jwt = deserializer.deserializeStr();\n    const uidKey = deserializer.deserializeStr();\n    const pepper = deserializer.deserializeFixedBytes(31);\n    const ephemeralKeyPair = EphemeralKeyPair.deserialize(deserializer);\n    const proof = ZeroKnowledgeSig.deserialize(deserializer);\n    const verificationKeyHash = deserializer.deserializeOption(\"fixedBytes\", 32);\n\n    return { address, jwt, uidKey, pepper, ephemeralKeyPair, proof, verificationKeyHash };\n  }\n\n  /**\n   * Checks if the proof is expired.  If so the account must be re-derived with a new EphemeralKeyPair\n   * and JWT token.\n   * @return boolean\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  isExpired(): boolean {\n    return this.ephemeralKeyPair.isExpired();\n  }\n\n  /**\n   * Sign a message using Keyless.\n   * @param message the message to sign, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorSingleKey {\n    const signature = new AnySignature(this.sign(message));\n    const publicKey = new AnyPublicKey(this.publicKey);\n    return new AccountAuthenticatorSingleKey(publicKey, signature);\n  }\n\n  /**\n   * Sign a transaction using Keyless.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorSingleKey {\n    const signature = new AnySignature(this.signTransaction(transaction));\n    const publicKey = new AnyPublicKey(this.publicKey);\n    return new AccountAuthenticatorSingleKey(publicKey, signature);\n  }\n\n  /**\n   * Waits for asynchronous proof fetching to finish.\n   * @return\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async waitForProofFetch() {\n    if (this.proofOrPromise instanceof Promise) {\n      await this.proofOrPromise;\n    }\n  }\n\n  /**\n   * Validates that the Keyless Account can be used to sign transactions.\n   * @return\n   */\n  async checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void> {\n    if (this.isExpired()) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.EPHEMERAL_KEY_PAIR_EXPIRED,\n      });\n    }\n    await this.waitForProofFetch();\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.ASYNC_PROOF_FETCH_FAILED,\n      });\n    }\n    const header = jwtDecode(this.jwt, { header: true });\n    if (header.kid === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.JWT_PARSING_ERROR,\n        details: \"checkKeylessAccountValidity failed. JWT is missing 'kid' in header. This should never happen.\",\n      });\n    }\n    if (this.verificationKeyHash !== undefined) {\n      const { verificationKey } = await getKeylessConfig({ aptosConfig });\n      if (Hex.hexInputToString(verificationKey.hash()) !== Hex.hexInputToString(this.verificationKeyHash)) {\n        throw KeylessError.fromErrorType({\n          type: KeylessErrorType.INVALID_PROOF_VERIFICATION_KEY_NOT_FOUND,\n        });\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"[Aptos SDK] The verification key hash was not set. Proof may be invalid if the verification key has rotated.\",\n      );\n    }\n    await AbstractKeylessAccount.fetchJWK({ aptosConfig, publicKey: this.publicKey, kid: header.kid });\n  }\n\n  /**\n   * Sign the given message using Keyless.\n   * @param message in HexInput format\n   * @returns Signature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(message: HexInput): KeylessSignature {\n    const { expiryDateSecs } = this.ephemeralKeyPair;\n    if (this.isExpired()) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.EPHEMERAL_KEY_PAIR_EXPIRED,\n      });\n    }\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const ephemeralPublicKey = this.ephemeralKeyPair.getPublicKey();\n    const ephemeralSignature = this.ephemeralKeyPair.sign(message);\n\n    return new KeylessSignature({\n      jwtHeader: base64UrlDecode(this.jwt.split(\".\")[0]),\n      ephemeralCertificate: new EphemeralCertificate(this.proof, EphemeralCertificateVariant.ZkProof),\n      expiryDateSecs,\n      ephemeralPublicKey,\n      ephemeralSignature,\n    });\n  }\n\n  /**\n   * Sign the given transaction with Keyless.\n   * Signs the transaction and proof to guard against proof malleability.\n   * @param transaction the transaction to be signed\n   * @returns KeylessSignature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): KeylessSignature {\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const raw = deriveTransactionType(transaction);\n    const txnAndProof = new TransactionAndProof(raw, this.proof.proof);\n    const signMess = txnAndProof.hash();\n    return this.sign(signMess);\n  }\n\n  getSigningMessage(transaction: AnyRawTransaction): Uint8Array {\n    if (this.proof === undefined) {\n      throw KeylessError.fromErrorType({\n        type: KeylessErrorType.PROOF_NOT_FOUND,\n        details: \"Proof not found - make sure to call `await account.checkKeylessAccountValidity()` before signing.\",\n      });\n    }\n    const raw = deriveTransactionType(transaction);\n    const txnAndProof = new TransactionAndProof(raw, this.proof.proof);\n    return txnAndProof.hash();\n  }\n\n  /**\n   * Note - This function is currently incomplete and should only be used to verify ownership of the KeylessAccount\n   *\n   * Verifies a signature given the message.\n   *\n   * @param args.message the message that was signed.\n   * @param args.signature the KeylessSignature to verify\n   * @returns boolean\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: {\n    message: HexInput;\n    signature: KeylessSignature;\n    jwk: MoveJWK;\n    keylessConfig: KeylessConfiguration;\n  }): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: KeylessSignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n    });\n  }\n\n  /**\n   * Fetches the JWK from the issuer's well-known JWKS endpoint.\n   *\n   * @param args.publicKey The keyless public key to query\n   * @param args.kid The kid of the JWK to fetch\n   * @returns A JWK matching the `kid` in the JWT header.\n   * @throws {KeylessError} If the JWK cannot be fetched\n   */\n  static async fetchJWK(args: {\n    aptosConfig: AptosConfig;\n    publicKey: KeylessPublicKey | FederatedKeylessPublicKey;\n    kid: string;\n  }): Promise<MoveJWK> {\n    return fetchJWK(args);\n  }\n}\n\n/**\n * A container class to hold a transaction and a proof.  It implements CryptoHashable which is used to create\n * the signing message for Keyless transactions.  We sign over the proof to ensure non-malleability.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class TransactionAndProof extends Serializable {\n  /**\n   * The transaction to sign.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  transaction: AnyRawTransactionInstance;\n\n  /**\n   * The zero knowledge proof used in signing the transaction.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  proof?: ZkProof;\n\n  /**\n   * The domain separator prefix used when hashing.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly domainSeparator = \"APTOS::TransactionAndProof\";\n\n  constructor(transaction: AnyRawTransactionInstance, proof?: ZkProof) {\n    super();\n    this.transaction = transaction;\n    this.proof = proof;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.transaction.bcsToBytes());\n    serializer.serializeOption(this.proof);\n  }\n\n  /**\n   * Hashes the bcs serialized from of the class. This is the typescript corollary to the BCSCryptoHash macro in aptos-core.\n   *\n   * @returns Uint8Array\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  hash(): Uint8Array {\n    return generateSigningMessage(this.bcsToBytes(), this.domainSeparator);\n  }\n}\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchSuccess = {\n  status: \"Success\";\n};\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchFailure = {\n  status: \"Failed\";\n  error: string;\n};\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchStatus = ProofFetchSuccess | ProofFetchFailure;\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport type ProofFetchCallback = (status: ProofFetchStatus) => Promise<void>;\n/**\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface ProofFetchEvents {\n  proofFetchFinish: (status: ProofFetchStatus) => void;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexInput } from \"../types\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { getIssAudAndUidVal, Groth16VerificationKey, KeylessPublicKey, ZeroKnowledgeSig } from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Deserializer, Serializer } from \"../bcs\";\nimport { AbstractKeylessAccount, ProofFetchCallback } from \"./AbstractKeylessAccount\";\nimport { Hex } from \"../core/hex\";\n\n/**\n * Account implementation for the Keyless authentication scheme.\n *\n * Used to represent a Keyless based account and sign transactions with it.\n *\n * Use `KeylessAccount.create()` to instantiate a KeylessAccount with a JWT, proof and EphemeralKeyPair.\n *\n * When the proof expires or the JWT becomes invalid, the KeylessAccount must be instantiated again with a new JWT,\n * EphemeralKeyPair, and corresponding proof.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class KeylessAccount extends AbstractKeylessAccount {\n  /**\n   * The KeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: KeylessPublicKey;\n\n  // Use the static constructor 'create' instead.\n\n  /**\n   * Use the static generator `create(...)` instead.\n   * Creates an instance of the KeylessAccount with an optional proof.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.iss - A JWT issuer.\n   * @param args.uidKey - The claim on the JWT to identify a user.  This is typically 'sub' or 'email'.\n   * @param args.uidVal - The unique id for this user, intended to be a stable user identifier.\n   * @param args.aud - The value of the 'aud' claim on the JWT, also known as client ID.  This is the identifier for the dApp's\n   * OIDC registration with the identity provider.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: {\n    address?: AccountAddress;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n  }) {\n    const publicKey = KeylessPublicKey.create(args);\n    super({ publicKey, ...args });\n    this.publicKey = publicKey;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  serialize(serializer: Serializer): void {\n    super.serialize(serializer);\n  }\n\n  /**\n   * Deserializes the provided deserializer to create a KeylessAccount instance.\n   * This function extracts necessary components such as the JWT, UID key, pepper, ephemeral key pair, and proof from the deserializer.\n   *\n   * @param deserializer - The deserializer instance used to retrieve the serialized data.\n   * @returns A KeylessAccount instance created from the deserialized data.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static deserialize(deserializer: Deserializer): KeylessAccount {\n    const { address, proof, ephemeralKeyPair, jwt, uidKey, pepper, verificationKeyHash } =\n      AbstractKeylessAccount.partialDeserialize(deserializer);\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new KeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      verificationKeyHash,\n    });\n  }\n\n  /**\n   * Deserialize bytes using this account's information.\n   *\n   * @param bytes The bytes being interpreted.\n   * @returns\n   */\n  static fromBytes(bytes: HexInput): KeylessAccount {\n    return KeylessAccount.deserialize(new Deserializer(Hex.hexInputToUint8Array(bytes)));\n  }\n\n  /**\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   * This is used instead of the KeylessAccount constructor.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.pepper - A hexadecimal input used for additional security.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static create(args: {\n    address?: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper: HexInput;\n    uidKey?: string;\n    proofFetchCallback?: ProofFetchCallback;\n    verificationKey?: Groth16VerificationKey;\n  }): KeylessAccount {\n    const { address, proof, jwt, ephemeralKeyPair, pepper, uidKey = \"sub\", proofFetchCallback, verificationKey } = args;\n\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new KeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      proofFetchCallback,\n      verificationKeyHash: verificationKey ? verificationKey.hash() : undefined,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexInput } from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { getIssAudAndUidVal, Groth16VerificationKey, ZeroKnowledgeSig } from \"../core/crypto\";\n\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\nimport { Deserializer, Serializer } from \"../bcs\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { AbstractKeylessAccount, ProofFetchCallback } from \"./AbstractKeylessAccount\";\n\n/**\n * Account implementation for the FederatedKeyless authentication scheme.\n *\n * Used to represent a FederatedKeyless based account and sign transactions with it.\n *\n * Use `FederatedKeylessAccount.create()` to instantiate a KeylessAccount with a JSON Web Token (JWT), proof, EphemeralKeyPair and the\n * address the JSON Web Key Set (JWKS) are installed that will be used to verify the JWT.\n *\n * When the proof expires or the JWT becomes invalid, the KeylessAccount must be instantiated again with a new JWT,\n * EphemeralKeyPair, and corresponding proof.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class FederatedKeylessAccount extends AbstractKeylessAccount {\n  /**\n   * The FederatedKeylessPublicKey associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: FederatedKeylessPublicKey;\n\n  readonly audless: boolean;\n\n  /**\n   * Use the static generator `FederatedKeylessAccount.create(...)` instead.\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.jwkAddress - The address which stores the JSON Web Key Set (JWKS) used to verify the JWT.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   */\n  constructor(args: {\n    address?: AccountAddress;\n    ephemeralKeyPair: EphemeralKeyPair;\n    iss: string;\n    uidKey: string;\n    uidVal: string;\n    aud: string;\n    pepper: HexInput;\n    jwkAddress: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    proofFetchCallback?: ProofFetchCallback;\n    jwt: string;\n    verificationKeyHash?: HexInput;\n    audless?: boolean;\n  }) {\n    const publicKey = FederatedKeylessPublicKey.create(args);\n    super({ publicKey, ...args });\n    this.publicKey = publicKey;\n    this.audless = args.audless ?? false;\n  }\n\n  /**\n   * Serializes the transaction data into a format suitable for transmission or storage.\n   * This function ensures that both the transaction bytes and the proof are properly serialized.\n   *\n   * @param serializer - The serializer instance used to convert the transaction data into bytes.\n   */\n  serialize(serializer: Serializer): void {\n    super.serialize(serializer);\n    this.publicKey.jwkAddress.serialize(serializer);\n  }\n\n  /**\n   * Deserializes the provided deserializer to create a KeylessAccount instance.\n   * This function extracts necessary components such as the JWT, UID key, pepper, ephemeral key pair, and proof from the deserializer.\n   *\n   * @param deserializer - The deserializer instance used to retrieve the serialized data.\n   * @returns A KeylessAccount instance created from the deserialized data.\n   */\n  static deserialize(deserializer: Deserializer): FederatedKeylessAccount {\n    const { address, proof, ephemeralKeyPair, jwt, uidKey, pepper, verificationKeyHash } =\n      AbstractKeylessAccount.partialDeserialize(deserializer);\n    const jwkAddress = AccountAddress.deserialize(deserializer);\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new FederatedKeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwt,\n      verificationKeyHash,\n      jwkAddress,\n    });\n  }\n\n  /**\n   * Deserialize bytes using this account's information.\n   *\n   * @param bytes The bytes being interpreted.\n   * @returns\n   */\n  static fromBytes(bytes: HexInput): FederatedKeylessAccount {\n    return FederatedKeylessAccount.deserialize(Deserializer.fromHex(bytes));\n  }\n\n  /**\n   * Creates a KeylessAccount instance using the provided parameters.\n   * This function allows you to set up a KeylessAccount with specific attributes such as address, proof, and JWT.\n   * This is used instead of the KeylessAccount constructor.\n   *\n   * @param args - The parameters for creating a KeylessAccount.\n   * @param args.address - Optional account address associated with the KeylessAccount.\n   * @param args.proof - A Zero Knowledge Signature or a promise that resolves to one.\n   * @param args.jwt - A JSON Web Token used for authentication.\n   * @param args.ephemeralKeyPair - The ephemeral key pair used in the account creation.\n   * @param args.jwkAddress - The address which stores the JSON Web Key Set (JWKS) used to verify the JWT.\n   * @param args.uidKey - Optional key for user identification, defaults to \"sub\".\n   * @param args.proofFetchCallback - Optional callback function for fetching proof.\n   */\n  static create(args: {\n    address?: AccountAddress;\n    proof: ZeroKnowledgeSig | Promise<ZeroKnowledgeSig>;\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper: HexInput;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n    proofFetchCallback?: ProofFetchCallback;\n    verificationKey?: Groth16VerificationKey;\n  }): FederatedKeylessAccount {\n    const {\n      address,\n      proof,\n      jwt,\n      ephemeralKeyPair,\n      pepper,\n      jwkAddress,\n      uidKey = \"sub\",\n      proofFetchCallback,\n      verificationKey,\n    } = args;\n\n    const { iss, aud, uidVal } = getIssAudAndUidVal({ jwt, uidKey });\n    return new FederatedKeylessAccount({\n      address,\n      proof,\n      ephemeralKeyPair,\n      iss,\n      uidKey,\n      uidVal,\n      aud,\n      pepper,\n      jwkAddress: AccountAddress.from(jwkAddress),\n      jwt,\n      proofFetchCallback,\n      verificationKeyHash: verificationKey ? verificationKey.hash() : undefined,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Account } from \"./Account\";\nimport { MultiKey, MultiKeySignature, PublicKey } from \"../core/crypto\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport { AccountAuthenticatorMultiKey } from \"../transactions/authenticator/account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { AbstractKeylessAccount, KeylessSigner } from \"./AbstractKeylessAccount\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { SingleKeyAccount, SingleKeySigner, SingleKeySignerOrLegacyEd25519Account } from \"./SingleKeyAccount\";\nimport { Ed25519Account } from \"./Ed25519Account\";\n\n/**\n * Arguments required to verify a multi-key signature against a given message.\n *\n * @param message - The original message that was signed.\n * @param signature - The multi-key signature to be verified.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport interface VerifyMultiKeySignatureArgs {\n  message: HexInput;\n  signature: MultiKeySignature;\n}\n\n/**\n * Signer implementation for the MultiKey authentication scheme.\n *\n * This account utilizes an M of N signing scheme, where M and N are specified in the {@link MultiKey}.\n * It signs messages using an array of M accounts, each corresponding to a public key in the {@link MultiKey}.\n *\n * Note: Generating a signer instance does not create the account on-chain.\n * @group Implementation\n * @category Account (On-Chain Model)\n */\nexport class MultiKeyAccount implements Account, KeylessSigner {\n  /**\n   * Public key associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly publicKey: MultiKey;\n\n  /**\n   * Account address associated with the account\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signingScheme: SigningScheme = SigningScheme.MultiKey;\n\n  /**\n   * The signers used to sign messages.  These signers should correspond to public keys in the\n   * MultiKeyAccount's public key.  The number of signers should be equal to this.publicKey.signaturesRequired.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signers: Account[];\n\n  /**\n   * An array of indices where for signer[i], signerIndicies[i] is the index of the corresponding public key in\n   * publicKey.publicKeys.  Used to derive the right public key to use for verification.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  // TODO: Rename Indicies to Indices\n  readonly signerIndicies: number[];\n\n  readonly signaturesBitmap: Uint8Array;\n\n  /**\n   * Constructs a MultiKeyAccount instance, which requires multiple signatures for transactions.\n   *\n   * @param args - The arguments for creating a MultiKeyAccount.\n   * @param args.multiKey - The multikey of the account consisting of N public keys and a number M representing the required signatures.\n   * @param args.signers - An array of M signers that will be used to sign the transaction.\n   * @param args.address - An optional account address input. If not provided, the derived address from the public key will be used.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  constructor(args: {\n    multiKey: MultiKey;\n    signers: SingleKeySignerOrLegacyEd25519Account[];\n    address?: AccountAddressInput;\n  }) {\n    const { multiKey, address } = args;\n\n    const signers: SingleKeySigner[] = args.signers.map((signer) =>\n      signer instanceof Ed25519Account ? SingleKeyAccount.fromEd25519Account(signer) : signer,\n    );\n\n    if (multiKey.signaturesRequired > signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `Not enough signers provided to satisfy the required signatures. Need ${multiKey.signaturesRequired} signers, but only ${signers.length} provided`,\n      );\n    } else if (multiKey.signaturesRequired < signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `More signers provided than required. Need ${multiKey.signaturesRequired} signers, but ${signers.length} provided`,\n      );\n    }\n\n    this.publicKey = multiKey;\n\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n\n    // For each signer, find its corresponding position in the MultiKey's public keys array\n    const bitPositions: number[] = [];\n    for (const signer of signers) {\n      bitPositions.push(this.publicKey.getIndex(signer.getAnyPublicKey()));\n    }\n\n    // Create pairs of [signer, position] and sort them by position\n    // This sorting is critical because:\n    // 1. The on-chain verification expects signatures to be in ascending order by bit position\n    // 2. The bitmap must match the order of signatures when verifying\n    const signersAndBitPosition: [Account, number][] = signers.map((signer, index) => [signer, bitPositions[index]]);\n    signersAndBitPosition.sort((a, b) => a[1] - b[1]);\n\n    // Extract the sorted signers and their positions into separate arrays\n    this.signers = signersAndBitPosition.map((value) => value[0]);\n    this.signerIndicies = signersAndBitPosition.map((value) => value[1]);\n\n    // Create a bitmap representing which public keys from the MultiKey are being used\n    // This bitmap is used during signature verification to identify which public keys\n    // should be used to verify each signature\n    this.signaturesBitmap = this.publicKey.createBitmap({ bits: bitPositions });\n  }\n\n  /**\n   * Static constructor to create a MultiKeyAccount using the provided public keys and signers.\n   *\n   * @param args - The arguments for creating a MultiKeyAccount.\n   * @param args.publicKeys - The N public keys of the MultiKeyAccount.\n   * @param args.signaturesRequired - The number of signatures required to authorize a transaction.\n   * @param args.signers - An array of M signers that will be used to sign the transaction.\n   * @returns MultiKeyAccount - The newly created MultiKeyAccount.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static fromPublicKeysAndSigners(args: {\n    address?: AccountAddressInput;\n    publicKeys: PublicKey[];\n    signaturesRequired: number;\n    signers: SingleKeySignerOrLegacyEd25519Account[];\n  }): MultiKeyAccount {\n    const { address, publicKeys, signaturesRequired, signers } = args;\n    const multiKey = new MultiKey({ publicKeys, signaturesRequired });\n    return new MultiKeyAccount({ multiKey, signers, address });\n  }\n\n  /**\n   * Determines if the provided account is a multi-key account.\n   *\n   * @param account - The account to check.\n   * @returns A boolean indicating whether the account is a multi-key account.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  static isMultiKeySigner(account: Account): account is MultiKeyAccount {\n    return account instanceof MultiKeyAccount;\n  }\n\n  /**\n   * Sign a message using the account's signers and return an AccountAuthenticator containing the signature along with the\n   * account's public key.\n   * @param message - The signing message, represented as binary input in hexadecimal format.\n   * @returns An instance of AccountAuthenticatorMultiKey that includes the signature and the public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorMultiKey {\n    return new AccountAuthenticatorMultiKey(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's signers, returning an AccountAuthenticator that contains the signature and the\n   * account's public key.\n   * @param transaction - The raw transaction to be signed.\n   * @returns An AccountAuthenticatorMultiKey containing the signature of the transaction along with the account's public key.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorMultiKey {\n    return new AccountAuthenticatorMultiKey(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Waits for any proofs on KeylessAccount signers to be fetched. This ensures that signing with the KeylessAccount does not\n   * fail due to missing proofs.\n   * @return {Promise<void>} A promise that resolves when all proofs have been fetched.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async waitForProofFetch(): Promise<void> {\n    const keylessSigners = this.signers.filter(\n      (signer) => signer instanceof AbstractKeylessAccount,\n    ) as AbstractKeylessAccount[];\n    const promises = keylessSigners.map(async (signer) => signer.waitForProofFetch());\n    await Promise.all(promises);\n  }\n\n  /**\n   * Validates that the Keyless Account can be used to sign transactions.\n   * @return\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async checkKeylessAccountValidity(aptosConfig: AptosConfig): Promise<void> {\n    const keylessSigners = this.signers.filter(\n      (signer) => signer instanceof AbstractKeylessAccount,\n    ) as AbstractKeylessAccount[];\n    const promises = keylessSigners.map((signer) => signer.checkKeylessAccountValidity(aptosConfig));\n    await Promise.all(promises);\n  }\n\n  /**\n   * Sign the given message using the MultiKeyAccount's signers\n   * @param data - The data to be signed in HexInput format.\n   * @returns MultiKeySignature\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  sign(data: HexInput): MultiKeySignature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.sign(data));\n    }\n    return new MultiKeySignature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Sign the given transaction using the MultiKeyAccount's signers.\n   * This function aggregates signatures from all signers associated with the MultiKeyAccount.\n   *\n   * @param transaction - The transaction to be signed.\n   * @returns MultiKeySignature - An object containing the aggregated signatures and a bitmap of the signatures.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  signTransaction(transaction: AnyRawTransaction): MultiKeySignature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.signTransaction(transaction));\n    }\n    return new MultiKeySignature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Verify the given message and signature with the public keys.\n   *\n   * This function checks if the provided signatures are valid for the given message using the corresponding public keys.\n   * Note: If you are using KeylessAccounts, you must use `verifySignatureAsync` instead.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message MultiKeySignature containing multiple signatures.\n   * @returns A boolean indicating whether the signatures are valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  verifySignature(args: { message: HexInput; signature: MultiKeySignature }): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public keys.\n   *\n   * This function checks if the provided signatures are valid for the given message using the corresponding public keys.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.message - The raw message data in HexInput format.\n   * @param args.signature - The signed message MultiKeySignature containing multiple signatures.\n   * @param args.options.throwErrorWithReason - Whether to throw an error with the reason for the verification failure.\n   * @returns A boolean indicating whether the signatures are valid for the message.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: MultiKeySignature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return await this.publicKey.verifySignatureAsync(args);\n  }\n}\n","import { AptosConfig } from \"../api\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Ed25519PrivateKey, Signature } from \"../core/crypto\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../core/crypto/multiEd25519\";\nimport { AccountAuthenticatorMultiEd25519 } from \"../transactions/authenticator/account\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { HexInput, SigningScheme } from \"../types\";\nimport type { Account } from \"./Account\";\n\nexport interface MultiEd25519SignerConstructorArgs {\n  publicKey: MultiEd25519PublicKey;\n  signers: Ed25519PrivateKey[];\n  address?: AccountAddressInput;\n}\n\nexport interface VerifyMultiEd25519SignatureArgs {\n  message: HexInput;\n  signature: MultiEd25519Signature;\n}\n\n/**\n * Signer implementation for the Multi-Ed25519 authentication scheme.\n *\n * Note: This authentication scheme is a legacy authentication scheme.  Prefer using MultiKeyAccounts as a\n * MultiKeyAccount can support any type of signer, not just Ed25519.  Generating a signer instance does not\n * create the account on-chain.\n */\nexport class MultiEd25519Account implements Account {\n  readonly publicKey: MultiEd25519PublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly signingScheme = SigningScheme.MultiEd25519;\n\n  /**\n   * The signers used to sign messages.  These signers should correspond to public keys in the\n   * MultiEd25519Account.  The number of signers should be equal to this.publicKey.threshold.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signers: Ed25519PrivateKey[];\n\n  /**\n   * An array of indices where for signer[i], signerIndicies[i] is the index of the corresponding public key in\n   * publicKey.publicKeys.  Used to derive the right public key to use for verification.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  readonly signerIndices: number[];\n\n  readonly signaturesBitmap: Uint8Array;\n\n  // region Constructors\n\n  constructor(args: MultiEd25519SignerConstructorArgs) {\n    const { signers, publicKey, address } = args;\n    this.publicKey = publicKey;\n    this.accountAddress = address ? AccountAddress.from(address) : this.publicKey.authKey().derivedAddress();\n\n    if (publicKey.threshold > signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `Not enough signers provided to satisfy the required signatures. Need ${publicKey.threshold} signers, but only ${signers.length} provided`,\n      );\n    } else if (publicKey.threshold < signers.length) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        `More signers provided than required. Need ${publicKey.threshold} signers, but ${signers.length} provided`,\n      );\n    }\n\n    // For each signer, find its corresponding position in the public keys array\n    const bitPositions: number[] = [];\n    for (const signer of signers) {\n      bitPositions.push(this.publicKey.getIndex(signer.publicKey()));\n    }\n\n    // Create pairs of [signer, position] and sort them by position\n    // This sorting is critical because:\n    // 1. The on-chain verification expects signatures to be in ascending order by bit position\n    // 2. The bitmap must match the order of signatures when verifying\n    const signersAndBitPosition: [Ed25519PrivateKey, number][] = signers.map((signer, index) => [\n      signer,\n      bitPositions[index],\n    ]);\n    signersAndBitPosition.sort((a, b) => a[1] - b[1]);\n\n    // Extract the sorted signers and their positions into separate arrays\n    this.signers = signersAndBitPosition.map((value) => value[0]);\n    this.signerIndices = signersAndBitPosition.map((value) => value[1]);\n\n    // Create a bitmap representing which public keys from the MultiEd25519PublicKey are being used\n    // This bitmap is used during signature verification to identify which public keys\n    // should be used to verify each signature\n    this.signaturesBitmap = this.publicKey.createBitmap({ bits: bitPositions });\n  }\n\n  // endregion\n\n  // region Account\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args.message raw message data in HexInput format\n   * @param args.signature signed message Signature\n   * @returns\n   */\n  verifySignature(args: VerifyMultiEd25519SignatureArgs): boolean {\n    return this.publicKey.verifySignature(args);\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * MultiEd25519 signatures do not depend on chain state, so this function is\n   * equivalent to the synchronous verifySignature method.\n   *\n   * @param args - The arguments for verifying the signature.\n   * @param args.aptosConfig - The configuration object for connecting to the Aptos network\n   * @param args.message - Raw message data in HexInput format.\n   * @param args.signature - Signed message signature.\n   * @returns A boolean indicating whether the signature is valid.\n   * @group Implementation\n   * @category Account (On-Chain Model)\n   */\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n    options?: { throwErrorWithReason?: boolean };\n  }): Promise<boolean> {\n    return this.publicKey.verifySignatureAsync({\n      ...args,\n      signature: args.signature,\n    });\n  }\n\n  /**\n   * Sign a message using the account's Ed25519 private key.\n   * @param message the signing message, as binary input\n   * @return the AccountAuthenticator containing the signature, together with the account's public key\n   */\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorMultiEd25519 {\n    return new AccountAuthenticatorMultiEd25519(this.publicKey, this.sign(message));\n  }\n\n  /**\n   * Sign a transaction using the account's Ed25519 private keys.\n   * @param transaction the raw transaction\n   * @return the AccountAuthenticator containing the signature of the transaction, together with the account's public key\n   */\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorMultiEd25519 {\n    return new AccountAuthenticatorMultiEd25519(this.publicKey, this.signTransaction(transaction));\n  }\n\n  /**\n   * Sign the given message using the account's Ed25519 private keys.\n   * @param message in HexInput format\n   * @returns MultiEd25519Signature\n   */\n  sign(message: HexInput): MultiEd25519Signature {\n    const signatures = [];\n    for (const signer of this.signers) {\n      signatures.push(signer.sign(message));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap: this.signaturesBitmap });\n  }\n\n  /**\n   * Sign the given transaction using the available signing capabilities.\n   * @param transaction the transaction to be signed\n   * @returns Signature\n   */\n  signTransaction(transaction: AnyRawTransaction): MultiEd25519Signature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  // endregion\n}\n","import { SigningScheme } from \"../types\";\nimport { AccountAddress } from \"../core\";\nimport { Deserializer } from \"../bcs/deserializer\";\n\nexport function deserializeSchemeAndAddress(deserializer: Deserializer): {\n  address: AccountAddress;\n  signingScheme: SigningScheme;\n} {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  // Validate that signingScheme is a valid SigningScheme value\n  if (!Object.values(SigningScheme).includes(signingScheme)) {\n    throw new Error(`Deserialization of Account failed: SigningScheme variant ${signingScheme} is invalid`);\n  }\n  const address = AccountAddress.deserialize(deserializer);\n  return { address, signingScheme };\n}\n","import { Deserializer, Serializer } from \"../bcs\";\nimport { AnyPublicKeyVariant, HexInput, SigningScheme } from \"../types\";\nimport { MultiKeyAccount } from \"./MultiKeyAccount\";\nimport { Account } from \"./Account\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { isSingleKeySigner, SingleKeyAccount, SingleKeySignerOrLegacyEd25519Account } from \"./SingleKeyAccount\";\nimport { KeylessAccount } from \"./KeylessAccount\";\nimport { FederatedKeylessAccount } from \"./FederatedKeylessAccount\";\nimport { AbstractKeylessAccount } from \"./AbstractKeylessAccount\";\nimport {\n  AccountAddress,\n  Ed25519PrivateKey,\n  getIssAudAndUidVal,\n  Hex,\n  MultiKey,\n  Secp256k1PrivateKey,\n  ZeroKnowledgeSig,\n} from \"../core\";\nimport { deserializeSchemeAndAddress } from \"./utils\";\nimport { EphemeralKeyPair } from \"./EphemeralKeyPair\";\n\nfunction serializeKeylessAccountCommon(account: AbstractKeylessAccount, serializer: Serializer): void {\n  serializer.serializeStr(account.jwt);\n  serializer.serializeStr(account.uidKey);\n  serializer.serializeFixedBytes(account.pepper);\n  account.ephemeralKeyPair.serialize(serializer);\n  if (account.proof === undefined) {\n    throw new Error(\"Cannot serialize - proof undefined\");\n  }\n  account.proof.serialize(serializer);\n  serializer.serializeOption(account.verificationKeyHash, 32);\n}\n\nfunction deserializeKeylessAccountCommon(deserializer: Deserializer): {\n  jwt: string;\n  uidKey: string;\n  pepper: Uint8Array;\n  ephemeralKeyPair: EphemeralKeyPair;\n  proof: ZeroKnowledgeSig;\n  verificationKeyHash?: Uint8Array;\n} {\n  const jwt = deserializer.deserializeStr();\n  const uidKey = deserializer.deserializeStr();\n  const pepper = deserializer.deserializeFixedBytes(31);\n  const ephemeralKeyPair = EphemeralKeyPair.deserialize(deserializer);\n  const proof = ZeroKnowledgeSig.deserialize(deserializer);\n  const verificationKeyHash = deserializer.deserializeOption(\"fixedBytes\", 32);\n  return { jwt, uidKey, pepper, ephemeralKeyPair, proof, verificationKeyHash };\n}\n\n/**\n * Utility functions for working with accounts.\n */\nexport namespace AccountUtils {\n  export function toBytes(account: Account): Uint8Array {\n    const serializer = new Serializer();\n    serializer.serializeU32AsUleb128(account.signingScheme);\n    account.accountAddress.serialize(serializer);\n    switch (account.signingScheme) {\n      case SigningScheme.Ed25519:\n        (account as Ed25519Account).privateKey.serialize(serializer);\n        return serializer.toUint8Array();\n      case SigningScheme.SingleKey: {\n        if (!isSingleKeySigner(account)) {\n          throw new Error(\"Account is not a SingleKeySigner\");\n        }\n        const anyPublicKey = account.getAnyPublicKey();\n        serializer.serializeU32AsUleb128(anyPublicKey.variant);\n        switch (anyPublicKey.variant) {\n          case AnyPublicKeyVariant.Keyless: {\n            const keylessAccount = account as KeylessAccount;\n            serializeKeylessAccountCommon(keylessAccount, serializer);\n            return serializer.toUint8Array();\n          }\n          case AnyPublicKeyVariant.FederatedKeyless: {\n            const federatedKeylessAccount = account as FederatedKeylessAccount;\n            serializeKeylessAccountCommon(federatedKeylessAccount, serializer);\n            federatedKeylessAccount.publicKey.jwkAddress.serialize(serializer);\n            serializer.serializeBool(federatedKeylessAccount.audless);\n            return serializer.toUint8Array();\n          }\n          case AnyPublicKeyVariant.Secp256k1:\n          case AnyPublicKeyVariant.Ed25519: {\n            const singleKeyAccount = account as SingleKeyAccount;\n            singleKeyAccount.privateKey.serialize(serializer);\n            return serializer.toUint8Array();\n          }\n          default: {\n            throw new Error(`Invalid public key variant: ${anyPublicKey.variant}`);\n          }\n        }\n      }\n      case SigningScheme.MultiKey: {\n        const multiKeyAccount = account as MultiKeyAccount;\n        multiKeyAccount.publicKey.serialize(serializer);\n        serializer.serializeU32AsUleb128(multiKeyAccount.signers.length);\n        multiKeyAccount.signers.forEach((signer) => {\n          serializer.serializeFixedBytes(toBytes(signer));\n        });\n        return serializer.toUint8Array();\n      }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${account.signingScheme}`);\n    }\n  }\n\n  export function toHexStringWithoutPrefix(account: Account): string {\n    return Hex.hexInputToStringWithoutPrefix(toBytes(account));\n  }\n\n  export function toHexString(account: Account): string {\n    return Hex.hexInputToString(toBytes(account));\n  }\n\n  export function deserialize(deserializer: Deserializer): Account {\n    const { address, signingScheme } = deserializeSchemeAndAddress(deserializer);\n    switch (signingScheme) {\n      case SigningScheme.Ed25519: {\n        const privateKey = Ed25519PrivateKey.deserialize(deserializer);\n        return new Ed25519Account({ privateKey, address });\n      }\n      case SigningScheme.SingleKey: {\n        const variantIndex = deserializer.deserializeUleb128AsU32();\n        switch (variantIndex) {\n          case AnyPublicKeyVariant.Ed25519: {\n            const privateKey = Ed25519PrivateKey.deserialize(deserializer);\n            return new SingleKeyAccount({ privateKey, address });\n          }\n          case AnyPublicKeyVariant.Secp256k1: {\n            const privateKey = Secp256k1PrivateKey.deserialize(deserializer);\n            return new SingleKeyAccount({ privateKey, address });\n          }\n          case AnyPublicKeyVariant.Keyless: {\n            const keylessComponents = deserializeKeylessAccountCommon(deserializer);\n            const jwtClaims = getIssAudAndUidVal(keylessComponents);\n            return new KeylessAccount({ ...keylessComponents, ...jwtClaims });\n          }\n          case AnyPublicKeyVariant.FederatedKeyless: {\n            const keylessComponents = deserializeKeylessAccountCommon(deserializer);\n            const jwkAddress = AccountAddress.deserialize(deserializer);\n            const audless = deserializer.deserializeBool();\n            const jwtClaims = getIssAudAndUidVal(keylessComponents);\n            return new FederatedKeylessAccount({ ...keylessComponents, ...jwtClaims, jwkAddress, audless });\n          }\n          default:\n            throw new Error(`Unsupported public key variant ${variantIndex}`);\n        }\n      }\n      case SigningScheme.MultiKey: {\n        const multiKey = MultiKey.deserialize(deserializer);\n        const length = deserializer.deserializeUleb128AsU32();\n        const signers = new Array<SingleKeySignerOrLegacyEd25519Account>();\n        for (let i = 0; i < length; i += 1) {\n          const signer = deserialize(deserializer);\n          if (!isSingleKeySigner(signer) && !(signer instanceof Ed25519Account)) {\n            throw new Error(\n              \"Deserialization of MultiKeyAccount failed. Signer is not a SingleKeySigner or Ed25519Account\",\n            );\n          }\n          signers.push(signer);\n        }\n        return new MultiKeyAccount({ multiKey, signers, address });\n      }\n      default:\n        throw new Error(`Deserialization of Account failed: invalid signingScheme value ${signingScheme}`);\n    }\n  }\n\n  export function keylessAccountFromHex(hex: HexInput): KeylessAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof KeylessAccount)) {\n      throw new Error(\"Deserialization of KeylessAccount failed\");\n    }\n    return account;\n  }\n\n  export function federatedKeylessAccountFromHex(hex: HexInput): FederatedKeylessAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof FederatedKeylessAccount)) {\n      throw new Error(\"Deserialization of FederatedKeylessAccount failed\");\n    }\n    return account;\n  }\n\n  export function multiKeyAccountFromHex(hex: HexInput): MultiKeyAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof MultiKeyAccount)) {\n      throw new Error(\"Deserialization of MultiKeyAccount failed\");\n    }\n    return account;\n  }\n\n  export function singleKeyAccountFromHex(hex: HexInput): SingleKeyAccount {\n    const account = fromHex(hex);\n    if (!(account instanceof SingleKeyAccount)) {\n      throw new Error(\"Deserialization of SingleKeyAccount failed\");\n    }\n    return account;\n  }\n\n  export function ed25519AccountFromHex(hex: HexInput): Ed25519Account {\n    const account = fromHex(hex);\n    if (!(account instanceof Ed25519Account)) {\n      throw new Error(\"Deserialization of Ed25519Account failed\");\n    }\n    return account;\n  }\n\n  export function fromHex(hex: HexInput): Account {\n    return deserialize(Deserializer.fromHex(hex));\n  }\n\n  export function fromBytes(bytes: Uint8Array): Account {\n    return fromHex(bytes);\n  }\n}\n","import { sha3_256 } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"../core\";\nimport { AbstractPublicKey, AbstractSignature } from \"../core/crypto/abstraction\";\nimport { SigningScheme, HexInput } from \"../types\";\nimport { Account } from \"./Account\";\nimport { AnyRawTransaction } from \"../transactions/types\";\nimport { generateSigningMessageForTransaction } from \"../transactions/transactionBuilder/signingMessage\";\nimport { AccountAuthenticatorAbstraction } from \"../transactions/authenticator/account\";\nimport { Ed25519Account } from \"./Ed25519Account\";\nimport { Serializer } from \"../bcs/serializer\";\nimport { isValidFunctionInfo } from \"../utils/helpers\";\n\ntype AbstractedAccountConstructorArgs = {\n  /**\n   * The account address of the account.\n   */\n  accountAddress: AccountAddress;\n  /**\n   * The signer function signs transactions and returns the `authenticator` bytes in the `AbstractionAuthData`.\n   *\n   * @param digest - The SHA256 hash of the transaction signing message\n   * @returns The `authenticator` bytes that can be used to verify the signature.\n   */\n  signer: (digest: HexInput) => Uint8Array;\n  /**\n   * The authentication function that will be used to verify the signature.\n   *\n   * @example\n   * ```ts\n   * const authenticationFunction = `${accountAddress}::permissioned_delegation::authenticate`;\n   * ```\n   */\n  authenticationFunction: string;\n};\n\nexport class AbstractedAccount extends Account {\n  public readonly publicKey: AbstractPublicKey;\n\n  readonly accountAddress: AccountAddress;\n\n  readonly authenticationFunction: string;\n\n  readonly signingScheme = SigningScheme.SingleKey;\n\n  constructor({ signer, accountAddress, authenticationFunction }: AbstractedAccountConstructorArgs) {\n    super();\n\n    if (!isValidFunctionInfo(authenticationFunction)) {\n      throw new Error(`Invalid authentication function ${authenticationFunction} passed into AbstractedAccount`);\n    }\n\n    this.authenticationFunction = authenticationFunction;\n    this.accountAddress = accountAddress;\n    this.publicKey = new AbstractPublicKey(this.accountAddress);\n    this.sign = (digest: HexInput) => new AbstractSignature(signer(digest));\n  }\n\n  /**\n   * Creates an `AbstractedAccount` from an `Ed25519Account` that has a permissioned signer function and\n   * using the `0x1::permissioned_delegation::authenticate` function to verify the signature.\n   *\n   * @param signer - The `Ed25519Account` that can be used to sign permissioned transactions.\n   * @returns The `AbstractedAccount`\n   */\n  public static fromPermissionedSigner({\n    signer,\n    accountAddress,\n  }: {\n    signer: Ed25519Account;\n    accountAddress?: AccountAddress;\n  }) {\n    return new AbstractedAccount({\n      signer: (digest: HexInput) => {\n        const serializer = new Serializer();\n        signer.publicKey.serialize(serializer);\n        signer.sign(digest).serialize(serializer);\n        return serializer.toUint8Array();\n      },\n      accountAddress: accountAddress ?? signer.accountAddress,\n      authenticationFunction: \"0x1::permissioned_delegation::authenticate\",\n    });\n  }\n\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorAbstraction {\n    return new AccountAuthenticatorAbstraction(\n      this.authenticationFunction,\n      sha3_256(message),\n      this.sign(sha3_256(message)).toUint8Array(),\n    );\n  }\n\n  signTransactionWithAuthenticator(transaction: AnyRawTransaction): AccountAuthenticatorAbstraction {\n    return this.signWithAuthenticator(generateSigningMessageForTransaction(transaction));\n  }\n\n  sign: (message: HexInput) => AbstractSignature;\n\n  signTransaction(transaction: AnyRawTransaction): AbstractSignature {\n    return this.sign(generateSigningMessageForTransaction(transaction));\n  }\n\n  /**\n   * Update the signer function for the account. This can be done after asynchronous operations are complete\n   * to update the context of the signer function.\n   *\n   * @param signer - The new signer function to use for the account.\n   */\n  public setSigner(signer: (digest: HexInput) => HexInput): void {\n    this.sign = (digest: HexInput) => new AbstractSignature(signer(digest));\n  }\n}\n","import { sha3_256 } from \"@noble/hashes/sha3\";\nimport { Serializer } from \"../bcs/serializer\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { AccountAuthenticatorAbstraction } from \"../transactions/authenticator/account\";\nimport { HexInput } from \"../types\";\nimport { isValidFunctionInfo } from \"../utils/helpers\";\nimport { AbstractedAccount } from \"./AbstractedAccount\";\n\ntype DerivableAbstractedAccountArgs = {\n  /**\n   * The signer function signs transactions and returns the `authenticator` bytes in the `AbstractionAuthData`.\n   *\n   * @param digest - The SHA256 hash of the transaction signing message\n   * @returns The `authenticator` bytes that can be used to verify the signature.\n   */\n  signer: (digest: HexInput) => Uint8Array;\n\n  /**\n   * The authentication function that will be used to verify the signature.\n   *\n   * @example\n   * ```ts\n   * const authenticationFunction = `${accountAddress}::permissioned_delegation::authenticate`;\n   * ```\n   */\n  authenticationFunction: string;\n\n  /**\n   * The abstract public key that is used to identify the account.\n   * Depends on the use cases, most of the time it is the public key of the source wallet\n   */\n  abstractPublicKey: Uint8Array;\n};\n\nexport class DerivableAbstractedAccount extends AbstractedAccount {\n  /**\n   * The abstract public key that is used to identify the account.\n   * Depends on the use cases, most of the time it is the public key of the source wallet\n   */\n  readonly abstractPublicKey: Uint8Array;\n\n  /**\n   * The domain separator used to calculate the DAA account address.\n   */\n  static readonly ADDRESS_DOMAIN_SEPERATOR: number = 5;\n\n  constructor({ signer, authenticationFunction, abstractPublicKey }: DerivableAbstractedAccountArgs) {\n    const daaAccountAddress = new AccountAddress(\n      DerivableAbstractedAccount.computeAccountAddress(authenticationFunction, abstractPublicKey),\n    );\n    super({\n      accountAddress: daaAccountAddress,\n      signer,\n      authenticationFunction,\n    });\n    this.abstractPublicKey = abstractPublicKey;\n  }\n\n  /**\n   * Compute the account address of the DAA\n   * The DAA account address is computed by hashing the function info and the account identity\n   * and appending the domain separator (5)\n   *\n   * @param functionInfo - The authentication function\n   * @param accountIdentifier - The account identity\n   * @returns The account address\n   */\n  static computeAccountAddress(functionInfo: string, accountIdentifier: Uint8Array): Uint8Array {\n    if (!isValidFunctionInfo(functionInfo)) {\n      throw new Error(`Invalid authentication function ${functionInfo} passed into DerivableAbstractedAccount`);\n    }\n    const [moduleAddress, moduleName, functionName] = functionInfo.split(\"::\");\n\n    const hash = sha3_256.create();\n    // Serialize and append the function info\n    const serializer = new Serializer();\n    AccountAddress.fromString(moduleAddress).serialize(serializer);\n    serializer.serializeStr(moduleName);\n    serializer.serializeStr(functionName);\n    hash.update(serializer.toUint8Array());\n\n    // Serialize and append the account identity\n    const s2 = new Serializer();\n    s2.serializeBytes(accountIdentifier);\n    hash.update(s2.toUint8Array());\n\n    // Append the domain separator\n    hash.update(new Uint8Array([DerivableAbstractedAccount.ADDRESS_DOMAIN_SEPERATOR]));\n\n    return hash.digest();\n  }\n\n  signWithAuthenticator(message: HexInput): AccountAuthenticatorAbstraction {\n    return new AccountAuthenticatorAbstraction(\n      this.authenticationFunction,\n      sha3_256(message),\n      this.sign(sha3_256(message)).value,\n      this.abstractPublicKey,\n    );\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the transaction creation lifecycle.\n * It holds different operations to generate a transaction payload, a raw transaction,\n * and a signed transaction that can be simulated, signed and submitted to chain.\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput, Hex, PublicKey } from \"../../core\";\nimport {\n  AnyPublicKey,\n  AnySignature,\n  KeylessPublicKey,\n  KeylessSignature,\n  Secp256k1PublicKey,\n  FederatedKeylessPublicKey,\n  MultiKey,\n  MultiKeySignature,\n} from \"../../core/crypto\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { getInfo } from \"../../internal/utils\";\nimport { getLedgerInfo } from \"../../internal/general\";\nimport { getGasPriceEstimation } from \"../../internal/transaction\";\nimport { NetworkToChainId } from \"../../utils/apiEndpoints\";\nimport { DEFAULT_MAX_GAS_AMOUNT, DEFAULT_TXN_EXP_SEC_FROM_NOW } from \"../../utils/const\";\nimport { normalizeBundle } from \"../../utils/normalizeBundle\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiEd25519,\n  AccountAuthenticatorMultiKey,\n  AccountAuthenticatorNoAccountAuthenticator,\n  AccountAuthenticatorSingleKey,\n} from \"../authenticator/account\";\nimport {\n  TransactionAuthenticator,\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorFeePayer,\n  TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorMultiEd25519,\n  TransactionAuthenticatorSingleSender,\n} from \"../authenticator/transaction\";\nimport {\n  ChainId,\n  EntryFunction,\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  MultiSig,\n  MultiSigTransactionPayload,\n  RawTransaction,\n  Script,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadMultiSig,\n  TransactionPayloadScript,\n} from \"../instances\";\nimport { SignedTransaction } from \"../instances/signedTransaction\";\nimport {\n  AnyRawTransaction,\n  AnyTransactionPayloadInstance,\n  EntryFunctionArgumentTypes,\n  InputGenerateMultiAgentRawTransactionArgs,\n  InputGenerateRawTransactionArgs,\n  InputGenerateSingleSignerRawTransactionArgs,\n  InputGenerateTransactionOptions,\n  InputScriptData,\n  InputSimulateTransactionData,\n  InputMultiSigDataWithRemoteABI,\n  InputEntryFunctionDataWithRemoteABI,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateTransactionPayloadDataWithABI,\n  InputEntryFunctionDataWithABI,\n  InputMultiSigDataWithABI,\n  InputViewFunctionDataWithRemoteABI,\n  InputViewFunctionDataWithABI,\n  FunctionABI,\n} from \"../types\";\nimport { convertArgument, fetchEntryFunctionAbi, fetchViewFunctionAbi, standardizeTypeTags } from \"./remoteAbi\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { isScriptDataInput } from \"./helpers\";\nimport { SimpleTransaction } from \"../instances/simpleTransaction\";\nimport { MultiAgentTransaction } from \"../instances/multiAgentTransaction\";\nimport { getFunctionParts } from \"../../utils/helpers\";\n\n/**\n * Builds a transaction payload based on the provided arguments and returns a transaction payload.\n * This function uses the RemoteABI by default, but can also utilize a specified ABI.\n * When we call our `generateTransactionPayload` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n * @param args - The input data for generating the transaction payload.\n * @param args.function - The function to be called, specified in the format \"moduleAddress::moduleName::functionName\".\n * @param args.functionArguments - The arguments to pass to the function.\n * @param args.typeArguments - The type arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.abi - The ABI to use for the transaction, if not using the RemoteABI.\n *\n * @returns TransactionPayload - The generated transaction payload, which can be of type TransactionPayloadScript,\n * TransactionPayloadMultiSig, or TransactionPayloadEntryFunction.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(args: InputScriptData): Promise<TransactionPayloadScript>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputEntryFunctionDataWithRemoteABI,\n): Promise<TransactionPayloadEntryFunction>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputMultiSigDataWithRemoteABI,\n): Promise<TransactionPayloadMultiSig>;\n\n/**\n * Builds a transaction payload based on the data argument and returns\n * a transaction payload - TransactionPayloadScript | TransactionPayloadMultiSig | TransactionPayloadEntryFunction\n *\n * This uses the RemoteABI by default, and the remote ABI can be skipped by using generateTransactionPayloadWithABI\n *\n * @param args.data GenerateTransactionPayloadData\n *\n * @return TransactionPayload\n * @group Implementation\n * @category Transactions\n */\nexport async function generateTransactionPayload(\n  args: InputGenerateTransactionPayloadDataWithRemoteABI,\n): Promise<AnyTransactionPayloadInstance> {\n  if (isScriptDataInput(args)) {\n    return generateTransactionPayloadScript(args);\n  }\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  const functionAbi = await fetchAbi({\n    key: \"entry-function\",\n    moduleAddress,\n    moduleName,\n    functionName,\n    aptosConfig: args.aptosConfig,\n    abi: args.abi,\n    fetch: fetchEntryFunctionAbi,\n  });\n\n  // Fill in the ABI\n  return generateTransactionPayloadWithABI({ ...args, abi: functionAbi });\n}\n\n/**\n * Generates a transaction payload using the provided ABI and function details.\n * This function helps create a properly structured transaction payload for executing a specific function on a module.\n *\n * @param args - The input data required to generate the transaction payload.\n * @param args.abi - The ABI of the function to be executed.\n * @param args.function - The fully qualified name of the function in the format `moduleAddress::moduleName::functionName`.\n * @param args.typeArguments - An array of type arguments that correspond to the function's type parameters.\n * @param args.functionArguments - An array of arguments to be passed to the function.\n * @param args.multisigAddress - (Optional) The address for a multisig transaction if applicable.\n *\n * @throws Error if the type argument count does not match the ABI or if the number of function arguments is incorrect.\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(args: InputEntryFunctionDataWithABI): TransactionPayloadEntryFunction;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(args: InputMultiSigDataWithABI): TransactionPayloadMultiSig;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function generateTransactionPayloadWithABI(\n  args: InputGenerateTransactionPayloadDataWithABI,\n): AnyTransactionPayloadInstance {\n  const functionAbi = args.abi;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> = args.functionArguments.map((arg, i) =>\n    /**\n     * Converts the argument for a specified function using its ABI and type arguments.\n     * This function helps ensure that the correct number of arguments is provided for the function call.\n     *\n     * @param args - The arguments for the function call.\n     * @param args.function - The specific function to be invoked.\n     * @param functionAbi - The ABI (Application Binary Interface) of the function, which includes parameter details.\n     * @param arg - The argument to be converted.\n     * @param i - The index of the argument in the function call.\n     * @param typeArguments - Additional type arguments that may be required for the conversion.\n     * @group Implementation\n     * @category Transactions\n     */\n    // TODO: Fix JSDoc\n    convertArgument(args.function, functionAbi, arg, i, typeArguments),\n  );\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  const entryFunctionPayload = EntryFunction.build(\n    `${moduleAddress}::${moduleName}`,\n    functionName,\n    typeArguments,\n    functionArguments,\n  );\n\n  // Send it as multi sig if it's a multisig payload\n  if (\"multisigAddress\" in args) {\n    const multisigAddress = AccountAddress.from(args.multisigAddress);\n    return new TransactionPayloadMultiSig(\n      new MultiSig(multisigAddress, new MultiSigTransactionPayload(entryFunctionPayload)),\n    );\n  }\n\n  // Otherwise send as an entry function\n  return new TransactionPayloadEntryFunction(entryFunctionPayload);\n}\n\n/**\n * Generates the payload for a view function call using the provided arguments.\n * This function helps in preparing the necessary data to interact with a specific view function on the blockchain.\n *\n * @param args - The input data required to generate the view function payload.\n * @param args.function - The function identifier in the format \"moduleAddress::moduleName::functionName\".\n * @param args.aptosConfig - Configuration settings for the Aptos client.\n * @param args.abi - The ABI (Application Binary Interface) of the module.\n *\n * @returns The generated payload for the view function call.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateViewFunctionPayload(args: InputViewFunctionDataWithRemoteABI): Promise<EntryFunction> {\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  const functionAbi = await fetchAbi({\n    key: \"view-function\",\n    moduleAddress,\n    moduleName,\n    functionName,\n    aptosConfig: args.aptosConfig,\n    abi: args.abi,\n    fetch: fetchViewFunctionAbi,\n  });\n\n  // Fill in the ABI\n  return generateViewFunctionPayloadWithABI({ abi: functionAbi, ...args });\n}\n\n/**\n * Generates a payload for a view function call using the provided ABI and arguments.\n * This function ensures that the type arguments and function arguments are correctly formatted\n * and match the expected counts as defined in the ABI.\n *\n * @param args - The input data for generating the view function payload.\n * @param args.abi - The ABI of the function to be called.\n * @param args.function - The full name of the function in the format \"moduleAddress::moduleName::functionName\".\n * @param args.typeArguments - An array of type arguments to be used in the function call.\n * @param args.functionArguments - An array of arguments to be passed to the function.\n *\n * @throws Error if the type argument count does not match the ABI or if the function arguments\n * do not match the expected parameters defined in the ABI.\n * @group Implementation\n * @category Transactions\n */\nexport function generateViewFunctionPayloadWithABI(args: InputViewFunctionDataWithABI): EntryFunction {\n  const functionAbi = args.abi;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> =\n    args?.functionArguments?.map((arg, i) => convertArgument(args.function, functionAbi, arg, i, typeArguments)) ?? [];\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  return EntryFunction.build(`${moduleAddress}::${moduleName}`, functionName, typeArguments, functionArguments);\n}\n\n/**\n * Generates a transaction payload script based on the provided input data.\n * This function helps in creating a structured script for transaction processing.\n *\n * @param args - The input data required to generate the transaction payload script.\n * @param args.bytecode - The bytecode to be converted into a Uint8Array.\n * @param args.typeArguments - The type arguments that will be standardized.\n * @param args.functionArguments - The arguments for the function being called.\n * @returns A new instance of TransactionPayloadScript.\n * @group Implementation\n * @category Transactions\n */\nfunction generateTransactionPayloadScript(args: InputScriptData) {\n  return new TransactionPayloadScript(\n    new Script(\n      Hex.fromHexInput(args.bytecode).toUint8Array(),\n      standardizeTypeTags(args.typeArguments),\n      args.functionArguments,\n    ),\n  );\n}\n\n/**\n * Generates a raw transaction that can be sent to the Aptos network.\n *\n * @param args - The arguments for generating the raw transaction.\n * @param args.aptosConfig - The configuration for the Aptos network.\n * @param args.sender - The transaction's sender account address as a hex input.\n * @param args.payload - The transaction payload, which can be created using generateTransactionPayload().\n * @param args.options - Optional parameters for transaction generation.\n * @param args.feePayerAddress - The address of the fee payer for sponsored transactions.\n *\n * @returns RawTransaction - The generated raw transaction.\n * @group Implementation\n * @category Transactions\n */\nexport async function generateRawTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  payload: AnyTransactionPayloadInstance;\n  options?: InputGenerateTransactionOptions;\n  feePayerAddress?: AccountAddressInput;\n}): Promise<RawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n\n  const getChainId = async () => {\n    if (NetworkToChainId[aptosConfig.network]) {\n      return { chainId: NetworkToChainId[aptosConfig.network] };\n    }\n    const info = await getLedgerInfo({ aptosConfig });\n    return { chainId: info.chain_id };\n  };\n\n  const getGasUnitPrice = async () => {\n    if (options?.gasUnitPrice) {\n      return { gasEstimate: options.gasUnitPrice };\n    }\n    const estimation = await getGasPriceEstimation({ aptosConfig });\n    return { gasEstimate: estimation.gas_estimate };\n  };\n\n  const getSequenceNumberForAny = async () => {\n    const getSequenceNumber = async () => {\n      if (options?.accountSequenceNumber !== undefined) {\n        return options.accountSequenceNumber;\n      }\n\n      return (await getInfo({ aptosConfig, accountAddress: sender })).sequence_number;\n    };\n\n    /**\n     * Check if is sponsored transaction to honor AIP-52\n     * {@link https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-52.md}\n     * @group Implementation\n     * @category Transactions\n     */\n    if (feePayerAddress && AccountAddress.from(feePayerAddress).equals(AccountAddress.ZERO)) {\n      // Handle sponsored transaction generation with the option that\n      // the main signer has not been created on chain\n      try {\n        // Check if main signer has been created on chain, if not assign sequence number 0\n        return await getSequenceNumber();\n      } catch (e: any) {\n        return 0;\n      }\n    } else {\n      return getSequenceNumber();\n    }\n  };\n  const [{ chainId }, { gasEstimate }, sequenceNumber] = await Promise.all([\n    getChainId(),\n    getGasUnitPrice(),\n    getSequenceNumberForAny(),\n  ]);\n\n  const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n    maxGasAmount: options?.maxGasAmount ? BigInt(options.maxGasAmount) : BigInt(DEFAULT_MAX_GAS_AMOUNT),\n    gasUnitPrice: options?.gasUnitPrice ?? BigInt(gasEstimate),\n    expireTimestamp: options?.expireTimestamp ?? BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n  };\n\n  return new RawTransaction(\n    AccountAddress.from(sender),\n    BigInt(sequenceNumber),\n    payload,\n    BigInt(maxGasAmount),\n    BigInt(gasUnitPrice),\n    BigInt(expireTimestamp),\n    new ChainId(chainId),\n  );\n}\n\n/**\n * Generates a transaction based on the provided arguments.\n * This function can create both simple and multi-agent transactions, allowing for flexible transaction handling.\n *\n * @param args - The input arguments for generating the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The transaction's sender account address as a hex input.\n * @param args.payload - The transaction payload, which can be created using `generateTransactionPayload()`.\n * @param args.options - Optional. Transaction options object.\n * @param args.secondarySignerAddresses - Optional. An array of addresses for additional signers in a multi-signature transaction.\n * @param args.feePayerAddress - Optional. The address of the fee payer for sponsored transactions.\n * @returns An instance of a transaction, which may include secondary signer addresses and a fee payer address.\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateSingleSignerRawTransactionArgs): Promise<SimpleTransaction>;\n/**\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateMultiAgentRawTransactionArgs): Promise<MultiAgentTransaction>;\n\n/**\n * Generates a transaction based on the provided arguments\n *\n * Note: we can start with one function to support all different payload/transaction types,\n * and if to complex to use, we could have function for each type\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n * @param args.options optional. Transaction options object\n * @param args.secondarySignerAddresses optional. For when want to create a multi signers transaction\n * @param args.feePayerAddress optional. For when want to create a fee payer (aka sponsored) transaction\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses?: Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n * @group Implementation\n * @category Transactions\n */\nexport async function buildTransaction(args: InputGenerateRawTransactionArgs): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, payload, options, feePayerAddress } = args;\n  // generate raw transaction\n  const rawTxn = await generateRawTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n\n  // if multi agent transaction\n  if (\"secondarySignerAddresses\" in args) {\n    const signers: Array<AccountAddress> =\n      args.secondarySignerAddresses?.map((signer) => AccountAddress.from(signer)) ?? [];\n\n    return new MultiAgentTransaction(\n      rawTxn,\n      signers,\n      args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined,\n    );\n  }\n  // return the raw transaction\n  return new SimpleTransaction(rawTxn, args.feePayerAddress ? AccountAddress.from(args.feePayerAddress) : undefined);\n}\n\n/**\n * Generate a signed transaction for simulation before submitting it to the chain.\n * This function helps in preparing a transaction that can be simulated, allowing users to verify its validity and expected behavior.\n *\n * @param args - The input data required to generate the signed transaction for simulation.\n * @param args.transaction - An Aptos transaction type to sign.\n * @param args.signerPublicKey - The public key of the signer.\n * @param args.secondarySignersPublicKeys - Optional. The public keys of secondary signers if it is a multi-signer transaction.\n * @param args.feePayerPublicKey - Optional. The public key of the fee payer in a sponsored transaction.\n * @param args.options - Optional. Additional options for simulating the transaction.\n *\n * @returns A signed serialized transaction that can be simulated.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSignedTransactionForSimulation(args: InputSimulateTransactionData): Uint8Array {\n  const { signerPublicKey, transaction, secondarySignersPublicKeys, feePayerPublicKey } = args;\n\n  const accountAuthenticator = getAuthenticatorForSimulation(signerPublicKey);\n\n  // fee payer transaction\n  if (transaction.feePayerAddress) {\n    const transactionToSign = new FeePayerRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n    if (transaction.secondarySignerAddresses) {\n      if (secondarySignersPublicKeys) {\n        secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n          getAuthenticatorForSimulation(publicKey),\n        );\n      } else {\n        secondaryAccountAuthenticators = Array.from({ length: transaction.secondarySignerAddresses.length }, () =>\n          getAuthenticatorForSimulation(undefined),\n        );\n      }\n    }\n    const feePayerAuthenticator = getAuthenticatorForSimulation(feePayerPublicKey);\n\n    const transactionAuthenticator = new TransactionAuthenticatorFeePayer(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      secondaryAccountAuthenticators,\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // multi agent transaction\n  if (transaction.secondarySignerAddresses) {\n    const transactionToSign = new MultiAgentRawTransaction(\n      transaction.rawTransaction,\n      transaction.secondarySignerAddresses,\n    );\n\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n\n    if (secondarySignersPublicKeys) {\n      secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n        getAuthenticatorForSimulation(publicKey),\n      );\n    } else {\n      secondaryAccountAuthenticators = Array.from({ length: transaction.secondarySignerAddresses.length }, () =>\n        getAuthenticatorForSimulation(undefined),\n      );\n    }\n\n    const transactionAuthenticator = new TransactionAuthenticatorMultiAgent(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses,\n      secondaryAccountAuthenticators,\n    );\n\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // single signer raw transaction\n  let transactionAuthenticator;\n  if (accountAuthenticator instanceof AccountAuthenticatorEd25519) {\n    transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      accountAuthenticator.public_key,\n      accountAuthenticator.signature,\n    );\n  } else if (\n    accountAuthenticator instanceof AccountAuthenticatorSingleKey ||\n    accountAuthenticator instanceof AccountAuthenticatorMultiKey\n  ) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else if (accountAuthenticator instanceof AccountAuthenticatorNoAccountAuthenticator) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else {\n    throw new Error(\"Invalid public key\");\n  }\n  return new SignedTransaction(transaction.rawTransaction, transactionAuthenticator).bcsToBytes();\n}\n\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function getAuthenticatorForSimulation(publicKey?: PublicKey) {\n  if (!publicKey) {\n    return new AccountAuthenticatorNoAccountAuthenticator();\n  }\n\n  // Wrap the public key types below with AnyPublicKey as they are only support through single sender.\n  // Learn more about AnyPublicKey here - https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-55.md\n  const convertToAnyPublicKey =\n    KeylessPublicKey.isInstance(publicKey) ||\n    FederatedKeylessPublicKey.isInstance(publicKey) ||\n    Secp256k1PublicKey.isInstance(publicKey);\n  const accountPublicKey = convertToAnyPublicKey ? new AnyPublicKey(publicKey) : publicKey;\n\n  // No need to for the signature to be matching in scheme. All that matters for simulations is that it's not valid\n  const invalidSignature = new Ed25519Signature(new Uint8Array(64));\n\n  if (Ed25519PublicKey.isInstance(accountPublicKey)) {\n    return new AccountAuthenticatorEd25519(accountPublicKey, invalidSignature);\n  }\n\n  if (AnyPublicKey.isInstance(accountPublicKey)) {\n    if (KeylessPublicKey.isInstance(accountPublicKey.publicKey)) {\n      return new AccountAuthenticatorSingleKey(\n        accountPublicKey,\n        new AnySignature(KeylessSignature.getSimulationSignature()),\n      );\n    }\n    return new AccountAuthenticatorSingleKey(accountPublicKey, new AnySignature(invalidSignature));\n  }\n\n  if (MultiKey.isInstance(accountPublicKey)) {\n    return new AccountAuthenticatorMultiKey(\n      accountPublicKey,\n      new MultiKeySignature({\n        signatures: accountPublicKey.publicKeys.map((pubKey) => {\n          if (KeylessPublicKey.isInstance(pubKey.publicKey) || FederatedKeylessPublicKey.isInstance(pubKey.publicKey)) {\n            return new AnySignature(KeylessSignature.getSimulationSignature());\n          }\n          return new AnySignature(invalidSignature);\n        }),\n        bitmap: accountPublicKey.createBitmap({\n          bits: Array(accountPublicKey.publicKeys.length)\n            .fill(0)\n            .map((_, i) => i),\n        }),\n      }),\n    );\n  }\n\n  throw new Error(\"Unsupported PublicKey used for simulations\");\n}\n\n/**\n * Generate a signed transaction ready for submission to the blockchain.\n * This function prepares the transaction by authenticating the sender and any additional signers based on the provided arguments.\n *\n * @param args - The input data required to generate the signed transaction.\n * @param args.transaction - An Aptos transaction type containing the details of the transaction.\n * @param args.senderAuthenticator - The account authenticator of the transaction sender.\n * @param args.feePayerAuthenticator - The authenticator for the fee payer, required if the transaction has a fee payer address.\n * @param args.additionalSignersAuthenticators - Optional authenticators for additional signers in a multi-signer transaction.\n *\n * @returns A Uint8Array representing the signed transaction in bytes.\n *\n * @throws Error if the feePayerAuthenticator is not provided for a fee payer transaction.\n * @throws Error if additionalSignersAuthenticators are not provided for a multi-signer transaction.\n * @group Implementation\n * @category Transactions\n */\nexport function generateSignedTransaction(args: InputSubmitTransactionData): Uint8Array {\n  const { transaction, feePayerAuthenticator, additionalSignersAuthenticators } = args;\n  const senderAuthenticator = normalizeBundle(AccountAuthenticator, args.senderAuthenticator);\n\n  let txnAuthenticator: TransactionAuthenticator;\n  if (transaction.feePayerAddress) {\n    if (!feePayerAuthenticator) {\n      throw new Error(\"Must provide a feePayerAuthenticator argument to generate a signed fee payer transaction\");\n    }\n    txnAuthenticator = new TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      additionalSignersAuthenticators ?? [],\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n  } else if (transaction.secondarySignerAddresses) {\n    if (!additionalSignersAuthenticators) {\n      throw new Error(\n        \"Must provide a additionalSignersAuthenticators argument to generate a signed multi agent transaction\",\n      );\n    }\n    txnAuthenticator = new TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      transaction.secondarySignerAddresses,\n      additionalSignersAuthenticators,\n    );\n  } else if (senderAuthenticator instanceof AccountAuthenticatorEd25519) {\n    txnAuthenticator = new TransactionAuthenticatorEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n  } else if (senderAuthenticator instanceof AccountAuthenticatorMultiEd25519) {\n    txnAuthenticator = new TransactionAuthenticatorMultiEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n  } else {\n    txnAuthenticator = new TransactionAuthenticatorSingleSender(senderAuthenticator);\n  }\n\n  return new SignedTransaction(transaction.rawTransaction, txnAuthenticator).bcsToBytes();\n}\n\n/**\n * Hashes the set of values using a SHA-3 256 hash algorithm.\n * @param input - An array of UTF-8 strings or Uint8Array byte arrays to be hashed.\n * @group Implementation\n * @category Transactions\n */\nexport function hashValues(input: (Uint8Array | string)[]): Uint8Array {\n  const hash = sha3Hash.create();\n  for (const item of input) {\n    hash.update(item);\n  }\n  return hash.digest();\n}\n\n/**\n * The domain separated prefix for hashing transactions\n * @group Implementation\n * @category Transactions\n */\nconst TRANSACTION_PREFIX = hashValues([\"APTOS::Transaction\"]);\n\n/**\n * Generates a user transaction hash for the provided transaction payload, which must already have an authenticator.\n * This function helps ensure the integrity and uniqueness of the transaction by producing a hash based on the signed transaction data.\n *\n * @param args - The input data required to submit the transaction.\n * @param args.authenticator - The authenticator for the transaction.\n * @param args.payload - The payload containing the transaction details.\n * @param args.sender - The address of the sender initiating the transaction.\n * @param args.sequenceNumber - The sequence number of the transaction for the sender.\n * @group Implementation\n * @category Transactions\n */\nexport function generateUserTransactionHash(args: InputSubmitTransactionData): string {\n  const signedTransaction = generateSignedTransaction(args);\n\n  // Transaction signature is defined as, the domain separated prefix based on struct (Transaction)\n  // Then followed by the type of the transaction for the enum, UserTransaction is 0\n  // Then followed by BCS encoded bytes of the signed transaction\n  return new Hex(hashValues([TRANSACTION_PREFIX, new Uint8Array([0]), signedTransaction])).toString();\n}\n\n/**\n * Fetches and caches ABIs while allowing for pass-through on provided ABIs.\n *\n * @param key - A unique identifier for the cached ABI.\n * @param moduleAddress - The address of the module from which to fetch the ABI.\n * @param moduleName - The name of the module containing the function.\n * @param functionName - The name of the function whose ABI is being fetched.\n * @param aptosConfig - Configuration settings for Aptos.\n * @param abi - An optional ABI to use if already available.\n * @param fetch - A function to fetch the ABI if it is not provided.\n * @group Implementation\n * @category Transactions\n */\nasync function fetchAbi<T extends FunctionABI>({\n  key,\n  moduleAddress,\n  moduleName,\n  functionName,\n  aptosConfig,\n  abi,\n  fetch,\n}: {\n  key: string;\n  moduleAddress: string;\n  moduleName: string;\n  functionName: string;\n  aptosConfig: AptosConfig;\n  abi?: T;\n  fetch: (moduleAddress: string, moduleName: string, functionName: string, aptosConfig: AptosConfig) => Promise<T>;\n}): Promise<T> {\n  if (abi !== undefined) {\n    return abi;\n  }\n\n  // We fetch the entry function ABI, and then pretend that we already had the ABI\n  return memoizeAsync(\n    async () => fetch(moduleAddress, moduleName, functionName, aptosConfig),\n    `${key}-${aptosConfig.network}-${moduleAddress}-${moduleName}-${functionName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  StructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagReference,\n  TypeTagSigner,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n  TypeTagVector,\n} from \".\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\n\n/**\n * Determines if the provided string is a valid Move identifier, which can only contain alphanumeric characters and underscores.\n * @param str - The string to validate as a Move identifier.\n * @group Implementation\n * @category Transactions\n */\nfunction isValidIdentifier(str: string) {\n  return !!str.match(/^[_a-zA-Z0-9]+$/);\n}\n\n/**\n * Determines if the provided character is a whitespace character. This function only works for single characters.\n * @param char - The character to check for whitespace.\n * @group Implementation\n * @category Transactions\n */\nfunction isValidWhitespaceCharacter(char: string) {\n  return !!char.match(/\\s/);\n}\n\n/**\n * Determines if a given string represents a generic type from the ABI, specifically in the format T0, T1, etc.\n * @param str - The string to evaluate for generic type format.\n * @group Implementation\n * @category Transactions\n */\nfunction isGeneric(str: string) {\n  return !!str.match(/^T[0-9]+$/);\n}\n\n/**\n * Determines if the provided string is a reference type, which is indicated by starting with an ampersand (&).\n * @param str - The string to evaluate for reference type.\n * @group Implementation\n * @category Transactions\n */\nfunction isRef(str: string) {\n  return !!str.match(/^&.+$/);\n}\n\n/**\n * Determines if the provided string represents a primitive type.\n * @param str - The string to evaluate as a potential primitive type.\n * @returns A boolean indicating whether the string is a primitive type.\n * @group Implementation\n * @category Transactions\n */\nfunction isPrimitive(str: string) {\n  switch (str) {\n    case \"signer\":\n    case \"address\":\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Consumes all whitespace characters in a string starting from a specified position.\n *\n * @param tagStr - The string from which to consume whitespace.\n * @param pos - The position in the string to start consuming whitespace from.\n * @returns The new position in the string after consuming whitespace.\n * @group Implementation\n * @category Transactions\n */\nfunction consumeWhitespace(tagStr: string, pos: number) {\n  let i = pos;\n  for (; i < tagStr.length; i += 1) {\n    const innerChar = tagStr[i];\n\n    if (!isValidWhitespaceCharacter(innerChar)) {\n      // If it's not colons, and it's an invalid character, we will stop here\n      break;\n    }\n  }\n  return i;\n}\n\n/**\n * State for TypeTag parsing, maintained on a stack to track the current parsing state.\n * @group Implementation\n * @category Transactions\n */\ntype TypeTagState = {\n  savedExpectedTypes: number;\n  savedStr: string;\n  savedTypes: Array<TypeTag>;\n};\n\n/**\n * Error types related to parsing type tags, indicating various issues encountered during the parsing process.\n * @group Implementation\n * @category Transactions\n */\nexport enum TypeTagParserErrorType {\n  InvalidTypeTag = \"unknown type\",\n  UnexpectedGenericType = \"unexpected generic type\",\n  UnexpectedTypeArgumentClose = \"unexpected '>'\",\n  UnexpectedWhitespaceCharacter = \"unexpected whitespace character\",\n  UnexpectedComma = \"unexpected ','\",\n  TypeArgumentCountMismatch = \"type argument count doesn't match expected amount\",\n  MissingTypeArgumentClose = \"no matching '>' for '<'\",\n  MissingTypeArgument = \"no type argument before ','\",\n  UnexpectedPrimitiveTypeArguments = \"primitive types not expected to have type arguments\",\n  UnexpectedVectorTypeArgumentCount = \"vector type expected to have exactly one type argument\",\n  UnexpectedStructFormat = \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\",\n  InvalidModuleNameCharacter = \"module name must only contain alphanumeric or '_' characters\",\n  InvalidStructNameCharacter = \"struct name must only contain alphanumeric or '_' characters\",\n  InvalidAddress = \"struct address must be valid\",\n}\n\n/**\n * Represents an error that occurs during the parsing of a type tag.\n * This error extends the built-in Error class and provides additional context\n * regarding the specific type tag that failed to parse and the reason for the failure.\n *\n * @param typeTagStr - The type tag string that failed to be parsed.\n * @param invalidReason - The reason why the type tag string is considered invalid.\n * @group Implementation\n * @category Transactions\n */\nexport class TypeTagParserError extends Error {\n  /**\n   * Constructs an error indicating a failure to parse a type tag.\n   * This error provides details about the specific type tag that could not be parsed and the reason for the failure.\n   *\n   * @param typeTagStr - The string representation of the type tag that failed to parse.\n   * @param invalidReason - The reason why the type tag is considered invalid.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(typeTagStr: string, invalidReason: TypeTagParserErrorType) {\n    super(`Failed to parse typeTag '${typeTagStr}', ${invalidReason}`);\n  }\n}\n\n/**\n * Parses a type string into a structured representation of type tags, accommodating various formats including generics and\n * nested types.\n *\n * This function can help you accurately interpret type strings, which can include simple types, standalone structs, and complex\n * nested generics.\n * It supports multiple generics, spacing within generics, and nested generics of varying depths.\n * All types are made of a few parts they're either:\n * 1. A simple type e.g. u8\n * 2. A standalone struct e.g. 0x1::account::Account\n * 3. A nested struct e.g. 0x1::coin::Coin<0x1234::coin::MyCoin>\n *\n * There are a few more special cases that need to be handled, however.\n * 1. Multiple generics e.g. 0x1::pair::Pair<u8, u16>\n * 2. Spacing in the generics e.g. 0x1::pair::Pair< u8 , u16>\n * 3. Nested generics of different depths e.g. 0x1::pair::Pair<0x1::coin::Coin<0x1234::coin::MyCoin>, u8>\n * 4. Generics for types in ABIs are filled in with placeholders e.g. T1, T2, T3\n * @param typeStr - The string representation of the type to be parsed.\n * @param options - Optional settings for parsing behavior.\n * @param options.allowGenerics - A flag indicating whether to allow generics in the parsing process.\n * @returns The parsed type tag representation.\n * @throws TypeTagParserError if the type string is malformed or does not conform to expected formats.\n * @group Implementation\n * @category Transactions\n */\nexport function parseTypeTag(typeStr: string, options?: { allowGenerics?: boolean }) {\n  const allowGenerics = options?.allowGenerics ?? false;\n\n  const saved: Array<TypeTagState> = [];\n  // This represents the internal types for a type tag e.g. '0x1::coin::Coin<innerTypes>'\n  let innerTypes: Array<TypeTag> = [];\n  // This represents the current parsed types in a comma list e.g. 'u8, u8'\n  let curTypes: Array<TypeTag> = [];\n  // This represents the current character index\n  let cur: number = 0;\n  // This represents the current working string as a type or struct name\n  let currentStr: string = \"\";\n  let expectedTypes: number = 1;\n\n  // Iterate through each character, and handle the border conditions\n  while (cur < typeStr.length) {\n    const char = typeStr[cur];\n\n    if (char === \"<\") {\n      // Start of a type argument, push current state onto a stack\n      saved.push({\n        savedExpectedTypes: expectedTypes,\n        savedStr: currentStr,\n        savedTypes: curTypes,\n      });\n\n      // Clear current state\n      currentStr = \"\";\n      curTypes = [];\n      expectedTypes = 1;\n    } else if (char === \">\") {\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr !== \"\") {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n        curTypes.push(newType);\n      }\n\n      // Pop off stack outer type, if there's nothing left, there were too many '>'\n      const savedPop = saved.pop();\n      if (savedPop === undefined) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedTypeArgumentClose);\n      }\n\n      // If the expected types don't match the number of commas, then we also fail\n      if (expectedTypes !== curTypes.length) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.TypeArgumentCountMismatch);\n      }\n\n      // Add in the new created type, shifting the current types to the inner types\n      const { savedStr, savedTypes, savedExpectedTypes } = savedPop;\n      innerTypes = curTypes;\n      curTypes = savedTypes;\n      currentStr = savedStr;\n      expectedTypes = savedExpectedTypes;\n    } else if (char === \",\") {\n      // Comma means we need to start parsing a new tag, push the previous one to the curTypes\n\n      // No top level commas (not in a type <> are allowed)\n      if (saved.length === 0) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n      }\n      // If there was no actual value before the comma, then it's missing a type argument\n      if (currentStr.length === 0) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgument);\n      }\n\n      // Process characters before as a type\n      const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n      // parse type tag and push it on the types\n      innerTypes = [];\n      curTypes.push(newType);\n      currentStr = \"\";\n      expectedTypes += 1;\n    } else if (isValidWhitespaceCharacter(char)) {\n      // This means we should save what we have and everything else should skip until the next\n      let parsedTypeTag = false;\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        parsedTypeTag = true;\n      }\n\n      // Skip ahead on any more whitespace\n      cur = consumeWhitespace(typeStr, cur);\n\n      // The next space MUST be a comma, or a closing > if there was something parsed before\n      // e.g. `u8 u8` is invalid but `u8, u8` is valid\n      const nextChar = typeStr[cur];\n      if (cur < typeStr.length && parsedTypeTag && nextChar !== \",\" && nextChar !== \">\") {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n      }\n\n      // eslint-disable-next-line no-continue\n      continue;\n    } else {\n      // Any other characters just append to the current string\n      currentStr += char;\n    }\n\n    cur += 1;\n  }\n\n  // This prevents a missing '>' on type arguments\n  if (saved.length > 0) {\n    throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgumentClose);\n  }\n\n  // This prevents 'u8, u8' as an input\n  switch (curTypes.length) {\n    case 0:\n      return parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n    case 1:\n      if (currentStr === \"\") {\n        return curTypes[0];\n      }\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n    default:\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n  }\n}\n\n/**\n * Parses a type tag with internal types associated, allowing for the inclusion of generics if specified. This function helps in\n * constructing the appropriate type tags based on the provided string representation and associated types.\n *\n * @param str - The string representation of the type tag to parse.\n * @param types - An array of TypeTag instances that represent internal types associated with the type tag.\n * @param allowGenerics - A boolean indicating whether generics are allowed in the parsing of the type tag.\n * @group Implementation\n * @category Transactions\n */\nfunction parseTypeTagInner(str: string, types: Array<TypeTag>, allowGenerics: boolean): TypeTag {\n  const trimmedStr = str.trim();\n  const lowerCaseTrimmed = trimmedStr.toLowerCase();\n  if (isPrimitive(lowerCaseTrimmed)) {\n    if (types.length > 0) {\n      throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n    }\n  }\n\n  switch (trimmedStr.toLowerCase()) {\n    case \"signer\":\n      return new TypeTagSigner();\n    case \"bool\":\n      return new TypeTagBool();\n    case \"address\":\n      return new TypeTagAddress();\n    case \"u8\":\n      return new TypeTagU8();\n    case \"u16\":\n      return new TypeTagU16();\n    case \"u32\":\n      return new TypeTagU32();\n    case \"u64\":\n      return new TypeTagU64();\n    case \"u128\":\n      return new TypeTagU128();\n    case \"u256\":\n      return new TypeTagU256();\n    case \"vector\":\n      if (types.length !== 1) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedVectorTypeArgumentCount);\n      }\n      return new TypeTagVector(types[0]);\n    default:\n      // Reference will have to handle the inner type\n      if (isRef(trimmedStr)) {\n        const actualType = trimmedStr.substring(1);\n        return new TypeTagReference(parseTypeTagInner(actualType, types, allowGenerics));\n      }\n\n      // Generics are always expected to be T0 or T1\n      if (isGeneric(trimmedStr)) {\n        if (allowGenerics) {\n          return new TypeTagGeneric(Number(trimmedStr.split(\"T\")[1]));\n        }\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedGenericType);\n      }\n\n      // If the value doesn't contain a colon, then we'll assume it isn't trying to be a struct\n      if (!trimmedStr.match(/:/)) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidTypeTag);\n      }\n\n      // Parse for a struct tag\n      // eslint-disable-next-line no-case-declarations\n      const structParts = trimmedStr.split(\"::\");\n      if (structParts.length !== 3) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedStructFormat);\n      }\n\n      // Validate struct address\n      // eslint-disable-next-line no-case-declarations\n      let address: AccountAddress;\n      try {\n        address = AccountAddress.fromString(structParts[0]);\n      } catch (error: any) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidAddress);\n      }\n\n      // Validate identifier characters\n      if (!isValidIdentifier(structParts[1])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidModuleNameCharacter);\n      }\n      if (!isValidIdentifier(structParts[2])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidStructNameCharacter);\n      }\n\n      return new TypeTagStruct(\n        new StructTag(address, new Identifier(structParts[1]), new Identifier(structParts[2]), types),\n      );\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  EntryFunctionArgumentTypes,\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputScriptData,\n  SimpleEntryFunctionArgumentTypes,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { MoveFunction } from \"../../types\";\n\n/**\n * Determines if the provided argument is of type boolean.\n * This can help in validating input types before processing them further.\n *\n * @param arg - The argument to check, which can be of various types.\n * @returns A boolean indicating whether the argument is a boolean.\n * @group Implementation\n * @category Transactions\n */\nexport function isBool(arg: SimpleEntryFunctionArgumentTypes): arg is boolean {\n  return typeof arg === \"boolean\";\n}\n\n/**\n * Checks if the provided argument is of type string.\n *\n * @param arg - The value to be checked for string type.\n * @returns A boolean indicating whether the argument is a string.\n * @group Implementation\n * @category Transactions\n */\nexport function isString(arg: any): arg is string {\n  return typeof arg === \"string\";\n}\n\n/**\n * Determines if the provided argument is of type number.\n *\n * @param arg - The argument to check, which can be of various types.\n * @returns A boolean indicating whether the argument is a number.\n * @group Implementation\n * @category Transactions\n */\nexport function isNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number {\n  return typeof arg === \"number\";\n}\n\n/**\n * Converts a number or a string representation of a number into a number type.\n * This function is useful for ensuring that the input is in a consistent numeric format,\n * which can help prevent type mismatches in further processing.\n *\n * @param arg - The input value to be converted. This can be a number, a string representing a number, or any other type.\n * @returns Returns the converted number if the input is valid; otherwise, it returns undefined.\n * @group Implementation\n * @category Transactions\n */\nexport function convertNumber(arg: SimpleEntryFunctionArgumentTypes): number | undefined {\n  if (isNumber(arg)) {\n    return arg;\n  }\n  if (isString(arg) && arg !== \"\") {\n    return Number.parseInt(arg, 10);\n  }\n\n  return undefined;\n}\n\n/**\n * Determines if the provided argument is a large number, which can be a number, bigint, or string representation of a number.\n *\n * @param arg - The argument to check, which can be of type number, bigint, or string.\n * @group Implementation\n * @category Transactions\n */\nexport function isLargeNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number | bigint | string {\n  return typeof arg === \"number\" || typeof arg === \"bigint\" || typeof arg === \"string\";\n}\n\n/**\n * Checks if the provided argument is empty, meaning it is either null or undefined.\n *\n * @param arg - The argument to check for emptiness.\n * @returns A boolean indicating whether the argument is empty.\n * @group Implementation\n * @category Transactions\n */\nexport function isEmptyOption(arg: SimpleEntryFunctionArgumentTypes): arg is null | undefined {\n  return arg === null || arg === undefined;\n}\n\n/**\n * Determines if the provided argument is a valid encoded entry function argument type.\n * This function helps validate that the argument conforms to the expected types for entry function parameters.\n *\n * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n * @group Implementation\n * @category Transactions\n */\nexport function isEncodedEntryFunctionArgument(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is EntryFunctionArgumentTypes {\n  return (\n    /**\n     * Determines if the provided argument is an instance of the Bool class.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsBool(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U8.\n     * This function helps validate the type of the argument passed to ensure it is a U8 type.\n     *\n     * @param arg - The argument to be checked, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU8(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U16.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU16(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U32.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @returns A boolean indicating whether the argument is a U32 instance.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU32(arg) ||\n    /**\n     * Determine if the provided argument is an instance of U64.\n     * This function helps validate that the argument conforms to the expected U64 type.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU64(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U128.\n     * This function helps validate the type of the argument passed to ensure it is a U128 type.\n     *\n     * @param arg - The argument to be checked, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU128(arg) ||\n    /**\n     * Determines if the provided argument is an instance of U256.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @returns A boolean indicating whether the argument is a U256 instance.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsU256(arg) ||\n    /**\n     * Determines if the provided argument is an instance of AccountAddress.\n     * This function helps validate whether a given input corresponds to a valid BCS address type.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsAddress(arg) ||\n    /**\n     * Determine if the provided argument is an instance of MoveString.\n     *\n     * @param arg - The argument to check, which can be of types EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsString(arg) ||\n    /**\n     * Determine if the provided argument is an instance of FixedBytes.\n     * This function helps to validate the type of the argument being passed.\n     *\n     * @param arg - The argument to check, which can be of type EntryFunctionArgumentTypes or SimpleEntryFunctionArgumentTypes.\n     * @group Implementation\n     * @category Transactions\n     */\n    isBcsFixedBytes(arg) ||\n    arg instanceof MoveVector ||\n    arg instanceof MoveOption\n  );\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsBool(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is Bool {\n  return arg instanceof Bool;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsAddress(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is AccountAddress {\n  return arg instanceof AccountAddress;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsString(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is MoveString {\n  return arg instanceof MoveString;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsFixedBytes(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is FixedBytes {\n  return arg instanceof FixedBytes;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU8(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U8 {\n  return arg instanceof U8;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU16(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U16 {\n  return arg instanceof U16;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU32(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U32 {\n  return arg instanceof U32;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU64(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U64 {\n  return arg instanceof U64;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU128(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U128 {\n  return arg instanceof U128;\n}\n/**\n * @group Implementation\n * @category Transactions\n */\nexport function isBcsU256(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U256 {\n  return arg instanceof U256;\n}\n\n/**\n * Determines if the provided argument contains script data input by checking for the presence of bytecode.\n *\n * @param arg - The input data to be checked, which can either be a payload with remote ABI or a standard payload.\n * @param arg.bytecode - The bytecode of the script, present if the input is script data.\n * @param arg.function - The function associated with the transaction, which is relevant for standard payloads.\n * @param arg.args - The arguments for the function, applicable in the context of standard payloads.\n * @group Implementation\n * @category Transactions\n */\nexport function isScriptDataInput(\n  arg: InputGenerateTransactionPayloadDataWithRemoteABI | InputGenerateTransactionPayloadData,\n): arg is InputScriptData {\n  return \"bytecode\" in arg;\n}\n\n/**\n * Throws an error indicating a type mismatch for a specified argument position.\n * This function helps in debugging by providing clear feedback on expected types.\n *\n * @param expectedType - The type that was expected for the argument.\n * @param position - The position of the argument that caused the type mismatch.\n * @group Implementation\n * @category Transactions\n */\nexport function throwTypeMismatch(expectedType: string, position: number) {\n  throw new Error(`Type mismatch for argument ${position}, expected '${expectedType}'`);\n}\n\n/**\n * Finds the index of the first non-signer argument in the function ABI parameters.\n *\n * A function is often defined with a `signer` or `&signer` arguments at the start, which are filled in\n * by signatures and not by the caller. This function helps identify the position of the first argument that\n * can be provided by the caller, allowing for easier handling of function parameters.\n *\n * @param functionAbi - The ABI of the function to analyze.\n * @returns The index of the first non-signer argument, or the length of the parameters array if none are found.\n * @group Implementation\n * @category Transactions\n */\nexport function findFirstNonSignerArg(functionAbi: MoveFunction): number {\n  const index = functionAbi.params.findIndex((param) => param !== \"signer\" && param !== \"&signer\");\n  if (index < 0) {\n    return functionAbi.params.length;\n  }\n  return index;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parseTypeTag } from \"../typeTag/parser\";\nimport {\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n} from \"../typeTag\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport {\n  EntryFunctionArgumentTypes,\n  SimpleEntryFunctionArgumentTypes,\n  EntryFunctionABI,\n  ViewFunctionABI,\n  FunctionABI,\n  TypeArgument,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { getModule } from \"../../internal/account\";\nimport {\n  findFirstNonSignerArg,\n  isBcsAddress,\n  isBcsBool,\n  isBcsString,\n  isBcsU128,\n  isBcsU16,\n  isBcsU256,\n  isBcsU32,\n  isBcsU64,\n  isBcsU8,\n  isBool,\n  isEncodedEntryFunctionArgument,\n  isLargeNumber,\n  isEmptyOption,\n  isString,\n  throwTypeMismatch,\n  convertNumber,\n} from \"./helpers\";\nimport { CallArgument, MoveFunction, MoveModule } from \"../../types\";\n\nconst TEXT_ENCODER = new TextEncoder();\n\n/**\n * Convert type arguments to only type tags, allowing for string representations of type tags.\n *\n * @param typeArguments - An optional array of type arguments that may include string representations.\n * @returns An array of TypeTag objects derived from the provided type arguments.\n * @group Implementation\n * @category Transactions\n */\nexport function standardizeTypeTags(typeArguments?: Array<TypeArgument>): Array<TypeTag> {\n  return (\n    typeArguments?.map((typeArg: TypeArgument): TypeTag => {\n      // Convert to TypeTag if it's a string representation\n      if (isString(typeArg)) {\n        return parseTypeTag(typeArg);\n      }\n      return typeArg;\n    }) ?? []\n  );\n}\n\n/**\n * Fetches the ABI of a specified module from the on-chain module ABI.\n *\n * @param moduleAddress - The address of the module from which to fetch the ABI.\n * @param moduleName - The name of the module containing the ABI.\n * @param aptosConfig - The configuration settings for Aptos.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchModuleAbi(\n  moduleAddress: string,\n  moduleName: string,\n  aptosConfig: AptosConfig,\n): Promise<MoveModule | undefined> {\n  const moduleBytecode = await getModule({ aptosConfig, accountAddress: moduleAddress, moduleName });\n  return moduleBytecode.abi;\n}\n\n/**\n * Fetches the ABI of a specified function from the on-chain module ABI. This function allows you to access the details of a\n * specific function within a module.\n *\n * @param moduleAddress - The address of the module from which to fetch the function ABI.\n * @param moduleName - The name of the module containing the function.\n * @param functionName - The name of the function whose ABI is to be fetched.\n * @param aptosConfig - The configuration settings for Aptos.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<MoveFunction | undefined> {\n  const moduleAbi = await fetchModuleAbi(moduleAddress, moduleName, aptosConfig);\n  if (!moduleAbi) throw new Error(`Could not find module ABI for '${moduleAddress}::${moduleName}'`);\n  return moduleAbi.exposed_functions.find((func) => func.name === functionName);\n}\n\n/**\n * @deprecated Use `fetchFunctionAbi` instead and manually parse the type tags.\n */\nexport async function fetchMoveFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<FunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n  if (!functionAbi) {\n    throw new Error(`Could not find function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n  const params: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Fetches the ABI for an entry function from the specified module address.\n * This function validates if the ABI corresponds to an entry function and retrieves its parameters.\n *\n * @param moduleAddress - The address of the module containing the entry function.\n * @param moduleName - The name of the module containing the entry function.\n * @param functionName - The name of the entry function to fetch the ABI for.\n * @param aptosConfig - The configuration settings for Aptos.\n * @returns An object containing the number of signers, type parameters, and function parameters.\n * @throws Error if the ABI cannot be found or if the function is not an entry function.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchEntryFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<EntryFunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find entry function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-entry functions also can't be used\n  if (!functionAbi.is_entry) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an entry function`);\n  }\n\n  // Remove the signer arguments\n  const numSigners = findFirstNonSignerArg(functionAbi);\n  const params: TypeTag[] = [];\n  for (let i = numSigners; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    signers: numSigners,\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Fetches the ABI for a view function from the specified module address.\n * This function ensures that the ABI is valid and retrieves the type parameters, parameters, and return types for the view function.\n *\n * @param moduleAddress - The address of the module containing the view function.\n * @param moduleName - The name of the module containing the view function.\n * @param functionName - The name of the view function for which to fetch the ABI.\n * @param aptosConfig - The configuration settings for Aptos.\n * @returns An object containing the type parameters, parameters, and return types of the view function.\n * @throws Error if the ABI cannot be found or if the function is not a view function.\n * @group Implementation\n * @category Transactions\n */\nexport async function fetchViewFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<ViewFunctionABI> {\n  const functionAbi = await fetchFunctionAbi(moduleAddress, moduleName, functionName, aptosConfig);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find view function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-view functions can't be used\n  if (!functionAbi.is_view) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an view function`);\n  }\n\n  // Type tag parameters for the function\n  const params: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  // The return types of the view function\n  const returnTypes: TypeTag[] = [];\n  for (let i = 0; i < functionAbi.return.length; i += 1) {\n    returnTypes.push(parseTypeTag(functionAbi.return[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n    returnTypes,\n  };\n}\n\n/**\n * @deprecated Handle this inline\n *\n * @example\n * ```typescript\n * const callArgument = argument instanceof CallArgument ? argument : CallArgument.newBytes(\n *   convertArgument(functionName, functionAbi, argument, position, genericTypeParams).bcsToBytes()\n * );\n * ```\n */\nexport function convertCallArgument(\n  argument: CallArgument | EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  functionName: string,\n  functionAbi: FunctionABI,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n): CallArgument {\n  if (argument instanceof CallArgument) {\n    return argument;\n  }\n  return CallArgument.newBytes(\n    convertArgument(functionName, functionAbi, argument, position, genericTypeParams).bcsToBytes(),\n  );\n}\n\n/**\n * Converts a non-BCS encoded argument into BCS encoded, if necessary.\n * This function checks the provided argument against the expected parameter type and converts it accordingly.\n *\n * @param functionName - The name of the function for which the argument is being converted.\n * @param functionAbiOrModuleAbi - The ABI (Application Binary Interface) of the function, which defines its parameters.\n * @param arg - The argument to be converted, which can be of various types.\n * @param position - The index of the argument in the function's parameter list.\n * @param genericTypeParams - An array of type tags for any generic type parameters.\n * @param options - Options for the conversion process.\n * @param options.allowUnknownStructs - If true, unknown structs will be allowed and converted to a `FixedBytes`.\n * @group Implementation\n * @category Transactions\n */\nexport function convertArgument(\n  functionName: string,\n  functionAbiOrModuleAbi: MoveModule | FunctionABI,\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  options?: { allowUnknownStructs?: boolean },\n) {\n  let param: TypeTag;\n\n  if (\"exposed_functions\" in functionAbiOrModuleAbi) {\n    const functionAbi = functionAbiOrModuleAbi.exposed_functions.find((func) => func.name === functionName);\n    if (!functionAbi) {\n      throw new Error(\n        `Could not find function ABI for '${functionAbiOrModuleAbi.address}::${functionAbiOrModuleAbi.name}::${functionName}'`,\n      );\n    }\n\n    if (position >= functionAbi.params.length) {\n      throw new Error(`Too many arguments for '${functionName}', expected ${functionAbi.params.length}`);\n    }\n\n    param = parseTypeTag(functionAbi.params[position], { allowGenerics: true });\n  } else {\n    if (position >= functionAbiOrModuleAbi.parameters.length) {\n      throw new Error(`Too many arguments for '${functionName}', expected ${functionAbiOrModuleAbi.parameters.length}`);\n    }\n\n    param = functionAbiOrModuleAbi.parameters[position];\n  }\n\n  return checkOrConvertArgument(\n    arg,\n    param,\n    position,\n    genericTypeParams,\n    \"exposed_functions\" in functionAbiOrModuleAbi ? functionAbiOrModuleAbi : undefined,\n    options,\n  );\n}\n\n/**\n * Checks if the provided argument is BCS encoded and converts it if necessary, ensuring type compatibility with the ABI.\n * This function helps in validating and converting arguments for entry functions based on their expected types.\n *\n * @param arg - The argument to check or convert, which can be either a simple or entry function argument type.\n * @param param - The expected type tag for the argument.\n * @param position - The position of the argument in the function call.\n * @param genericTypeParams - An array of generic type parameters that may be used for conversion.\n * @group Implementation\n * @category Transactions\n */\nexport function checkOrConvertArgument(\n  arg: SimpleEntryFunctionArgumentTypes | EntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  moduleAbi?: MoveModule,\n  options?: { allowUnknownStructs?: boolean },\n) {\n  // If the argument is bcs encoded, we can just use it directly\n  if (isEncodedEntryFunctionArgument(arg)) {\n    // Ensure the type matches the ABI\n\n    /**\n     * Checks the type of the provided argument against the expected type.\n     * This function helps validate that the argument conforms to the specified type requirements.\n     *\n     * @param typeArgs - The expected type arguments.\n     * @param arg - The argument to be checked.\n     * @param position - The position of the argument in the context of the check.\n     * @param moduleAbi - The ABI of the module containing the function, used for type checking.\n     *                    This will typically have information about structs, enums, and other types.\n     * @group Implementation\n     * @category Transactions\n     */\n    checkType(param, arg, position);\n    return arg;\n  }\n\n  // If it is not BCS encoded, we will need to convert it with the ABI\n  return parseArg(arg, param, position, genericTypeParams, moduleAbi, options);\n}\n\n/**\n * Parses a non-BCS encoded argument into a BCS encoded argument recursively.\n * This function helps convert various types of input arguments into their corresponding BCS encoded formats based on the\n * specified parameter type.\n *\n * @param arg - The argument to be parsed, which can be of various types.\n * @param param - The type tag that defines the expected type of the argument.\n * @param position - The position of the argument in the function call, used for error reporting.\n * @param genericTypeParams - An array of type tags for generic type parameters, used when the parameter type is generic.\n * @param moduleAbi - The ABI of the module containing the function, used for type checking.\n *                    This will typically have information about structs, enums, and other types.\n * @param options - Options for the conversion process.\n * @param options.allowUnknownStructs - If true, unknown structs will be allowed and converted to a `FixedBytes`.\n * @group Implementation\n * @category Transactions\n */\nfunction parseArg(\n  arg: SimpleEntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n  moduleAbi?: MoveModule,\n  options?: { allowUnknownStructs?: boolean },\n): EntryFunctionArgumentTypes {\n  if (param.isBool()) {\n    if (isBool(arg)) {\n      return new Bool(arg);\n    }\n    if (isString(arg)) {\n      if (arg === \"true\") return new Bool(true);\n      if (arg === \"false\") return new Bool(false);\n    }\n\n    /**\n     * Throws a type mismatch error for the specified move option.\n     *\n     * @param moveOption - The name of the move option that caused the type mismatch.\n     * @param position - The position where the error occurred.\n     * @group Implementation\n     * @category Transactions\n     */\n    throwTypeMismatch(\"boolean\", position);\n  }\n  // TODO: support uint8array?\n  if (param.isAddress()) {\n    if (isString(arg)) {\n      return AccountAddress.fromString(arg);\n    }\n    throwTypeMismatch(\"string | AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U8(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU16()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U16(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU32()) {\n    const num = convertNumber(arg);\n    if (num !== undefined) {\n      return new U32(num);\n    }\n    throwTypeMismatch(\"number | string\", position);\n  }\n  if (param.isU64()) {\n    if (isLargeNumber(arg)) {\n      return new U64(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU128()) {\n    if (isLargeNumber(arg)) {\n      return new U128(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU256()) {\n    if (isLargeNumber(arg)) {\n      return new U256(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n\n  // Generic needs to use the subtype\n  if (param.isGeneric()) {\n    const genericIndex = param.value;\n    if (genericIndex < 0 || genericIndex >= genericTypeParams.length) {\n      throw new Error(`Generic argument ${param.toString()} is invalid for argument ${position}`);\n    }\n\n    return checkOrConvertArgument(arg, genericTypeParams[genericIndex], position, genericTypeParams, moduleAbi);\n  }\n\n  // We have to special case some vectors for Vector<u8>\n  if (param.isVector()) {\n    // Check special case for Vector<u8>\n    if (param.value.isU8()) {\n      // We don't allow vector<u8>, but we convert strings to UTF8 Uint8Array\n      // This is legacy behavior from the original SDK\n      if (isString(arg)) {\n        return MoveVector.U8(TEXT_ENCODER.encode(arg));\n      }\n      if (arg instanceof Uint8Array) {\n        return MoveVector.U8(arg);\n      }\n      if (arg instanceof ArrayBuffer) {\n        return MoveVector.U8(new Uint8Array(arg));\n      }\n    }\n\n    if (isString(arg)) {\n      // In a web env, arguments are passing as strings\n      if (arg.startsWith(\"[\")) {\n        return checkOrConvertArgument(JSON.parse(arg), param, position, genericTypeParams);\n      }\n    }\n\n    // TODO: Support Uint16Array, Uint32Array, BigUint64Array?\n\n    if (Array.isArray(arg)) {\n      return new MoveVector(\n        arg.map((item) => checkOrConvertArgument(item, param.value, position, genericTypeParams, moduleAbi)),\n      );\n    }\n\n    throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n  }\n\n  // Handle structs as they're more complex\n  if (param.isStruct()) {\n    if (param.isString()) {\n      if (isString(arg)) {\n        return new MoveString(arg);\n      }\n      throwTypeMismatch(\"string\", position);\n    }\n    if (param.isObject()) {\n      // The inner type of Object doesn't matter, since it's just syntactic sugar\n      if (isString(arg)) {\n        return AccountAddress.fromString(arg);\n      }\n      throwTypeMismatch(\"string | AccountAddress\", position);\n    }\n    // Handle known enum types from Aptos framework\n    if (param.isDelegationKey() || param.isRateLimiter()) {\n      if (arg instanceof Uint8Array) {\n        return new FixedBytes(arg);\n      }\n      throwTypeMismatch(\"Uint8Array\", position);\n    }\n\n    if (param.isOption()) {\n      if (isEmptyOption(arg)) {\n        // Here we attempt to reconstruct the underlying type\n        // Note, for some reason the `isBool` etc. does not work with the compiler\n        const innerParam = param.value.typeArgs[0];\n        if (innerParam instanceof TypeTagBool) {\n          return new MoveOption<Bool>(null);\n        }\n        if (innerParam instanceof TypeTagAddress) {\n          return new MoveOption<AccountAddress>(null);\n        }\n        if (innerParam instanceof TypeTagU8) {\n          return new MoveOption<U8>(null);\n        }\n        if (innerParam instanceof TypeTagU16) {\n          return new MoveOption<U16>(null);\n        }\n        if (innerParam instanceof TypeTagU32) {\n          return new MoveOption<U32>(null);\n        }\n        if (innerParam instanceof TypeTagU64) {\n          return new MoveOption<U64>(null);\n        }\n        if (innerParam instanceof TypeTagU128) {\n          return new MoveOption<U128>(null);\n        }\n        if (innerParam instanceof TypeTagU256) {\n          return new MoveOption<U256>(null);\n        }\n\n        // In all other cases, we will use a placeholder, it doesn't actually matter what the type is, but it will be obvious\n        // Note: This is a placeholder U8 type, and does not match the actual type, as that can't be dynamically grabbed\n        return new MoveOption<MoveString>(null);\n      }\n\n      return new MoveOption(\n        checkOrConvertArgument(arg, param.value.typeArgs[0], position, genericTypeParams, moduleAbi),\n      );\n    }\n\n    // We are assuming that fieldless structs are enums, and therefore we cannot typecheck any further due\n    // to limited information from the ABI. This does not work for structs on other modules.\n    const structDefinition = moduleAbi?.structs.find((s) => s.name === param.value.name.identifier);\n    if (structDefinition?.fields.length === 0 && arg instanceof Uint8Array) {\n      return new FixedBytes(arg);\n    }\n\n    if (arg instanceof Uint8Array && options?.allowUnknownStructs) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        // eslint-disable-next-line max-len\n        `Unsupported struct input type for argument ${position}. Continuing since 'allowUnknownStructs' is enabled.`,\n      );\n      return new FixedBytes(arg);\n    }\n\n    throw new Error(`Unsupported struct input type for argument ${position}, type '${param.toString()}'`);\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n}\n\n/**\n * Checks that the type of the BCS encoded argument matches the ABI\n * @param param\n * @param arg\n * @param position\n * @group Implementation\n * @category Transactions\n */\nfunction checkType(param: TypeTag, arg: EntryFunctionArgumentTypes, position: number) {\n  if (param.isBool()) {\n    if (isBcsBool(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"Bool\", position);\n  }\n  if (param.isAddress()) {\n    if (isBcsAddress(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    if (isBcsU8(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U8\", position);\n  }\n  if (param.isU16()) {\n    if (isBcsU16(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U16\", position);\n  }\n  if (param.isU32()) {\n    if (isBcsU32(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U32\", position);\n  }\n  if (param.isU64()) {\n    if (isBcsU64(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U64\", position);\n  }\n  if (param.isU128()) {\n    if (isBcsU128(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U128\", position);\n  }\n  if (param.isU256()) {\n    if (isBcsU256(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U256\", position);\n  }\n  if (param.isVector()) {\n    if (arg instanceof MoveVector) {\n      // If there's anything in it, check that the inner types match\n      // Note that since it's typed, the first item should be the same as the rest\n      if (arg.values.length > 0) {\n        checkType(param.value, arg.values[0], position);\n      }\n\n      return;\n    }\n    throwTypeMismatch(\"MoveVector\", position);\n  }\n\n  // Handle structs as they're more complex\n  if (param instanceof TypeTagStruct) {\n    if (param.isString()) {\n      if (isBcsString(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"MoveString\", position);\n    }\n    if (param.isObject()) {\n      if (isBcsAddress(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"AccountAddress\", position);\n    }\n    if (param.isOption()) {\n      if (arg instanceof MoveOption) {\n        // If there's a value, we can check the inner type (otherwise it doesn't really matter)\n        if (arg.value !== undefined) {\n          checkType(param.value.typeArgs[0], arg.value, position);\n        }\n        return;\n      }\n      throwTypeMismatch(\"MoveOption\", position);\n    }\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, expected '${param.toString()}'`);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ScriptComposerWasm } from \"@aptos-labs/script-composer-pack\";\nimport { AptosApiType, getFunctionParts } from \"../../utils\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { InputBatchedFunctionData } from \"../types\";\nimport { standardizeTypeTags } from \"../transactionBuilder\";\nimport { CallArgument } from \"../../types\";\nimport { convertArgument, fetchModuleAbi } from \"../transactionBuilder/remoteAbi\";\n\n/**\n * A wrapper class around TransactionComposer, which is a WASM library compiled\n * from aptos-core/aptos-move/script-composer.\n * This class allows the SDK caller to build a transaction that invokes multiple Move functions\n * and allow for arguments to be passed around.\n * */\nexport class AptosScriptComposer {\n  private config: AptosConfig;\n\n  private builder?: any;\n\n  private static transactionComposer?: any;\n\n  constructor(aptosConfig: AptosConfig) {\n    this.config = aptosConfig;\n    this.builder = undefined;\n  }\n\n  // Initializing the wasm needed for the script composer, must be called\n  // before using the composer.\n  async init() {\n    if (!AptosScriptComposer.transactionComposer) {\n      const module = await import(\"@aptos-labs/script-composer-pack\");\n      const { TransactionComposer, initSync } = module;\n      if (!ScriptComposerWasm.isInitialized) {\n        ScriptComposerWasm.init();\n      }\n      initSync({ module: ScriptComposerWasm.wasm });\n      AptosScriptComposer.transactionComposer = TransactionComposer;\n    }\n    this.builder = AptosScriptComposer.transactionComposer.single_signer();\n  }\n\n  // Add a move function invocation to the TransactionComposer.\n  //\n  // Similar to how to create an entry function, the difference is that input arguments could\n  // either be a `CallArgument` which represents an abstract value returned from a previous Move call\n  // or the regular entry function arguments.\n  //\n  // The function would also return a list of `CallArgument` that can be passed on to future calls.\n  async addBatchedCalls(input: InputBatchedFunctionData): Promise<CallArgument[]> {\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(input.function);\n    const nodeUrl = this.config.getRequestUrl(AptosApiType.FULLNODE);\n\n    // Load the calling module into the builder.\n    await this.builder.load_module(nodeUrl, `${moduleAddress}::${moduleName}`);\n\n    // Load the calling type arguments into the loader.\n    if (input.typeArguments !== undefined) {\n      for (const typeArgument of input.typeArguments) {\n        await this.builder.load_type_tag(nodeUrl, typeArgument.toString());\n      }\n    }\n    const typeArguments = standardizeTypeTags(input.typeArguments);\n    const moduleAbi = await fetchModuleAbi(moduleAddress, moduleName, this.config);\n    if (!moduleAbi) {\n      throw new Error(`Could not find module ABI for '${moduleAddress}::${moduleName}'`);\n    }\n\n    // Check the type argument count against the ABI\n    const functionAbi = moduleAbi?.exposed_functions.find((func) => func.name === functionName);\n    if (!functionAbi) {\n      throw new Error(`Could not find function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n    }\n\n    if (typeArguments.length !== functionAbi.generic_type_params.length) {\n      throw new Error(\n        `Type argument count mismatch, expected ${functionAbi?.generic_type_params.length}, received ${typeArguments.length}`,\n      );\n    }\n\n    const functionArguments: CallArgument[] = input.functionArguments.map((arg, i) =>\n      arg instanceof CallArgument\n        ? arg\n        : CallArgument.newBytes(\n            convertArgument(functionName, moduleAbi, arg, i, typeArguments, { allowUnknownStructs: true }).bcsToBytes(),\n          ),\n    );\n\n    return this.builder.add_batched_call(\n      `${moduleAddress}::${moduleName}`,\n      functionName,\n      typeArguments.map((arg) => arg.toString()),\n      functionArguments,\n    );\n  }\n\n  build(): Uint8Array {\n    return this.builder.generate_batched_calls(true);\n  }\n}\n","/**\n * This file contains the underlying implementations for exposed submission API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Deserializer, MoveVector } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\nimport { Account, AbstractKeylessAccount, isKeylessSigner } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { FederatedKeylessPublicKey, KeylessPublicKey, KeylessSignature } from \"../core/crypto\";\nimport { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport {\n  buildTransaction,\n  generateTransactionPayload,\n  generateSignedTransactionForSimulation,\n  generateSignedTransaction,\n} from \"../transactions/transactionBuilder/transactionBuilder\";\nimport {\n  InputGenerateTransactionData,\n  AnyRawTransaction,\n  InputSimulateTransactionData,\n  InputGenerateTransactionOptions,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputSubmitTransactionData,\n  InputGenerateMultiAgentRawTransactionData,\n  InputGenerateSingleSignerRawTransactionData,\n  AnyTransactionPayloadInstance,\n  EntryFunctionABI,\n} from \"../transactions/types\";\nimport { UserTransactionResponse, PendingTransactionResponse, MimeType, HexInput } from \"../types\";\nimport { SignedTransaction, TypeTagVector, generateSigningMessageForTransaction } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { MultiAgentTransaction } from \"../transactions/instances/multiAgentTransaction\";\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for `generateTransaction` function.\n * When we call `generateTransaction` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n * @group Implementation\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateSingleSignerRawTransactionData,\n): Promise<SimpleTransaction>;\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateMultiAgentRawTransactionData,\n): Promise<MultiAgentTransaction>;\n/**\n * Generates any transaction by passing in the required arguments\n *\n * @param args.sender The transaction sender's account address as a AccountAddressInput\n * @param args.data EntryFunctionData | ScriptData | MultiSigData\n * @param args.feePayerAddress optional. For a fee payer (aka sponsored) transaction\n * @param args.secondarySignerAddresses optional. For a multi-agent or fee payer (aka sponsored) transactions\n * @param args.options optional. GenerateTransactionOptions type\n *\n * @example\n * For a single signer entry function\n * move function name, move function type arguments, move function arguments\n * `\n * data: {\n *  function:\"0x1::aptos_account::transfer\",\n *  typeArguments:[]\n *  functionArguments :[receiverAddress,10]\n * }\n * `\n *\n * @example\n * For a single signer script function\n * module bytecode, move function type arguments, move function arguments\n * ```\n * data: {\n *  bytecode:\"0x001234567\",\n *  typeArguments:[],\n *  functionArguments :[receiverAddress,10]\n * }\n * ```\n *\n * @return An instance of a RawTransaction, plus optional secondary/fee payer addresses\n * ```\n * {\n *  rawTransaction: RawTransaction,\n *  secondarySignerAddresses?: Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n * @group Implementation\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyRawTransaction> {\n  const payload = await buildTransactionPayload(args);\n  return buildRawTransaction(args, payload);\n}\n\n/**\n * Builds a transaction payload based on the provided configuration and input data.\n * This function is essential for preparing transaction data for execution on the Aptos blockchain.\n *\n * @param args - The arguments for building the transaction payload.\n * @param args.aptosConfig - Configuration settings for the Aptos network.\n * @param args.data - Input data required to generate the transaction payload, which may include bytecode, multisig address,\n * function name, function arguments, type arguments, and ABI.\n * @returns A promise that resolves to the generated transaction payload instance.\n * @group Implementation\n */\nexport async function buildTransactionPayload(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyTransactionPayloadInstance> {\n  const { aptosConfig, data } = args;\n  // Merge in aptosConfig for remote ABI on non-script payloads\n  let generateTransactionPayloadData: InputGenerateTransactionPayloadDataWithRemoteABI;\n  let payload: AnyTransactionPayloadInstance;\n\n  if (\"bytecode\" in data) {\n    // TODO: Add ABI checking later\n    payload = await generateTransactionPayload(data);\n  } else if (\"multisigAddress\" in data) {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      multisigAddress: data.multisigAddress,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n      abi: data.abi,\n    };\n    payload = await generateTransactionPayload(generateTransactionPayloadData);\n  } else {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n      abi: data.abi,\n    };\n    payload = await generateTransactionPayload(generateTransactionPayloadData);\n  }\n  return payload;\n}\n\n/**\n * Builds a raw transaction based on the provided configuration and payload.\n * This function helps in creating a transaction that can be sent to the Aptos blockchain.\n *\n * @param args - The arguments for generating the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The address of the sender of the transaction.\n * @param args.options - Additional options for the transaction.\n * @param payload - The payload of the transaction, which defines the action to be performed.\n * @group Implementation\n */\nexport async function buildRawTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n  payload: AnyTransactionPayloadInstance,\n): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, options } = args;\n\n  let feePayerAddress;\n  if (isFeePayerTransactionInput(args)) {\n    feePayerAddress = AccountAddress.ZERO.toString();\n  }\n\n  if (isMultiAgentTransactionInput(args)) {\n    const { secondarySignerAddresses } = args;\n    return buildTransaction({\n      aptosConfig,\n      sender,\n      payload,\n      options,\n      secondarySignerAddresses,\n      feePayerAddress,\n    });\n  }\n\n  return buildTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    feePayerAddress,\n  });\n}\n\n/**\n * Determine if the transaction input includes a fee payer.\n *\n * @param data - The input data for generating a transaction.\n * @param data.withFeePayer - Indicates whether a fee payer is included in the transaction input.\n * @returns A boolean value indicating if the transaction input has a fee payer.\n * @group Implementation\n */\nfunction isFeePayerTransactionInput(data: InputGenerateTransactionData): boolean {\n  return data.withFeePayer === true;\n}\n\n/**\n * Determines whether the provided transaction input data includes multiple agent signatures.\n *\n * @param data - The transaction input data to evaluate.\n * @param data.secondarySignerAddresses - An array of secondary signer addresses, indicating multiple agents.\n * @group Implementation\n */\nfunction isMultiAgentTransactionInput(\n  data: InputGenerateTransactionData,\n): data is InputGenerateMultiAgentRawTransactionData {\n  return \"secondarySignerAddresses\" in data;\n}\n\n/**\n * Builds a signing message that can be signed by external signers.\n *\n * Note: Please prefer using `signTransaction` unless signing outside the SDK.\n *\n * @param args - The arguments for generating the signing message.\n * @param args.transaction - AnyRawTransaction, as generated by `generateTransaction()`.\n *\n * @returns The message to be signed.\n * @group Implementation\n */\nexport function getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n  const { transaction } = args;\n  return generateSigningMessageForTransaction(transaction);\n}\n\n/**\n * Sign a transaction that can later be submitted to the chain.\n *\n * @param args The arguments for signing the transaction.\n * @param args.signer The signer account to sign the transaction.\n * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses.\n *\n * @return The signer AccountAuthenticator.\n * @group Implementation\n */\nexport function signTransaction(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n  return signer.signTransactionWithAuthenticator(transaction);\n}\n\nexport function signAsFeePayer(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n\n  // if transaction doesn't hold a \"feePayerAddress\" prop it means\n  // this is not a fee payer transaction\n  if (!transaction.feePayerAddress) {\n    throw new Error(`Transaction ${transaction} is not a Fee Payer transaction`);\n  }\n\n  // Set the feePayerAddress to the signer account address\n  transaction.feePayerAddress = signer.accountAddress;\n\n  return signTransaction({\n    signer,\n    transaction,\n  });\n}\n\n/**\n * Simulates a transaction before signing it to evaluate its potential outcome.\n *\n * @param args The arguments for simulating the transaction.\n * @param args.aptosConfig The configuration for the Aptos network.\n * @param args.transaction The raw transaction to simulate.\n * @param args.signerPublicKey Optional. The signer public key.\n * @param args.secondarySignersPublicKeys Optional. For when the transaction involves multiple signers.\n * @param args.feePayerPublicKey Optional. For when the transaction is sponsored by a fee payer.\n * @param args.options Optional. A configuration object to customize the simulation process.\n * @param args.options.estimateGasUnitPrice Optional. Indicates whether to estimate the gas unit price.\n * @param args.options.estimateMaxGasAmount Optional. Indicates whether to estimate the maximum gas amount.\n * @param args.options.estimatePrioritizedGasUnitPrice Optional. Indicates whether to estimate the prioritized gas unit price.\n * @group Implementation\n */\nexport async function simulateTransaction(\n  args: { aptosConfig: AptosConfig } & InputSimulateTransactionData,\n): Promise<Array<UserTransactionResponse>> {\n  const { aptosConfig, transaction, signerPublicKey, secondarySignersPublicKeys, feePayerPublicKey, options } = args;\n\n  const signedTransaction = generateSignedTransactionForSimulation({\n    transaction,\n    signerPublicKey,\n    secondarySignersPublicKeys,\n    feePayerPublicKey,\n    options,\n  });\n\n  const { data } = await postAptosFullNode<Uint8Array, Array<UserTransactionResponse>>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions/simulate\",\n    params: {\n      estimate_gas_unit_price: args.options?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: args.options?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: args.options?.estimatePrioritizedGasUnitPrice ?? false,\n    },\n    originMethod: \"simulateTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\n/**\n * Submit a transaction to the Aptos blockchain.\n *\n * @param args - The arguments for submitting the transaction.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.transaction - The Aptos transaction data to be submitted.\n * @param args.senderAuthenticator - The account authenticator of the transaction sender.\n * @param args.secondarySignerAuthenticators - Optional. Authenticators for additional signers in a multi-signer transaction.\n *\n * @returns PendingTransactionResponse - The response containing the status of the submitted transaction.\n * @group Implementation\n */\nexport async function submitTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n  } & InputSubmitTransactionData,\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig } = args;\n  const signedTransaction = generateSignedTransaction({ ...args });\n  try {\n    const { data } = await postAptosFullNode<Uint8Array, PendingTransactionResponse>({\n      aptosConfig,\n      body: signedTransaction,\n      path: \"transactions\",\n      originMethod: \"submitTransaction\",\n      contentType: MimeType.BCS_SIGNED_TRANSACTION,\n    });\n    return data;\n  } catch (e) {\n    const signedTxn = SignedTransaction.deserialize(new Deserializer(signedTransaction));\n    if (\n      signedTxn.authenticator.isSingleSender() &&\n      signedTxn.authenticator.sender.isSingleKey() &&\n      (signedTxn.authenticator.sender.public_key.publicKey instanceof KeylessPublicKey ||\n        signedTxn.authenticator.sender.public_key.publicKey instanceof FederatedKeylessPublicKey)\n    ) {\n      await AbstractKeylessAccount.fetchJWK({\n        aptosConfig,\n        publicKey: signedTxn.authenticator.sender.public_key.publicKey,\n        kid: (signedTxn.authenticator.sender.signature.signature as KeylessSignature).getJwkKid(),\n      });\n    }\n    throw e;\n  }\n}\n\nexport type FeePayerOrFeePayerAuthenticatorOrNeither =\n  | { feePayer: Account; feePayerAuthenticator?: never }\n  | { feePayer?: never; feePayerAuthenticator: AccountAuthenticator }\n  | { feePayer?: never; feePayerAuthenticator?: never };\n\nexport async function signAndSubmitTransaction(\n  args: FeePayerOrFeePayerAuthenticatorOrNeither & {\n    aptosConfig: AptosConfig;\n    signer: Account;\n    transaction: AnyRawTransaction;\n  },\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, signer, feePayer, transaction } = args;\n  // If the signer contains a KeylessAccount, await proof fetching in case the proof\n  // was fetched asynchronously.\n  if (isKeylessSigner(signer)) {\n    await signer.checkKeylessAccountValidity(aptosConfig);\n  }\n  if (isKeylessSigner(feePayer)) {\n    await feePayer.checkKeylessAccountValidity(aptosConfig);\n  }\n  const feePayerAuthenticator =\n    args.feePayerAuthenticator || (feePayer && signAsFeePayer({ signer: feePayer, transaction }));\n\n  const senderAuthenticator = signTransaction({ signer, transaction });\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator,\n    feePayerAuthenticator,\n  });\n}\n\nexport async function signAndSubmitAsFeePayer(args: {\n  aptosConfig: AptosConfig;\n  feePayer: Account;\n  senderAuthenticator: AccountAuthenticator;\n  transaction: AnyRawTransaction;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, senderAuthenticator, feePayer, transaction } = args;\n\n  if (isKeylessSigner(feePayer)) {\n    await feePayer.checkKeylessAccountValidity(aptosConfig);\n  }\n\n  const feePayerAuthenticator = signAsFeePayer({ signer: feePayer, transaction });\n\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator,\n    feePayerAuthenticator,\n  });\n}\n\nconst packagePublishAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [TypeTagVector.u8(), new TypeTagVector(TypeTagVector.u8())],\n};\n\n/**\n * Publishes a package transaction to the Aptos blockchain.\n * This function allows you to create and send a transaction that publishes a package with the specified metadata and bytecode.\n *\n * @param args - The arguments for the package transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.account - The address of the account sending the transaction.\n * @param args.metadataBytes - The metadata associated with the package, represented as hexadecimal input.\n * @param args.moduleBytecode - An array of module bytecode, each represented as hexadecimal input.\n * @param args.options - Optional parameters for generating the transaction.\n * @group Implementation\n */\nexport async function publicPackageTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: AccountAddressInput;\n  metadataBytes: HexInput;\n  moduleBytecode: Array<HexInput>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, account, metadataBytes, moduleBytecode, options } = args;\n\n  const totalByteCode = moduleBytecode.map((bytecode) => MoveVector.U8(bytecode));\n\n  return generateTransaction({\n    aptosConfig,\n    sender: AccountAddress.from(account),\n    data: {\n      function: \"0x1::code::publish_package_txn\",\n      functionArguments: [MoveVector.U8(metadataBytes), new MoveVector(totalByteCode)],\n      abi: packagePublishAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/account}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * account namespace and without having a dependency cycle error.\n * @group Implementation\n */\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  getAptosFullNode,\n  getPageWithObfuscatedCursor,\n  paginateWithCursor,\n  paginateWithObfuscatedCursor,\n} from \"../client\";\nimport {\n  AccountData,\n  CursorPaginationArgs,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  GetObjectDataQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  PendingTransactionResponse,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core/accountAddress\";\nimport { Account, Ed25519Account, MultiEd25519Account } from \"../account\";\nimport { AnyPublicKey, Ed25519PublicKey, PrivateKey } from \"../core/crypto\";\nimport { queryIndexer } from \"./general\";\nimport { getModule as getModuleUtil, getInfo as getInfoUtil } from \"./utils\";\nimport {\n  GetAccountCoinsCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCollectionsWithOwnedTokensQuery,\n  GetObjectDataQuery,\n  GetAccountOwnedTokensFromCollectionQuery,\n  GetAccountOwnedTokensQuery,\n  GetAccountTokensCountQuery,\n  GetAccountTransactionsCountQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetAccountCoinsCount,\n  GetAccountCoinsData,\n  GetAccountCollectionsWithOwnedTokens,\n  GetObjectData,\n  GetAccountOwnedTokens,\n  GetAccountOwnedTokensFromCollection,\n  GetAccountTokensCount,\n  GetAccountTransactionsCount,\n} from \"../types/generated/queries\";\nimport { Secp256k1PrivateKey, AuthenticationKey, Ed25519PrivateKey, createObjectAddress } from \"../core\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\nimport { getTableItem } from \"./table\";\nimport { APTOS_COIN } from \"../utils\";\nimport { AptosApiError } from \"../errors\";\nimport { signAndSubmitTransaction, generateTransaction } from \"./transactionSubmission\";\nimport { EntryFunctionABI, RotationProofChallenge, TypeTagU8, TypeTagVector } from \"../transactions\";\nimport { U8, MoveVector } from \"../bcs\";\nimport { waitForTransaction } from \"./transaction\";\n\n/**\n * Retrieves account information for a specified account address.\n *\n * @param args - The arguments for retrieving account information.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.accountAddress - The address of the account to retrieve information for.\n * @group Implementation\n */\nexport async function getInfo(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<AccountData> {\n  return getInfoUtil(args);\n}\n\n/**\n * Retrieves the modules associated with a specified account address.\n *\n * @param args - The arguments for retrieving modules.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account whose modules are to be retrieved.\n * @param args.options - Optional parameters for pagination and ledger version.\n * @param args.options.limit - The maximum number of modules to retrieve (default is 1000).\n * @param args.options.offset - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getModules(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: { limit?: number } & LedgerVersionArg;\n}): Promise<MoveModuleBytecode[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithObfuscatedCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModules\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      limit: options?.limit ?? 1000,\n    },\n  });\n}\n\n/**\n * Retrieves the modules associated with a specified account address.\n *\n * @param args - The arguments for retrieving modules.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account whose modules are to be retrieved.\n * @param args.options - Optional parameters for pagination and ledger version.\n * @param args.options.cursor - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.limit - The maximum number of modules to retrieve (default is 100).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getModulesPage(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: CursorPaginationArgs & LedgerVersionArg;\n}): Promise<{ modules: MoveModuleBytecode[]; cursor: string | undefined }> {\n  const { aptosConfig, accountAddress, options } = args;\n  const { response, cursor } = await getPageWithObfuscatedCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModulesPage\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      cursor: options?.cursor,\n      limit: options?.limit ?? 100,\n    },\n  });\n\n  return { modules: response.data, cursor };\n}\n\n/**\n * Queries for a move module given an account address and module name.\n * This function can help you retrieve the module's ABI and other relevant information.\n *\n * @param args - The arguments for retrieving the module.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The account address in hex-encoded 32 byte format.\n * @param args.moduleName - The name of the module to retrieve.\n * @param args.options - Optional parameters for the request.\n * @param args.options.ledgerVersion - Specifies the ledger version of transactions. By default, the latest version will be used.\n * @returns The move module.\n * @group Implementation\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  moduleName: string;\n  options?: LedgerVersionArg;\n}): Promise<MoveModuleBytecode> {\n  return getModuleUtil(args);\n}\n\n/**\n * Retrieves a list of transactions associated with a specific account address.\n * This function allows you to paginate through the transactions for better performance and usability.\n *\n * @param args - The arguments for retrieving transactions.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The account address for which to retrieve transactions.\n * @param args.options - Optional pagination parameters.\n * @param args.options.offset - The starting point for pagination.\n * @param args.options.limit - The maximum number of transactions to retrieve.\n * @group Implementation\n */\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/transactions`,\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\n/**\n * Retrieves a list of resources associated with a specific account address.\n *\n * @param args - The arguments for retrieving resources.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account to fetch resources for.\n * @param args.options - Optional pagination and ledger version parameters.\n * @param args.options.limit - The maximum number of resources to retrieve (default is 999).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getResources(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: { limit?: number } & LedgerVersionArg;\n}): Promise<MoveResource[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithObfuscatedCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResources\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      limit: options?.limit ?? 999,\n    },\n  });\n}\n\n/**\n * Retrieves a page of resources associated with a specific account address.\n *\n * @param args - The arguments for retrieving resources.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account to fetch resources for.\n * @param args.options - Optional pagination and ledger version parameters.\n * @param args.options.cursor - The starting point for pagination.  Note, this is obfuscated and is not an index.\n * @param args.options.limit - The maximum number of resources to retrieve (default is 100).\n * @param args.options.ledgerVersion - The specific ledger version to query.\n * @group Implementation\n */\nexport async function getResourcesPage(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: CursorPaginationArgs & LedgerVersionArg;\n}): Promise<{ resources: MoveResource[]; cursor: string | undefined }> {\n  const { aptosConfig, accountAddress, options } = args;\n  const { response, cursor } = await getPageWithObfuscatedCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResourcesPage\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      cursor: options?.cursor,\n      limit: options?.limit ?? 100,\n    },\n  });\n\n  return { resources: response.data, cursor };\n}\n\n/**\n * Retrieves a specific resource of a given type for the specified account address.\n *\n * @param args - The arguments for retrieving the resource.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account from which to retrieve the resource.\n * @param args.resourceType - The type of the resource to retrieve, specified as a MoveStructId.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @group Implementation\n */\nexport async function getResource<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  resourceType: MoveStructId;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, accountAddress, resourceType, options } = args;\n  const { data } = await getAptosFullNode<{}, MoveResource>({\n    aptosConfig,\n    originMethod: \"getResource\",\n    path: `accounts/${AccountAddress.from(accountAddress).toString()}/resource/${resourceType}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data.data as T;\n}\n\n/**\n * Retrieves the original account address associated with a given authentication key, which is useful for handling key rotations.\n *\n * @param args - The arguments for the lookup.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.authenticationKey - The authentication key for which to look up the original address.\n * @param args.options - Optional parameters for specifying the ledger version.\n * @returns The original account address or the provided authentication key address if not found.\n * @throws Throws an error if the lookup fails for reasons other than the address not being found.\n * @group Implementation\n */\nexport async function lookupOriginalAccountAddress(args: {\n  aptosConfig: AptosConfig;\n  authenticationKey: AccountAddressInput;\n  options?: LedgerVersionArg;\n}): Promise<AccountAddress> {\n  const { aptosConfig, authenticationKey, options } = args;\n  type OriginatingAddress = {\n    address_map: { handle: string };\n  };\n  const resource = await getResource<OriginatingAddress>({\n    aptosConfig,\n    accountAddress: \"0x1\",\n    resourceType: \"0x1::account::OriginatingAddress\",\n    options,\n  });\n\n  const {\n    address_map: { handle },\n  } = resource;\n\n  const authKeyAddress = AccountAddress.from(authenticationKey);\n\n  // If the address is not found in the address map, which means its not rotated\n  // then return the address as is\n  try {\n    const originalAddress = await getTableItem<string>({\n      aptosConfig,\n      handle,\n      data: {\n        key: authKeyAddress.toString(),\n        key_type: \"address\",\n        value_type: \"address\",\n      },\n      options,\n    });\n\n    return AccountAddress.from(originalAddress);\n  } catch (err) {\n    if (err instanceof AptosApiError && err.data.error_code === \"table_item_not_found\") {\n      return authKeyAddress;\n    }\n\n    throw err;\n  }\n}\n\n/**\n * Retrieves the count of tokens owned by a specific account address.\n *\n * @param args - The arguments for retrieving the account tokens count.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.accountAddress - The address of the account for which to count the tokens.\n * @returns The count of tokens owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountTokensCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number } } = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountTokensCount,\n    variables: { where_condition: whereCondition },\n  };\n\n  const data = await queryIndexer<GetAccountTokensCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTokensCount\",\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.current_token_ownerships_v2_aggregate.aggregate\n    ? data.current_token_ownerships_v2_aggregate.aggregate.count\n    : 0;\n}\n\n/**\n * Retrieves the tokens owned by a specified account address.\n *\n * @param args - The arguments for retrieving the account's tokens.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose tokens are being queried.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - The specific token standard to filter the results.\n * @param args.options.offset - The number of records to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n * @returns A promise that resolves to the current token ownerships of the specified account.\n * @group Implementation\n */\nexport async function getAccountOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n}): Promise<GetAccountOwnedTokensQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string }; amount: { _gt: number }; token_standard?: { _eq: string } } =\n    {\n      owner_address: { _eq: address },\n      amount: { _gt: 0 },\n    };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokens\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the tokens owned by a specific account from a particular collection address.\n *\n * @param args - The parameters required to fetch the owned tokens.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.accountAddress - The address of the account whose tokens are being queried.\n * @param args.collectionAddress - The address of the collection from which tokens are being retrieved.\n * @param args.options - Optional parameters for filtering and pagination, including token standard, pagination arguments, and\n * order by options.\n * @group Implementation\n */\nexport async function getAccountOwnedTokensFromCollectionAddress(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  collectionAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n}): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n  const { aptosConfig, accountAddress, collectionAddress, options } = args;\n  const ownerAddress = AccountAddress.from(accountAddress).toStringLong();\n  const collAddress = AccountAddress.from(collectionAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    current_token_data: { collection_id: { _eq: string } };\n    amount: { _gt: number };\n    token_standard?: { _eq: string };\n  } = {\n    owner_address: { _eq: ownerAddress },\n    current_token_data: { collection_id: { _eq: collAddress } },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokensFromCollection,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensFromCollectionQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokensFromCollectionAddress\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the collections owned by a specified account along with the tokens in those collections.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose collections are being queried.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - An optional token standard to filter the collections.\n * @param args.options.offset - An optional offset for pagination.\n * @param args.options.limit - An optional limit for the number of results returned.\n * @param args.options.orderBy - An optional parameter to specify the order of the results.\n * @group Implementation\n */\nexport async function getAccountCollectionsWithOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n}): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: {\n    owner_address: { _eq: string };\n    current_collection?: { token_standard: { _eq: string } };\n  } = {\n    owner_address: { _eq: address },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.current_collection = {\n      token_standard: { _eq: options?.tokenStandard },\n    };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountCollectionsWithOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCollectionsWithOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCollectionsWithOwnedTokens\",\n  });\n\n  return data.current_collection_ownership_v2_view;\n}\n\n/**\n * Retrieves the count of transactions associated with a specified account.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.accountAddress - The address of the account for which to retrieve the transaction count.\n * @returns The number of transactions associated with the specified account.\n * @group Implementation\n */\nexport async function getAccountTransactionsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountTransactionsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountTransactionsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTransactionsCount\",\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.account_transactions_aggregate.aggregate ? data.account_transactions_aggregate.aggregate.count : 0;\n}\n\n/**\n * Retrieves the amount of a specific coin held by an account.\n *\n * @param args - The parameters for the request.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.accountAddress - The address of the account to query.\n * @param args.coinType - Optional; the type of coin to check the amount for.\n * @param args.faMetadataAddress - Optional; the address of the fungible asset metadata.\n * @returns The amount of the specified coin held by the account, or 0 if none is found.\n * @throws Error if neither coinType nor faMetadataAddress is provided.\n * @group Implementation\n */\nexport async function getAccountCoinAmount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  coinType?: MoveStructId;\n  faMetadataAddress?: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress, coinType, faMetadataAddress } = args;\n\n  let coinAssetType: string | undefined = coinType;\n  let faAddress: string;\n\n  if (coinType !== undefined && faMetadataAddress !== undefined) {\n    faAddress = AccountAddress.from(faMetadataAddress).toStringLong();\n  } else if (coinType !== undefined && faMetadataAddress === undefined) {\n    // TODO Move to a separate function as defined in the AIP for coin migration\n    if (coinType === APTOS_COIN) {\n      faAddress = AccountAddress.A.toStringLong();\n    } else {\n      faAddress = createObjectAddress(AccountAddress.A, coinType).toStringLong();\n    }\n  } else if (coinType === undefined && faMetadataAddress !== undefined) {\n    const addr = AccountAddress.from(faMetadataAddress);\n    faAddress = addr.toStringLong();\n    if (addr === AccountAddress.A) {\n      coinAssetType = APTOS_COIN;\n    }\n    // The paired CoinType should be populated outside of this function in another\n    // async call. We cannot do this internally due to dependency cycles issue.\n  } else {\n    throw new Error(\"Either coinType, fungibleAssetAddress, or both must be provided\");\n  }\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  // Search by fungible asset address, unless it has a coin it migrated from\n  let where: any = { asset_type: { _eq: faAddress } };\n  if (coinAssetType !== undefined) {\n    where = { asset_type: { _in: [coinAssetType, faAddress] } };\n  }\n\n  const data = await getAccountCoinsData({\n    aptosConfig,\n    accountAddress: address,\n    options: {\n      where,\n    },\n  });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data[0] ? data[0].amount : 0;\n}\n\n/**\n * Retrieves the current fungible asset balances for a specified account.\n *\n * @param args - The arguments for retrieving account coins data.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account for which to retrieve coin data.\n * @param args.options - Optional parameters for pagination and filtering the results.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n * @param args.options.where - Conditions to filter the results based on the current fungible asset balances.\n * @group Implementation\n */\nexport async function getAccountCoinsData(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetAccountCoinsDataResponse[0]> & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetAccountCoinsDataResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    ...options?.where,\n    owner_address: { _eq: address },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountCoinsData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsData\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\n/**\n * Retrieves the count of fungible asset coins held by a specified account.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.accountAddress - The address of the account for which to retrieve the coin count.\n * @throws Error if the count of account coins cannot be retrieved.\n * @group Implementation\n */\nexport async function getAccountCoinsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const graphqlQuery = {\n    query: GetAccountCoinsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsCount\",\n  });\n\n  if (!data.current_fungible_asset_balances_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account coins\");\n  }\n\n  return data.current_fungible_asset_balances_aggregate.aggregate.count;\n}\n\n/**\n * Retrieves the objects owned by a specified account.\n *\n * @param args - The parameters for the request.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param args.accountAddress - The address of the account whose owned objects are to be retrieved.\n * @param args.options - Optional parameters for pagination and ordering of the results.\n * @param args.options.offset - The number of items to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of items to return.\n * @param args.options.orderBy - The criteria to order the results by.\n * @returns A promise that resolves to the current objects owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountOwnedObjects(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n}): Promise<GetObjectDataQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: { owner_address: { _eq: string } } = {\n    owner_address: { _eq: address },\n  };\n  const graphqlQuery = {\n    query: GetObjectData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetObjectDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedObjects\",\n  });\n\n  return data.current_objects;\n}\n\n/**\n * Derives an account from the provided private key and Aptos configuration.\n * This function helps in obtaining the account details associated with a given private key,\n * considering both unified and legacy authentication schemes.\n *\n * NOTE: There is a potential issue once the unified single signer scheme is adopted by the community.\n * Because one could create two accounts with the same private key with this new authenticator type,\n * we’ll need to determine the order in which we look up the accounts: first unified scheme and then legacy scheme,\n * or first legacy scheme and then unified scheme.\n *\n * @param args - The arguments for deriving the account.\n * @param args.aptosConfig - The Aptos configuration used for account lookup.\n * @param args.privateKey - The private key used to derive the account.\n * @throws Error if the account cannot be derived from the private key.\n * @group Implementation\n * @deprecated Note that more inspection is needed by the user to determine which account exists on-chain\n */\nexport async function deriveAccountFromPrivateKey(args: {\n  aptosConfig: AptosConfig;\n  privateKey: PrivateKey;\n}): Promise<Account> {\n  const { aptosConfig, privateKey } = args;\n  const publicKey = new AnyPublicKey(privateKey.publicKey());\n\n  if (privateKey instanceof Secp256k1PrivateKey) {\n    // private key is secp256k1, therefore we know it for sure uses a single signer key\n    const authKey = AuthenticationKey.fromPublicKey({ publicKey });\n    const address = authKey.derivedAddress();\n    return Account.fromPrivateKey({ privateKey, address });\n  }\n\n  if (privateKey instanceof Ed25519PrivateKey) {\n    // lookup legacy ed25519\n    const legacyAuthKey = AuthenticationKey.fromPublicKey({\n      publicKey: publicKey.publicKey as Ed25519PublicKey,\n    });\n    const isLegacyEd25519 = await isAccountExist({ authKey: legacyAuthKey, aptosConfig });\n    if (isLegacyEd25519) {\n      const address = legacyAuthKey.derivedAddress();\n      return Account.fromPrivateKey({ privateKey, address, legacy: true });\n    }\n    // lookup single sender ed25519\n    const singleSenderTransactionAuthenticatorAuthKey = AuthenticationKey.fromPublicKey({\n      publicKey,\n    });\n    const isSingleSenderTransactionAuthenticator = await isAccountExist({\n      authKey: singleSenderTransactionAuthenticatorAuthKey,\n      aptosConfig,\n    });\n    if (isSingleSenderTransactionAuthenticator) {\n      const address = singleSenderTransactionAuthenticatorAuthKey.derivedAddress();\n      return Account.fromPrivateKey({ privateKey, address, legacy: false });\n    }\n  }\n  // if we are here, it means we couldn't find an address with an\n  // auth key that matches the provided private key\n  throw new Error(`Can't derive account from private key ${privateKey}`);\n}\n\n/**\n * Checks if an account exists by verifying its information against the Aptos blockchain.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.authKey - The authentication key used to derive the account address.\n * @returns A promise that resolves to a boolean indicating whether the account exists.\n *\n * @throws Throws an Error if there is an issue while looking for account information.\n * @group Implementation\n */\nexport async function isAccountExist(args: { aptosConfig: AptosConfig; authKey: AuthenticationKey }): Promise<boolean> {\n  const { aptosConfig, authKey } = args;\n  const accountAddress = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: authKey.derivedAddress(),\n  });\n\n  try {\n    await getInfo({\n      aptosConfig,\n      accountAddress,\n    });\n    return true;\n  } catch (error: any) {\n    // account not found\n    if (error.status === 404) {\n      return false;\n    }\n    throw new Error(`Error while looking for an account info ${accountAddress.toString()}`);\n  }\n}\n\nconst rotateAuthKeyAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    new TypeTagU8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Rotates the authentication key for a given account.\n *\n * @param args - The arguments for rotating the authentication key.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.fromAccount - The account from which the authentication key will be rotated.\n * @param args.toAccount - (Optional) The target account to rotate to. Required if not using toNewPrivateKey or toAuthKey.\n * @param args.toNewPrivateKey - (Optional) The new private key to rotate to. Required if not using toAccount or toAuthKey.\n * @param args.toAuthKey - (Optional) The new authentication key to rotate to. Can only be used with dangerouslySkipVerification=true.\n * @param args.dangerouslySkipVerification - (Optional) If true, skips verification steps after rotation. Required when using toAuthKey.\n *\n * @remarks\n * This function supports three modes of rotation:\n * 1. Using a target Account object (toAccount)\n * 2. Using a new private key (toNewPrivateKey)\n * 3. Using a raw authentication key (toAuthKey) - requires dangerouslySkipVerification=true\n *\n * When not using dangerouslySkipVerification, the function performs additional safety checks and account setup.\n *\n * If the new key is a multi key, skipping verification is dangerous because verification will publish the public key onchain and\n * prevent users from being locked out of the account from loss of knowledge of one of the public keys.\n *\n * @returns A promise that resolves to the pending transaction response.\n * @throws Error if the rotation fails or verification fails.\n *\n * @group Implementation\n */\nexport async function rotateAuthKey(\n  args: {\n    aptosConfig: AptosConfig;\n    fromAccount: Account;\n  } & (\n    | { toAccount: Account; dangerouslySkipVerification?: never }\n    | { toNewPrivateKey: Ed25519PrivateKey; dangerouslySkipVerification?: never }\n    | { toAuthKey: AuthenticationKey; dangerouslySkipVerification: true }\n  ),\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount, dangerouslySkipVerification } = args;\n  if (\"toNewPrivateKey\" in args) {\n    return rotateAuthKeyWithChallenge({\n      aptosConfig,\n      fromAccount,\n      toNewPrivateKey: args.toNewPrivateKey,\n    });\n  }\n  let authKey: AuthenticationKey;\n  if (\"toAccount\" in args) {\n    if (args.toAccount instanceof Ed25519Account) {\n      return rotateAuthKeyWithChallenge({ aptosConfig, fromAccount, toNewPrivateKey: args.toAccount.privateKey });\n    }\n    if (args.toAccount instanceof MultiEd25519Account) {\n      return rotateAuthKeyWithChallenge({ aptosConfig, fromAccount, toAccount: args.toAccount });\n    }\n    authKey = args.toAccount.publicKey.authKey();\n  } else if (\"toAuthKey\" in args) {\n    authKey = args.toAuthKey;\n  } else {\n    throw new Error(\"Invalid arguments\");\n  }\n\n  const pendingTxn = await rotateAuthKeyUnverified({\n    aptosConfig,\n    fromAccount,\n    toAuthKey: authKey,\n  });\n\n  if (dangerouslySkipVerification === true) {\n    return pendingTxn;\n  }\n\n  const rotateAuthKeyTxnResponse = await waitForTransaction({\n    aptosConfig,\n    transactionHash: pendingTxn.hash,\n  });\n  if (!rotateAuthKeyTxnResponse.success) {\n    throw new Error(`Failed to rotate authentication key - ${rotateAuthKeyTxnResponse}`);\n  }\n\n  // Verify the rotation by setting the originating address to the new account.\n  // This verifies the rotation even if the transaction payload fails to execute successfully.\n  const verificationTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::set_originating_address\",\n      functionArguments: [],\n    },\n  });\n\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: args.toAccount, // Use the new account to sign\n    transaction: verificationTxn,\n  });\n}\n\nasync function rotateAuthKeyWithChallenge(\n  args: {\n    aptosConfig: AptosConfig;\n    fromAccount: Account;\n  } & ({ toNewPrivateKey: Ed25519PrivateKey } | { toAccount: MultiEd25519Account }),\n): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount } = args;\n  const accountInfo = await getInfo({\n    aptosConfig,\n    accountAddress: fromAccount.accountAddress,\n  });\n\n  let newAccount: Account;\n  if (\"toNewPrivateKey\" in args) {\n    newAccount = Account.fromPrivateKey({ privateKey: args.toNewPrivateKey, legacy: true });\n  } else {\n    newAccount = args.toAccount;\n  }\n\n  const challenge = new RotationProofChallenge({\n    sequenceNumber: BigInt(accountInfo.sequence_number),\n    originator: fromAccount.accountAddress,\n    currentAuthKey: AccountAddress.from(accountInfo.authentication_key),\n    newPublicKey: newAccount.publicKey,\n  });\n\n  // Sign the challenge\n  const challengeHex = challenge.bcsToBytes();\n  const proofSignedByCurrentKey = fromAccount.sign(challengeHex);\n  const proofSignedByNewKey = newAccount.sign(challengeHex);\n\n  // Generate transaction\n  const rawTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::rotate_authentication_key\",\n      functionArguments: [\n        new U8(fromAccount.signingScheme), // from scheme\n        MoveVector.U8(fromAccount.publicKey.toUint8Array()),\n        new U8(newAccount.signingScheme), // to scheme\n        MoveVector.U8(newAccount.publicKey.toUint8Array()),\n        MoveVector.U8(proofSignedByCurrentKey.toUint8Array()),\n        MoveVector.U8(proofSignedByNewKey.toUint8Array()),\n      ],\n      abi: rotateAuthKeyAbi,\n    },\n  });\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: fromAccount,\n    transaction: rawTxn,\n  });\n}\n\nconst rotateAuthKeyUnverifiedAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [TypeTagVector.u8()],\n};\n\nasync function rotateAuthKeyUnverified(args: {\n  aptosConfig: AptosConfig;\n  fromAccount: Account;\n  toAuthKey: AuthenticationKey;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, fromAccount, toAuthKey } = args;\n  const authKey = toAuthKey;\n  const rawTxn = await generateTransaction({\n    aptosConfig,\n    sender: fromAccount.accountAddress,\n    data: {\n      function: \"0x1::account::rotate_authentication_key_call\",\n      functionArguments: [MoveVector.U8(authKey.toUint8Array())],\n      abi: rotateAuthKeyUnverifiedAbi,\n    },\n  });\n  return signAndSubmitTransaction({\n    aptosConfig,\n    signer: fromAccount,\n    transaction: rawTxn,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { LedgerVersionArg, MimeType, MoveValue } from \"../types\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  generateViewFunctionPayload,\n  InputViewFunctionData,\n  InputViewFunctionJsonData,\n  ViewFunctionJsonPayload,\n} from \"../transactions\";\nimport { Serializer } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\n\nexport async function view<T extends Array<MoveValue> = Array<MoveValue>>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionData;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, payload, options } = args;\n  const viewFunctionPayload = await generateViewFunctionPayload({\n    ...payload,\n    aptosConfig,\n  });\n\n  const serializer = new Serializer();\n  viewFunctionPayload.serialize(serializer);\n  const bytes = serializer.toUint8Array();\n\n  const { data } = await postAptosFullNode<Uint8Array, MoveValue[]>({\n    aptosConfig,\n    path: \"view\",\n    originMethod: \"view\",\n    contentType: MimeType.BCS_VIEW_FUNCTION,\n    params: { ledger_version: options?.ledgerVersion },\n    body: bytes,\n  });\n\n  return data as T;\n}\n\nexport async function viewJson<T extends Array<MoveValue> = Array<MoveValue>>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionJsonData;\n  options?: LedgerVersionArg;\n}): Promise<T> {\n  const { aptosConfig, payload, options } = args;\n  const { data } = await postAptosFullNode<ViewFunctionJsonPayload, MoveValue[]>({\n    aptosConfig,\n    originMethod: \"viewJson\",\n    path: \"view\",\n    params: { ledger_version: options?.ledgerVersion },\n    body: {\n      function: payload.function,\n      type_arguments: payload.typeArguments ?? [],\n      arguments: payload.functionArguments ?? [],\n    },\n  });\n\n  return data as T;\n}\n","import {\n  SimpleTransaction,\n  InputGenerateTransactionOptions,\n  TypeTagAddress,\n  TypeTagStruct,\n  stringStructTag,\n} from \"../transactions\";\nimport { AccountAddressInput } from \"../core\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MoveFunctionId } from \"../types\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getFunctionParts } from \"../utils/helpers\";\n\nexport async function addAuthenticationFunctionTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  authenticationFunction: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, authenticationFunction, options } = args;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(authenticationFunction as MoveFunctionId);\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::add_authentication_function\",\n      typeArguments: [],\n      functionArguments: [moduleAddress, moduleName, functionName],\n      abi: {\n        typeParameters: [],\n        parameters: [new TypeTagAddress(), new TypeTagStruct(stringStructTag()), new TypeTagStruct(stringStructTag())],\n      },\n    },\n    options,\n  });\n}\n\nexport async function removeAuthenticationFunctionTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  authenticationFunction: string;\n  options?: InputGenerateTransactionOptions;\n}) {\n  const { aptosConfig, sender, authenticationFunction, options } = args;\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(authenticationFunction as MoveFunctionId);\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::remove_authentication_function\",\n      typeArguments: [],\n      functionArguments: [moduleAddress, moduleName, functionName],\n      abi: {\n        typeParameters: [],\n        parameters: [new TypeTagAddress(), new TypeTagStruct(stringStructTag()), new TypeTagStruct(stringStructTag())],\n      },\n    },\n    options,\n  });\n}\n\nexport async function removeDispatchableAuthenticatorTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}) {\n  const { aptosConfig, sender, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::account_abstraction::remove_authenticator\",\n      typeArguments: [],\n      functionArguments: [],\n      abi: { typeParameters: [], parameters: [] },\n    },\n    options,\n  });\n}\n","import { AccountAddress, AccountAddressInput } from \"../../core\";\nimport {\n  addAuthenticationFunctionTransaction,\n  removeAuthenticationFunctionTransaction,\n  removeDispatchableAuthenticatorTransaction,\n} from \"../../internal/abstraction\";\nimport { view } from \"../../internal/view\";\nimport { InputGenerateTransactionOptions, TypeTagAddress } from \"../../transactions\";\nimport { MoveFunctionId } from \"../../types\";\nimport { getFunctionParts } from \"../../utils/helpers\";\nimport { AptosConfig } from \"../aptosConfig\";\n\nexport class AccountAbstraction {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Adds a dispatchable authentication function to the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.addAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn =  await aptos.signAndSubmitTransaction({ signer: alice, transaction});\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to add the authentication function to.\n   * @param args.authenticationFunction - The authentication function info to add.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to add the authentication function to the account.\n   */\n  public async addAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return addAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      authenticationFunction,\n      sender: accountAddress,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authentication function from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authentication function from.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authentication function from the account.\n   */\n  public async removeAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return removeAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      sender: accountAddress,\n      authenticationFunction,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authenticator from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeDispatchableAuthenticatorTransaction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authenticator from.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authenticator from the account.\n   */\n  public async removeDispatchableAuthenticatorTransaction(args: {\n    accountAddress: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, options } = args;\n    return removeDispatchableAuthenticatorTransaction({ aptosConfig: this.config, sender: accountAddress, options });\n  }\n\n  /**\n   * Gets the dispatchable authentication function for the account.\n   *\n   * @example\n   * ```ts\n   * const functionInfos = await aptos.abstraction.getAuthenticationFunction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * if (functionInfos) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to get the dispatchable authentication function for.\n   * @returns The dispatchable authentication function for the account.\n   */\n  public async getAuthenticationFunction(args: { accountAddress: AccountAddressInput }) {\n    const { accountAddress } = args;\n    const [{ vec: functionInfoOption }] = await view<\n      [{ vec: { function_name: string; module_name: string; module_address: string }[][] }]\n    >({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::account_abstraction::dispatchable_authenticator\",\n        functionArguments: [AccountAddress.from(accountAddress)],\n        abi: { typeParameters: [], parameters: [new TypeTagAddress()], returnTypes: [] },\n      },\n    });\n\n    if (functionInfoOption.length === 0) return undefined;\n\n    return functionInfoOption[0].map((functionInfo) => ({\n      moduleAddress: AccountAddress.fromString(functionInfo.module_address),\n      moduleName: functionInfo.module_name,\n      functionName: functionInfo.function_name,\n    }));\n  }\n\n  /**\n   * Will return true if the account is abstracted, otherwise false.\n   *\n   * @example\n   * ```ts\n   * const isAccountAbstractionEnabled = await aptos.abstraction.isAccountAbstractionEnabled({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   * if (isAccountAbstractionEnabled) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to check.\n   * @returns Whether the account is abstracted.\n   */\n  public isAccountAbstractionEnabled = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n  }) => {\n    const functionInfos = await this.getAuthenticationFunction(args);\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(args.authenticationFunction as MoveFunctionId);\n    return (\n      functionInfos?.some(\n        (functionInfo) =>\n          AccountAddress.fromString(moduleAddress).equals(functionInfo.moduleAddress) &&\n          moduleName === functionInfo.moduleName &&\n          functionName === functionInfo.functionName,\n      ) ?? false\n    );\n  };\n\n  /**\n   * Creates a transaction to enable account abstraction with the given authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.enableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `{alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to enable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to use.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to enable account abstraction for the account.\n   */\n  public enableAccountAbstractionTransaction = this.addAuthenticationFunctionTransaction;\n\n  /**\n   * Creates a transaction to disable account abstraction. If an authentication function is provided, it will specify to\n   * remove the authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.disableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to disable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to disable account abstraction for the account.\n   */\n  public disableAccountAbstractionTransaction = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction?: string;\n    options?: InputGenerateTransactionOptions;\n  }) => {\n    const { accountAddress, authenticationFunction, options } = args;\n    if (authenticationFunction) {\n      return this.removeAuthenticationFunctionTransaction({\n        accountAddress,\n        authenticationFunction,\n        options,\n      });\n    }\n    return this.removeDispatchableAuthenticatorTransaction({ accountAddress, options });\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account as AccountModule } from \"../account\";\nimport { AccountAddress, PrivateKey, AccountAddressInput, createObjectAddress } from \"../core\";\nimport {\n  AccountData,\n  AnyNumber,\n  CursorPaginationArgs,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  GetObjectDataQueryResponse,\n  LedgerVersionArg,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructId,\n  MoveValue,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n  TransactionResponse,\n  WhereArg,\n} from \"../types\";\nimport {\n  deriveAccountFromPrivateKey,\n  getAccountCoinsCount,\n  getAccountCoinsData,\n  getAccountCollectionsWithOwnedTokens,\n  getAccountOwnedObjects,\n  getAccountOwnedTokens,\n  getAccountOwnedTokensFromCollectionAddress,\n  getAccountTokensCount,\n  getAccountTransactionsCount,\n  getInfo,\n  getModule,\n  getModules,\n  getModulesPage,\n  getResource,\n  getResources,\n  getResourcesPage,\n  getTransactions,\n  lookupOriginalAccountAddress,\n} from \"../internal/account\";\nimport { APTOS_COIN, APTOS_FA, ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { CurrentFungibleAssetBalancesBoolExp } from \"../types/generated/types\";\nimport { view } from \"../internal/view\";\nimport { isEncodedStruct, parseEncodedStruct } from \"../utils\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { AccountAbstraction } from \"./account/abstraction\";\n\n/**\n * A class to query all `Account` related queries on Aptos.\n * @group Account\n */\nexport class Account {\n  abstraction: AccountAbstraction;\n\n  /**\n   * Creates an instance of the Aptos client with the provided configuration.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Initialize the Aptos client with testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // specify your own network if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  constructor(readonly config: AptosConfig) {\n    this.abstraction = new AccountAbstraction(config);\n  }\n\n  /**\n   * Queries the current state for an Aptos account given its account address.\n   *\n   * @param args - The arguments for retrieving account information.\n   * @param args.accountAddress - The Aptos account address to query.\n   * @returns The account data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Retrieve account information for a specific address\n   *     const accountInfo = await aptos.getAccountInfo({ accountAddress: \"0x1\" }); // replace with a real account address\n   *     console.log(accountInfo);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountInfo(args: { accountAddress: AccountAddressInput }): Promise<AccountData> {\n    return getInfo({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for all modules in an account given an account address.\n   * This function may call the API multiple times to auto paginate through results.\n   *\n   * @param args.accountAddress - The Aptos account address to query modules for.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it retrieves the latest version.\n   *\n   * @returns - The account modules associated with the specified address.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account modules for a specific account\n   *   const accountModules = await aptos.getAccountModules({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // limiting to 10 modules\n   *     },\n   *   });\n   *\n   *   console.log(accountModules);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModules(args: {\n    accountAddress: AccountAddressInput;\n    options?: { limit?: number } & LedgerVersionArg;\n  }): Promise<MoveModuleBytecode[]> {\n    return getModules({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a page of modules in an account given an account address.\n   *\n   * @param args.accountAddress - The Aptos account address to query modules for.\n   * @param args.options.cursor - The cursor to start returning results from.  Note, this is obfuscated and is not an index.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it retrieves the latest version.\n   *\n   * @returns - The account modules associated with the specified address. Along with a cursor for future pagination. If the cursor is undefined, it means there are no more modules to fetch.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account modules for a specific account\n   *   const {modules, cursor} = await aptos.getAccountModulesPage({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       cursor: undefined, // starting from the first module\n   *       limit: 10, // limiting to 10 modules\n   *     },\n   *   });\n   *\n   *   console.log(modules);\n   *   console.log(`More to fetch: ${cursor !== undefined}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModulesPage(args: {\n    accountAddress: AccountAddressInput;\n    options?: CursorPaginationArgs & LedgerVersionArg;\n  }): Promise<{ modules: MoveModuleBytecode[]; cursor: string | undefined }> {\n    return getModulesPage({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a specific account module given an account address and module name.\n   *\n   * @param args.accountAddress - The Aptos account address.\n   * @param args.moduleName - The name of the module.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   *\n   * @returns The account module associated with the specified account address and module name.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the account module for a specific account address and module name\n   *   const module = await aptos.getAccountModule({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     moduleName: \"MyModule\" // specify the module name\n   *   });\n   *\n   *   console.log(module);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountModule(args: {\n    accountAddress: AccountAddressInput;\n    moduleName: string;\n    options?: LedgerVersionArg;\n  }): Promise<MoveModuleBytecode> {\n    return getModule({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries account transactions given an account address.\n   * This function may call the API multiple times to auto paginate and retrieve all account transactions.\n   *\n   * @param args.accountAddress - The Aptos account address to query transactions for.\n   * @param args.options - Optional pagination arguments.\n   * @param args.options.offset - The number of transactions to start returning results from.\n   * @param args.options.limit - The maximum number of results to return.\n   *\n   * @returns The account transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch transactions for a specific account\n   *   const transactions = await aptos.getAccountTransactions({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       offset: 0, // starting from the first transaction\n   *       limit: 10, // limiting to 10 transactions\n   *     },\n   *   });\n   *\n   *   console.log(transactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTransactions(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs;\n  }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all account resources given an account address.\n   * This function may call the API multiple times to auto paginate through results.\n   *\n   * @param args.accountAddress - The Aptos account address to query resources for.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Account resources.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account resources for a specific account address\n   *   const resources = await aptos.getAccountResources({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(resources);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResources(args: {\n    accountAddress: AccountAddressInput;\n    options?: PaginationArgs & LedgerVersionArg;\n  }): Promise<MoveResource[]> {\n    return getResources({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a page of account resources given an account address.\n   *\n   * @param args.accountAddress - The Aptos account address to query resources for.\n   * @param args.options.cursor - The cursor to start returning results from.  Note, this is obfuscated and is not an index.\n   * @param args.options.limit - The maximum number of results to return.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Account resources.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching account resources for a specific account address\n   *   const resources = await aptos.getAccountResourcesPage({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       cursor: undefined, // starting from the first resource\n   *       limit: 10, // limiting to 10 resources\n   *     },\n   *   });\n   *   console.log(resources);\n   *   console.log(`More to fetch: ${resources.cursor !== undefined}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResourcesPage(args: {\n    accountAddress: AccountAddressInput;\n    options?: CursorPaginationArgs & LedgerVersionArg;\n  }): Promise<{ resources: MoveResource[]; cursor: string | undefined }> {\n    return getResourcesPage({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a specific account resource given an account address and resource type.\n   *\n   * @template T - The typed output of the resource.\n   * @param args.accountAddress - The Aptos account address to query.\n   * @param args.resourceType - The string representation of an on-chain Move struct type, e.g., \"0x1::aptos_coin::AptosCoin\".\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns The account resource of the specified type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the account resource for a specific account address and resource type\n   *   const resource = await aptos.getAccountResource({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     resourceType: \"0x1::aptos_coin::AptosCoin\"\n   *   });\n   *\n   *   console.log(resource);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountResource<T extends {} = any>(args: {\n    accountAddress: AccountAddressInput;\n    resourceType: MoveStructId;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return getResource<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Looks up the account address for a given authentication key, handling both rotated and non-rotated keys.\n   *\n   * @param args.authenticationKey - The authentication key for which to look up the account address.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.ledgerVersion - The ledger version to query; if not provided, it will get the latest version.\n   * @returns Promise<AccountAddress> - The account address associated with the authentication key.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Look up the original account address for a given authentication key\n   *   const accountAddress = await aptos.lookupOriginalAccountAddress({\n   *     authenticationKey: \"0x1\", // replace with a real authentication key\n   *   });\n   *\n   *   console.log(\"Original Account Address:\", accountAddress);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async lookupOriginalAccountAddress(args: {\n    authenticationKey: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: LedgerVersionArg;\n  }): Promise<AccountAddress> {\n    return lookupOriginalAccountAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the current count of tokens owned by a specified account.\n   *\n   * @param args - The parameters for the query.\n   * @param args.accountAddress - The account address to query the token count for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The current count of tokens owned by the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the count of tokens owned by the account\n   *   const tokensCount = await aptos.getAccountTokensCount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(`Tokens Count: ${tokensCount}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTokensCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTokensCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the tokens currently owned by a specified account, including NFTs and fungible tokens.\n   * If desired, you can filter the results by a specific token standard.\n   *\n   * @param args.accountAddress The account address for which to retrieve owned tokens.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard Optional filter for the NFT standard to query for.\n   * @param args.options.offset Optional number to start returning results from.\n   * @param args.options.limit Optional number of results to return.\n   * @param args.options.orderBy Optional order to sort the tokens by.\n   * @returns An array of tokens with their respective data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the tokens owned by a specific account\n   *   const accountOwnedTokens = await aptos.getAccountOwnedTokens({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify how many tokens to return\n   *       orderBy: \"created_at\", // specify the order of the results\n   *     },\n   *   });\n   *\n   *   console.log(accountOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensQueryResponse[0]>;\n  }): Promise<GetAccountOwnedTokensQueryResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all current tokens of a specific collection that an account owns by the collection address.\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard parameter.\n   *\n   * @param args.accountAddress - The account address we want to get the tokens for.\n   * @param args.collectionAddress - The address of the collection being queried.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to, before querying.\n   * @param args.options.tokenStandard - The NFT standard to query for.\n   * @param args.options.offset - The number token to start returning results from.\n   * @param args.options.limit - The number of results to return.\n   * @param args.options.orderBy - The order to sort the tokens by.\n   * @returns Tokens array with the token data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get tokens owned by a specific account in a specific collection\n   *   const accountOwnedTokens = await aptos.getAccountOwnedTokensFromCollectionAddress({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     collectionAddress: \"0x2\", // replace with a real collection address\n   *   });\n   *\n   *   console.log(accountOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedTokensFromCollectionAddress(args: {\n    accountAddress: AccountAddressInput;\n    collectionAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountOwnedTokensFromCollectionResponse[0]>;\n  }): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountOwnedTokensFromCollectionAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for all collections that an account currently has tokens for, including NFTs, fungible tokens, and soulbound tokens.\n   * If you want to filter by a specific token standard, you can pass an optional tokenStandard parameter.\n   *\n   * @param args.accountAddress - The account address we want to get the collections for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - The NFT standard to query for.\n   * @param args.options.offset - The number of the collection to start returning results from.\n   * @param args.options.limit - The number of results to return.\n   * @param args.options.orderBy - The order to sort the tokens by.\n   * @returns Collections array with the collections data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get account collections with owned tokens for a specific account\n   *   const accountCollectionsWithOwnedTokens = await aptos.getAccountCollectionsWithOwnedTokens({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       tokenStandard: \"NFT\", // specify the token standard if needed\n   *       limit: 10, // specify the number of results to return\n   *     },\n   *   });\n   *\n   *   console.log(accountCollectionsWithOwnedTokens);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCollectionsWithOwnedTokens(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs & OrderByArg<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n  }): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getAccountCollectionsWithOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of transactions submitted by an account.\n   *\n   * @param args - The parameters for the query.\n   * @param args.accountAddress - The account address we want to get the total count for.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns Current count of transactions made by an account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the count of transactions for a specific account\n   *   const accountTransactionsCount = await aptos.getAccountTransactionsCount({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     minimumLedgerVersion: 1, // specify your own minimum ledger version if needed\n   *   });\n   *\n   *   console.log(accountTransactionsCount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountTransactionsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.ACCOUNT_TRANSACTION_PROCESSOR,\n    });\n    return getAccountTransactionsCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves the coins data for a specified account.\n   *\n   * @param args.accountAddress - The account address for which to retrieve the coin's data.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.offset - Optional. The number of coins to start returning results from.\n   * @param args.options.limit - Optional. The number of results to return.\n   * @param args.options.orderBy - Optional. The order to sort the coins by.\n   * @param args.options.where - Optional. Filter the results by specific criteria.\n   * @returns An array containing the coins data for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching coins data for a specific account\n   *   const accountCoinsData = await aptos.getAccountCoinsData({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify the number of results to return\n   *       orderBy: { asset_type: \"asc\" }, // specify the order of results\n   *     },\n   *   });\n   *\n   *   console.log(accountCoinsData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinsData(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs &\n      OrderByArg<GetAccountCoinsDataResponse[0]> &\n      WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetAccountCoinsDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsData({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves the current count of an account's coins aggregated across all types.\n   *\n   * @param args The parameters for the account coins count query.\n   * @param args.accountAddress The account address we want to get the total count for.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @returns The current count of the aggregated coins for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the account coins count for a specific account\n   *   const accountCoinsCount = await aptos.getAccountCoinsCount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(\"Account Coins Count:\", accountCoinsCount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinsCount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getAccountCoinsCount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current amount of APT for a specified account. If the account does not exist, it will return 0.\n   *\n   * @param args The arguments for the account query.\n   * @param args.accountAddress The account address for which to retrieve the APT amount.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @returns The current amount of APT for the specified account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the APT amount for a specific account\n   *   const accountAPTAmount = await aptos.getAccountAPTAmount({ accountAddress: \"0x1\" }); // replace with a real account address\n   *   console.log(\"Account APT Amount:\", accountAPTAmount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountAPTAmount(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    return this.getAccountCoinAmount({ coinType: APTOS_COIN, faMetadataAddress: APTOS_FA, ...args });\n  }\n\n  /**\n   * Queries the current amount of a specified coin held by an account.\n   *\n   * @param args The parameters for querying the account's coin amount.\n   * @param args.accountAddress The account address to query for the coin amount.\n   * @param args.coinType The coin type to query. Note: If not provided, it may be automatically populated if `faMetadataAddress`\n   * is specified.\n   * @param args.faMetadataAddress The fungible asset metadata address to query. Note: If not provided, it may be automatically\n   * populated if `coinType` is specified.\n   * @param args.minimumLedgerVersion Not used anymore, here for backward compatibility\n   * see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, will be removed in the near future.\n   * Optional ledger version to sync up to before querying.\n   * @returns The current amount of the specified coin held by the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Query the account's coin amount for a specific coin type\n   *   const accountCoinAmount = await aptos.getAccountCoinAmount({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     coinType: \"0x1::aptos_coin::AptosCoin\" // specify the coin type\n   *   });\n   *\n   *   console.log(`Account coin amount: ${accountCoinAmount}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountCoinAmount(args: {\n    accountAddress: AccountAddressInput;\n    coinType?: MoveStructId;\n    faMetadataAddress?: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    const { accountAddress, coinType, faMetadataAddress, minimumLedgerVersion } = args;\n\n    if (minimumLedgerVersion) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `minimumLedgerVersion is not used anymore, here for backward \n        compatibility see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, \n        will be removed in the near future`,\n      );\n    }\n    // Attempt to populate the CoinType field if the FA address is provided.\n    // We cannot do this internally due to dependency cycles issue.\n    let coinAssetType: MoveStructId | undefined = coinType;\n    if (coinType === undefined && faMetadataAddress !== undefined) {\n      coinAssetType = await memoizeAsync(\n        async () => {\n          try {\n            const pairedCoinTypeStruct = (\n              await view({\n                aptosConfig: this.config,\n                payload: { function: \"0x1::coin::paired_coin\", functionArguments: [faMetadataAddress] },\n              })\n            ).at(0) as { vec: MoveValue[] };\n\n            // Check if the Option has a value, and if so, parse the struct\n            if (pairedCoinTypeStruct.vec.length > 0 && isEncodedStruct(pairedCoinTypeStruct.vec[0])) {\n              return parseEncodedStruct(pairedCoinTypeStruct.vec[0]) as MoveStructId;\n            }\n          } catch (error) {\n            /* No paired coin type found */\n          }\n          return undefined;\n        },\n        `coin-mapping-${faMetadataAddress.toString()}`,\n        1000 * 60 * 5, // 5 minutes\n      )();\n    }\n\n    let faAddress: string;\n\n    if (coinType !== undefined && faMetadataAddress !== undefined) {\n      faAddress = AccountAddress.from(faMetadataAddress).toStringLong();\n    } else if (coinType !== undefined && faMetadataAddress === undefined) {\n      // TODO Move to a separate function as defined in the AIP for coin migration\n      if (coinType === APTOS_COIN) {\n        faAddress = AccountAddress.A.toStringLong();\n      } else {\n        faAddress = createObjectAddress(AccountAddress.A, coinType).toStringLong();\n      }\n    } else if (coinType === undefined && faMetadataAddress !== undefined) {\n      const addr = AccountAddress.from(faMetadataAddress);\n      faAddress = addr.toStringLong();\n      if (addr === AccountAddress.A) {\n        coinAssetType = APTOS_COIN;\n      }\n      // The paired CoinType should be populated outside of this function in another\n      // async call. We cannot do this internally due to dependency cycles issue.\n    } else {\n      throw new Error(\"Either coinType, faMetadataAddress, or both must be provided\");\n    }\n\n    // When there is a coin mapping, use that first, otherwise use the fungible asset address\n    // TODO: This function's signature at the top, returns number, but it could be greater than can be represented\n    if (coinAssetType !== undefined) {\n      const [balanceStr] = await view<[string]>({\n        aptosConfig: this.config,\n        payload: {\n          function: \"0x1::coin::balance\",\n          typeArguments: [coinAssetType],\n          functionArguments: [accountAddress],\n        },\n      });\n      return parseInt(balanceStr, 10);\n    }\n    const [balanceStr] = await view<[string]>({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::primary_fungible_store::balance\",\n        typeArguments: [\"0x1::object::ObjectCore\"],\n        functionArguments: [accountAddress, faAddress],\n      },\n    });\n    return parseInt(balanceStr, 10);\n  }\n\n  /**\n   * Queries an account's owned objects.\n   *\n   * @param args.accountAddress The account address we want to get the objects for.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options.offset The starting position to start returning results from.\n   * @param args.options.limit The number of results to return.\n   * @param args.options.orderBy The order to sort the objects by.\n   * @returns Objects array with the object data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the objects owned by the specified account\n   *   const accountOwnedObjects = await aptos.getAccountOwnedObjects({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *     options: {\n   *       offset: 0, // optional, specify if needed\n   *       limit: 10, // optional, specify if needed\n   *       orderBy: \"created_at\", // optional, specify if needed\n   *     },\n   *   });\n   *\n   *   console.log(accountOwnedObjects);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   */\n  async getAccountOwnedObjects(args: {\n    accountAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n  }): Promise<GetObjectDataQueryResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.DEFAULT,\n    });\n    return getAccountOwnedObjects({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Derives an account by providing a private key. This function resolves the provided private key type and derives the public\n   * key from it.\n   *\n   * If the privateKey is a Secp256k1 type, it derives the account using the derived public key and auth key using the SingleKey\n   * scheme locally.\n   * If the privateKey is an ED25519 type, it looks up the authentication key on chain to determine whether it is a Legacy ED25519\n   * key or a Unified ED25519 key, and then derives the account based on that.\n   *\n   * @param args - The arguments for deriving the account.\n   * @param args.privateKey - An account private key.\n   * @returns The derived Account type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Ed25519PrivateKey } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Deriving an account from a private key\n   *     const account = await aptos.deriveAccountFromPrivateKey({\n   *         privateKey: new Ed25519PrivateKey(\"0x123\") // replace with a real private key\n   *     });\n   *\n   *     console.log(account);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Account\n   * @deprecated Note that more inspection is needed by the user to determine which account exists on-chain\n   */\n  async deriveAccountFromPrivateKey(args: { privateKey: PrivateKey }): Promise<AccountModule> {\n    return deriveAccountFromPrivateKey({ aptosConfig: this.config, ...args });\n  }\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddressInput } from \"../core\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { APTOS_COIN } from \"../utils/const\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { TypeTagAddress, TypeTagU64 } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\nconst coinTransferAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [] }],\n  parameters: [new TypeTagAddress(), new TypeTagU64()],\n};\n\n/**\n * Generates a transaction to transfer coins from one account to another.\n * This function allows you to specify the sender, recipient, amount, and coin type for the transaction.\n *\n * @param args - The parameters for the transaction.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.sender - The address of the account sending the coins.\n * @param args.recipient - The address of the account receiving the coins.\n * @param args.amount - The amount of coins to transfer.\n * @param args.coinType - (Optional) The type of coin to transfer, defaults to Aptos Coin if not specified.\n * @param args.options - (Optional) Options for generating the transaction.\n * @group Implementation\n */\nexport async function transferCoinTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: AccountAddressInput;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  coinType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, recipient, amount, coinType, options } = args;\n  const coinStructType = coinType ?? APTOS_COIN;\n  return generateTransaction({\n    aptosConfig,\n    sender,\n    data: {\n      function: \"0x1::aptos_account::transfer_coins\",\n      typeArguments: [coinStructType],\n      functionArguments: [recipient, amount],\n      abi: coinTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddressInput } from \"../core\";\nimport { transferCoinTransaction } from \"../internal/coin\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, MoveStructId } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to handle all `Coin` operations.\n * @group Coin\n */\nexport class Coin {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Coin\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Generate a transfer coin transaction that can be simulated, signed, and submitted.\n   * This function helps you create a transaction to transfer a specified amount of coins\n   * from one account to another within the Aptos network.\n   *\n   * @param args The arguments for the transfer transaction.\n   * @param args.sender The sender account address.\n   * @param args.recipient The recipient account address.\n   * @param args.amount The amount of coins to transfer.\n   * @param args.coinType Optional. The coin struct type to transfer. Defaults to 0x1::aptos_coin::AptosCoin.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Generate a transfer coin transaction\n   *   const transaction = await aptos.transferCoinTransaction({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     recipient: \"0x2\", // replace with a real recipient account address\n   *     amount: 10,\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Coin\n   */\n  async transferCoinTransaction(args: {\n    sender: AccountAddressInput;\n    recipient: AccountAddressInput;\n    amount: AnyNumber;\n    coinType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferCoinTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/digitalAsset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * digitalAsset namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Bool, MoveString, MoveVector, U64 } from \"../bcs\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport { EntryFunctionABI, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveAbility,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n  WhereArg,\n} from \"../types\";\nimport {\n  GetCollectionDataQuery,\n  GetCurrentTokenOwnershipQuery,\n  GetTokenActivityQuery,\n  GetTokenDataQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetCollectionData,\n  GetCurrentTokenOwnership,\n  GetTokenActivity,\n  GetTokenData,\n} from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport {\n  CurrentCollectionsV2BoolExp,\n  CurrentTokenOwnershipsV2BoolExp,\n  TokenActivitiesV2BoolExp,\n} from \"../types/generated/types\";\nimport {\n  checkOrConvertArgument,\n  objectStructTag,\n  parseTypeTag,\n  stringStructTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagStruct,\n  TypeTagU64,\n  TypeTagVector,\n} from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n// A property type map for the user input and what Move expects\nconst PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  STRING: \"0x1::string::String\",\n  ARRAY: \"vector<u8>\",\n};\n\n/**\n * The keys of the PropertyTypeMap, representing different property types.\n * @group Implementation\n */\nexport type PropertyType = keyof typeof PropertyTypeMap;\n\n/**\n * Accepted property value types for user input, including boolean, number, bigint, string, AccountAddress, and Uint8Array.\n * To pass in an Array, use Uint8Array type\n * for example `new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]).bcsToBytes()`\n * @group Implementation\n */\nexport type PropertyValue = boolean | number | bigint | string | AccountAddress | Uint8Array;\n\n// The default digital asset type to use if non provided\nconst defaultDigitalAssetType = \"0x4::token::Token\";\n\n// FETCH QUERIES\n\n/**\n * Retrieves data for a specific digital asset using its address.\n *\n * @param args - The arguments for fetching digital asset data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to retrieve data for.\n * @returns The data of the specified digital asset.\n * @group Implementation\n */\nexport async function getDigitalAssetData(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetTokenDataResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: { token_data_id: { _eq: string } } = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetData\",\n  });\n\n  return data.current_token_datas_v2[0];\n}\n\n/**\n * Retrieves the current ownership details of a specified digital asset.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to query ownership for.\n * @returns The current ownership details of the specified digital asset.\n * @group Implementation\n */\nexport async function getCurrentDigitalAssetOwnership(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetCurrentTokenOwnershipResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentDigitalAssetOwnership\",\n  });\n\n  return data.current_token_ownerships_v2[0];\n}\n\n/**\n * Retrieves the digital assets owned by a specified account address.\n *\n * @param args - The arguments for retrieving owned digital assets.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param args.ownerAddress - The address of the account whose owned digital assets are being queried.\n * @param args.options - Optional pagination and ordering parameters for the query.\n * @param args.options.offset - The number of records to skip for pagination.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria for ordering the results.\n *\n * @returns An array of digital assets currently owned by the specified account.\n * @group Implementation\n */\nexport async function getOwnedDigitalAssets(args: {\n  aptosConfig: AptosConfig;\n  ownerAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetOwnedTokensResponse> {\n  const { aptosConfig, ownerAddress, options } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    owner_address: { _eq: AccountAddress.from(ownerAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getOwnedDigitalAssets\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\n/**\n * Retrieves the activity associated with a specific digital asset.\n * This function allows you to track the token activities for a given digital asset address.\n *\n * @param args - The arguments for retrieving digital asset activity.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.digitalAssetAddress - The address of the digital asset to query.\n * @param args.options - Optional parameters for pagination and ordering.\n * @param args.options.offset - The number of records to skip before starting to collect the result set.\n * @param args.options.limit - The maximum number of records to return.\n * @param args.options.orderBy - The criteria to order the results by.\n * @returns A promise that resolves to an array of token activities for the specified digital asset.\n * @group Implementation\n */\nexport async function getDigitalAssetActivity(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetTokenActivityResponse> {\n  const { aptosConfig, digitalAssetAddress, options } = args;\n\n  const whereCondition: TokenActivitiesV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenActivity,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenActivityQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetActivity\",\n  });\n\n  return data.token_activities_v2;\n}\n\n/**\n * Options for creating a collection, allowing customization of various attributes such as supply limits, mutability of metadata,\n * and royalty settings.\n *\n * @param maxSupply - Maximum number of tokens that can be minted in the collection.\n * @param mutableDescription - Indicates if the collection description can be changed after creation.\n * @param mutableRoyalty - Indicates if the royalty settings can be modified after creation.\n * @param mutableURI - Indicates if the collection URI can be updated.\n * @param mutableTokenDescription - Indicates if individual token descriptions can be modified.\n * @param mutableTokenName - Indicates if individual token names can be changed.\n * @param mutableTokenProperties - Indicates if individual token properties can be altered.\n * @param mutableTokenURI - Indicates if individual token URIs can be updated.\n * @param tokensBurnableByCreator - Indicates if the creator can burn tokens from the collection.\n * @param tokensFreezableByCreator - Indicates if the creator can freeze tokens in the collection.\n * @param royaltyNumerator - The numerator for calculating royalties.\n * @param royaltyDenominator - The denominator for calculating royalties.\n * @group Implementation\n */\nexport interface CreateCollectionOptions {\n  maxSupply?: AnyNumber;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n}\n\nconst createCollectionAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagU64(),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagBool(),\n    new TypeTagU64(),\n    new TypeTagU64(),\n  ],\n};\n\n/**\n * Creates a new collection transaction on the Aptos blockchain.\n * This function allows you to define the properties of the collection, including its name, description, and URI.\n *\n * @param args - The parameters for creating the collection transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that will create the collection.\n * @param args.description - A description of the collection.\n * @param args.name - The name of the collection.\n * @param args.uri - The URI associated with the collection.\n * @param args.options - Optional parameters for generating the transaction.\n * @param args.maxSupply - The maximum supply of tokens in the collection (optional).\n * @param args.mutableDescription - Indicates if the collection description can be changed (optional, defaults to true).\n * @param args.mutableRoyalty - Indicates if the royalty settings can be changed (optional, defaults to true).\n * @param args.mutableURI - Indicates if the URI can be changed (optional, defaults to true).\n * @param args.mutableTokenDescription - Indicates if the token description can be changed (optional, defaults to true).\n * @param args.mutableTokenName - Indicates if the token name can be changed (optional, defaults to true).\n * @param args.mutableTokenProperties - Indicates if the token properties can be changed (optional, defaults to true).\n * @param args.mutableTokenURI - Indicates if the token URI can be changed (optional, defaults to true).\n * @param args.tokensBurnableByCreator - Indicates if tokens can be burned by the creator (optional, defaults to true).\n * @param args.tokensFreezableByCreator - Indicates if tokens can be frozen by the creator (optional, defaults to true).\n * @param args.royaltyNumerator - The numerator for calculating royalties (optional, defaults to 0).\n * @param args.royaltyDenominator - The denominator for calculating royalties (optional, defaults to 1).\n * @group Implementation\n */\nexport async function createCollectionTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n    creator: Account;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  } & CreateCollectionOptions,\n): Promise<SimpleTransaction> {\n  const { aptosConfig, options, creator } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [\n        // Do not change the order\n        new MoveString(args.description),\n        new U64(args.maxSupply ?? MAX_U64_BIG_INT),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        new Bool(args.mutableDescription ?? true),\n        new Bool(args.mutableRoyalty ?? true),\n        new Bool(args.mutableURI ?? true),\n        new Bool(args.mutableTokenDescription ?? true),\n        new Bool(args.mutableTokenName ?? true),\n        new Bool(args.mutableTokenProperties ?? true),\n        new Bool(args.mutableTokenURI ?? true),\n        new Bool(args.tokensBurnableByCreator ?? true),\n        new Bool(args.tokensFreezableByCreator ?? true),\n        new U64(args.royaltyNumerator ?? 0),\n        new U64(args.royaltyDenominator ?? 1),\n      ],\n      abi: createCollectionAbi,\n    },\n    options,\n  });\n}\n\n/**\n * Retrieves data for the current collections based on specified options.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for filtering and pagination.\n * @param args.options.tokenStandard - The token standard to filter the collections (default is \"v2\").\n * @param args.options.offset - The offset for pagination.\n * @param args.options.limit - The limit for pagination.\n * @param args.options.where - The conditions to filter the collections.\n * @returns The data of the current collections.\n * @group Implementation\n */\nexport async function getCollectionData(args: {\n  aptosConfig: AptosConfig;\n  options?: TokenStandardArg & PaginationArgs & WhereArg<CurrentCollectionsV2BoolExp>;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, options } = args;\n\n  const whereCondition: any = options?.where;\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\n/**\n * Retrieves collection data based on the creator's address and the collection name.\n *\n * @param args - The arguments for retrieving the collection data.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.creatorAddress - The address of the creator whose collection data is being retrieved.\n * @param args.collectionName - The name of the collection to fetch data for.\n * @param args.options - Optional parameters for filtering the results, including token standard and pagination options.\n * @param args.options.tokenStandard - The token standard to filter the results by (optional).\n * @param args.options.pagination - Pagination options for the results (optional).\n * @group Implementation\n */\nexport async function getCollectionDataByCreatorAddressAndCollectionName(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, collectionName, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves collection data associated with a specific creator's address.\n * This function allows you to filter the collections based on the creator's address and optional token standards.\n *\n * @param args - The arguments for retrieving collection data.\n * @param args.aptosConfig - The configuration for the Aptos network.\n * @param args.creatorAddress - The address of the creator whose collection data is being retrieved.\n * @param args.options - Optional parameters for filtering the results.\n * @param args.options.tokenStandard - The token standard to filter the collections by.\n * @param args.options.pagination - Pagination options for the results.\n * @group Implementation\n */\nexport async function getCollectionDataByCreatorAddress(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves data for a specific collection using its unique identifier.\n * This function allows you to filter the collection data based on the token standard and pagination options.\n *\n * @param args - The arguments for retrieving collection data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.collectionId - The unique identifier for the collection.\n * @param args.options - Optional parameters for filtering by token standard and pagination.\n * @param args.options.tokenStandard - The standard of the token to filter the collection data.\n * @param args.options.page - The page number for pagination.\n * @param args.options.limit - The number of items per page for pagination.\n * @group Implementation\n */\nexport async function getCollectionDataByCollectionId(args: {\n  aptosConfig: AptosConfig;\n  collectionId: AccountAddressInput;\n  options?: TokenStandardArg & PaginationArgs;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, collectionId, options } = args;\n  const address = AccountAddress.from(collectionId);\n\n  const whereCondition: any = {\n    collection_id: { _eq: address.toStringLong() },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return getCollectionData({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves the collection ID based on the creator's address and the collection name.\n * This function helps in identifying a specific collection within the Aptos ecosystem.\n *\n * @param args - The parameters for retrieving the collection ID.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creatorAddress - The address of the creator of the collection.\n * @param args.collectionName - The name of the collection to look up.\n * @param args.options - Optional parameters for additional filtering.\n * @param args.options.tokenStandard - The token standard to filter the collection (default is \"v2\").\n * @returns The ID of the specified collection.\n * @group Implementation\n */\nexport async function getCollectionId(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<string> {\n  const { creatorAddress, collectionName, options, aptosConfig } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  return (await getCollectionData({ aptosConfig, options: { where: whereCondition } })).collection_id;\n}\n\n// TRANSACTIONS\n\nconst mintDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n  ],\n};\n\n/**\n * Creates a transaction to mint a digital asset on the Aptos blockchain.\n * This function allows you to specify various attributes of the asset, including its collection, description, name, and URI.\n *\n * @param args - The arguments for minting the digital asset.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that will create the digital asset.\n * @param args.collection - The name of the collection to which the asset belongs.\n * @param args.description - A brief description of the digital asset.\n * @param args.name - The name of the digital asset.\n * @param args.uri - The URI pointing to the asset's metadata.\n * @param [args.propertyKeys] - Optional array of property keys associated with the asset.\n * @param [args.propertyTypes] - Optional array of property types corresponding to the asset's properties.\n * @param [args.propertyValues] - Optional array of property values for the asset's properties.\n * @param [args.options] - Optional transaction generation options.\n * @group Implementation\n */\nexport async function mintDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    options,\n    creator,\n    collection,\n    description,\n    name,\n    uri,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n  } = args;\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [\n        new MoveString(collection),\n        new MoveString(description),\n        new MoveString(name),\n        new MoveString(uri),\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n\n        /**\n         * Retrieves the raw values of specified properties from an array of property values based on their types.\n         *\n         * @param propertyValues - An array of property values from which to extract the raw data.\n         * @param propertyTypes - An array of strings representing the types of properties to retrieve.\n         * @returns An array of Uint8Array containing the raw values for the specified property types.\n         * @group Implementation\n         */\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n      ],\n      abi: mintDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst transferDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagAddress()],\n};\n\n/**\n * Initiates a transaction to transfer a digital asset from one account to another.\n * This function helps in executing the transfer of digital assets securely and efficiently.\n *\n * @param args - The arguments required to perform the transfer.\n * @param args.aptosConfig - Configuration settings for the Aptos client.\n * @param args.sender - The account initiating the transfer.\n * @param args.digitalAssetAddress - The address of the digital asset being transferred.\n * @param args.recipient - The address of the account receiving the digital asset.\n * @param args.digitalAssetType - (Optional) The type of the digital asset being transferred.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function transferDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  digitalAssetAddress: AccountAddressInput;\n  recipient: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, digitalAssetAddress, recipient, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::object::transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), AccountAddress.from(recipient)],\n      abi: transferDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst mintSoulBoundAbi: EntryFunctionABI = {\n  typeParameters: [],\n  parameters: [\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(new TypeTagStruct(stringStructTag())),\n    new TypeTagVector(TypeTagVector.u8()),\n    new TypeTagAddress(),\n  ],\n};\n\n/**\n * Creates a transaction to mint a soul-bound token.\n * This function allows you to specify the token's attributes and recipient, facilitating the creation of unique digital assets.\n *\n * @param args - The parameters required to mint the soul-bound token.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.account - The account initiating the minting transaction.\n * @param args.collection - The name of the collection to which the token belongs.\n * @param args.description - A description of the token being minted.\n * @param args.name - The name of the token.\n * @param args.uri - The URI pointing to the token's metadata.\n * @param args.recipient - The address of the account that will receive the minted token.\n * @param [args.propertyKeys] - Optional array of property keys associated with the token.\n * @param [args.propertyTypes] - Optional array of property types corresponding to the property keys.\n * @param [args.propertyValues] - Optional array of property values that match the property keys and types.\n * @param [args.options] - Optional transaction generation options.\n * @throws Error if the counts of property keys, property types, and property values do not match.\n * @group Implementation\n */\nexport async function mintSoulBoundTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  recipient: AccountAddressInput;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    account,\n    collection,\n    description,\n    name,\n    uri,\n    recipient,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n    options,\n  } = args;\n  if (propertyKeys?.length !== propertyValues?.length) {\n    throw new Error(\"Property keys and property values counts do not match\");\n  }\n  if (propertyTypes?.length !== propertyValues?.length) {\n    throw new Error(\"Property types and property values counts do not match\");\n  }\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  return generateTransaction({\n    aptosConfig,\n    sender: account.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint_soul_bound\",\n      functionArguments: [\n        collection,\n        description,\n        name,\n        uri,\n        MoveVector.MoveString(propertyKeys ?? []),\n        MoveVector.MoveString(convertedPropertyType ?? []),\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n        recipient,\n      ],\n      abi: mintSoulBoundAbi,\n    },\n    options,\n  });\n}\n\nconst burnDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Creates a transaction to burn a specified digital asset.\n * This function allows users to permanently remove a digital asset from their account.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is initiating the burn transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be burned.\n * @param args.digitalAssetType - Optional; the type of the digital asset being burned.\n * @param args.options - Optional; additional options for generating the transaction.\n * @group Implementation\n */\nexport async function burnDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::burn\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress)],\n      abi: burnDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst freezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Creates a transaction to freeze the transfer of a digital asset.\n * This function helps you prevent the transfer of a specified digital asset by generating the appropriate transaction.\n *\n * @param args - The parameters for the transaction.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.creator - The account that is creating the transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be frozen.\n * @param args.digitalAssetType - (Optional) The type of the digital asset as a Move struct ID.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function freezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::freeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: freezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst unfreezeDigitalAssetAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0)))],\n};\n\n/**\n * Unfreezes a digital asset transfer transaction, allowing the transfer of the specified digital asset.\n *\n * @param args - The arguments for unfreezing the digital asset transfer transaction.\n * @param args.aptosConfig - The Aptos configuration settings.\n * @param args.creator - The account that is initiating the unfreeze transaction.\n * @param args.digitalAssetAddress - The address of the digital asset to be unfrozen.\n * @param args.digitalAssetType - (Optional) The type of the digital asset being unfrozen.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function unfreezeDigitalAssetTransferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::unfreeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n      abi: unfreezeDigitalAssetAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetDescriptionAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the description for a digital asset, allowing users to provide additional context or information about the asset.\n *\n * @param args - The arguments for setting the digital asset description.\n * @param args.aptosConfig - The Aptos configuration to use for the transaction.\n * @param args.creator - The account that is creating the transaction.\n * @param args.description - The new description for the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset whose description is being set.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetDescriptionTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  description: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, description, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_description\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(description)],\n      abi: setDigitalAssetDescriptionAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetNameAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the name of a digital asset on the Aptos blockchain.\n * This function allows you to update the name of a specified digital asset, enabling better identification and categorization.\n *\n * @param args - The parameters for setting the digital asset name.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is creating the transaction.\n * @param args.name - The new name to assign to the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset to update.\n * @param args.digitalAssetType - (Optional) The type of the digital asset, represented as a Move struct ID.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetNameTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  name: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, name, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_name\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(name)],\n      abi: setDigitalAssetNameAbi,\n    },\n    options,\n  });\n}\n\nconst setDigitalAssetURIAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Sets the URI for a digital asset, allowing you to update the metadata associated with it.\n *\n * @param args - The arguments for setting the digital asset URI.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.uri - The new URI to be set for the digital asset.\n * @param args.digitalAssetAddress - The address of the digital asset whose URI is being set.\n * @param args.digitalAssetType - The optional type of the digital asset; defaults to a predefined type if not provided.\n * @param args.options - Optional settings for generating the transaction.\n * @group Implementation\n */\nexport async function setDigitalAssetURITransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  uri: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, uri, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_uri\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(uri)],\n      abi: setDigitalAssetURIAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Creates a transaction to add a property to a digital asset.\n * This function helps in enhancing the metadata associated with a digital asset by allowing the addition of custom properties.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key for the property being added.\n * @param args.propertyType - The type of the property being added.\n * @param args.propertyValue - The value of the property being added.\n * @param args.digitalAssetAddress - The address of the digital asset to which the property is being added.\n * @param args.digitalAssetType - The optional type of the digital asset.\n * @param args.options - Optional transaction generation options.\n * @group Implementation\n */\nexport async function addDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n        MoveVector.U8(getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])),\n      ],\n      abi: addDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst removeDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))), new TypeTagStruct(stringStructTag())],\n};\n\n/**\n * Removes a property from a digital asset on the Aptos blockchain.\n * This function helps in managing the attributes of digital assets by allowing the removal of specific properties.\n *\n * @param args - The arguments for the transaction.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be removed.\n * @param args.digitalAssetAddress - The address of the digital asset from which the property will be removed.\n * @param args.digitalAssetType - The type of the digital asset (optional).\n * @param args.options - Additional options for generating the transaction (optional).\n * @group Implementation\n */\nexport async function removeDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, propertyKey, digitalAssetAddress, digitalAssetType, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::remove_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey)],\n      abi: removeDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagStruct(stringStructTag()),\n    TypeTagVector.u8(),\n  ],\n};\n\n/**\n * Updates a property of a digital asset by generating a transaction for the Aptos blockchain.\n * This function allows you to modify attributes of a digital asset, facilitating dynamic changes to its properties.\n *\n * @param args - The arguments for updating the digital asset property.\n * @param args.aptosConfig - The configuration settings for the Aptos blockchain.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be updated.\n * @param args.propertyType - The type of the property being updated.\n * @param args.propertyValue - The new value for the property.\n * @param args.digitalAssetAddress - The address of the digital asset to update.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function updateDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        AccountAddress.from(digitalAssetAddress),\n        new MoveString(propertyKey),\n        new MoveString(PropertyTypeMap[propertyType]),\n\n        /**\n         * Retrieves the raw byte representation of a single property value based on its type.\n         *\n         * @param propertyValue - The value of the property to convert.\n         * @param propertyType - The type of the property, which determines how the value is processed.\n         * @returns The raw byte representation of the property value.\n         * @group Implementation\n         */\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n      abi: updateDigitalAssetPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst addDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\n/**\n * Creates a transaction to add a typed property to a digital asset.\n * This function helps in customizing digital assets by associating them with specific properties.\n *\n * @param args - The arguments required to create the transaction.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key for the property being added.\n * @param args.propertyType - The type of the property being added.\n * @param args.propertyValue - The value of the property being added.\n * @param args.digitalAssetAddress - The address of the digital asset to which the property is being added.\n * @param args.digitalAssetType - (Optional) The type of the digital asset.\n * @param args.options - (Optional) Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function addDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: addDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nconst updateDigitalAssetTypedPropertyAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [MoveAbility.KEY] }, { constraints: [] }],\n  parameters: [\n    new TypeTagStruct(objectStructTag(new TypeTagGeneric(0))),\n    new TypeTagStruct(stringStructTag()),\n    new TypeTagGeneric(1),\n  ],\n};\n\n/**\n * Updates the typed property of a digital asset by generating a transaction for the Aptos blockchain.\n *\n * @param args - The arguments for updating the digital asset typed property.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.creator - The account that is creating the transaction.\n * @param args.propertyKey - The key of the property to be updated.\n * @param args.propertyType - The type of the property being updated.\n * @param args.propertyValue - The new value for the property.\n * @param args.digitalAssetAddress - The address of the digital asset to be updated.\n * @param args.digitalAssetType - Optional. The type of the digital asset, if not provided, defaults to the standard type.\n * @param args.options - Optional. Additional options for generating the transaction.\n * @group Implementation\n */\nexport async function updateDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [AccountAddress.from(digitalAssetAddress), new MoveString(propertyKey), propertyValue],\n      abi: updateDigitalAssetTypedPropertyAbi,\n    },\n    options,\n  });\n}\n\nfunction getPropertyValueRaw(propertyValues: Array<PropertyValue>, propertyTypes: Array<string>): Array<Uint8Array> {\n  const results = new Array<Uint8Array>();\n  propertyTypes.forEach((typ, index) => {\n    results.push(getSinglePropertyValueRaw(propertyValues[index], typ));\n  });\n\n  return results;\n}\n\nfunction getSinglePropertyValueRaw(propertyValue: PropertyValue, propertyType: string): Uint8Array {\n  const typeTag = parseTypeTag(propertyType);\n  const res = checkOrConvertArgument(propertyValue, typeTag, 0, []);\n  return res.bcsToBytes();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n} from \"../types\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport {\n  addDigitalAssetPropertyTransaction,\n  addDigitalAssetTypedPropertyTransaction,\n  burnDigitalAssetTransaction,\n  CreateCollectionOptions,\n  createCollectionTransaction,\n  freezeDigitalAssetTransferTransaction,\n  getCollectionData,\n  getCollectionDataByCollectionId,\n  getCollectionDataByCreatorAddress,\n  getCollectionDataByCreatorAddressAndCollectionName,\n  getCollectionId,\n  getCurrentDigitalAssetOwnership,\n  getDigitalAssetActivity,\n  getDigitalAssetData,\n  getOwnedDigitalAssets,\n  mintDigitalAssetTransaction,\n  mintSoulBoundTransaction,\n  PropertyType,\n  PropertyValue,\n  removeDigitalAssetPropertyTransaction,\n  setDigitalAssetDescriptionTransaction,\n  setDigitalAssetNameTransaction,\n  setDigitalAssetURITransaction,\n  transferDigitalAssetTransaction,\n  unfreezeDigitalAssetTransferTransaction,\n  updateDigitalAssetPropertyTransaction,\n  updateDigitalAssetTypedPropertyTransaction,\n} from \"../internal/digitalAsset\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class to query all `DigitalAsset` related queries on Aptos.\n * @group DigitalAsset\n */\nexport class DigitalAsset {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   * This function is deprecated; use `getCollectionDataByCreatorAddressAndCollectionName` instead.\n   *\n   * If a creator account has two collections with the same name in v1 and v2, you can pass an optional `tokenStandard` parameter\n   * to query a specific standard.\n   *\n   * @param args - The arguments for querying the collection data.\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional parameters for the query.\n   * @param args.options.tokenStandard - The token standard to query.\n   * @returns GetCollectionDataResponse - The response type containing the collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Querying collection data by creator address and collection name\n   *   const collection = await aptos.getCollectionData({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\", // specify your collection name\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionData(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    const { creatorAddress, collectionName, options } = args;\n    const address = AccountAddress.from(creatorAddress);\n\n    const whereCondition: any = {\n      collection_name: { _eq: collectionName },\n      creator_address: { _eq: address.toStringLong() },\n    };\n    if (options?.tokenStandard) {\n      whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n    }\n\n    return getCollectionData({ aptosConfig: this.config, options: { where: whereCondition } });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   * If a creator account has multiple collections with the same name across different versions,\n   * specify the `tokenStandard` parameter to query a specific standard.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - Optional token standard to query.\n   * @returns GetCollectionDataResponse - The response type containing collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching collection data by creator address and collection name\n   *   const collection = await aptos.getCollectionDataByCreatorAddressAndCollectionName({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\",\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *     options: { tokenStandard: \"v2\" } // optional, specify if needed\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCreatorAddressAndCollectionName(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    return getCollectionDataByCreatorAddressAndCollectionName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves data for a specific collection created by a given creator address.\n   * This function allows you to query collection data while optionally specifying a minimum ledger version and pagination options.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - Optional token standard to query.\n   * @param args.options.pagination - Optional pagination arguments.\n   * @returns GetCollectionDataResponse - The response type containing collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve collection data by creator address\n   *   const collectionData = await aptos.getCollectionDataByCreatorAddress({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     minimumLedgerVersion: 1, // specify the minimum ledger version if needed\n   *     options: {\n   *       tokenStandard: \"v2\", // specify the token standard if needed\n   *       pagination: { limit: 10, offset: 0 } // specify pagination options if needed\n   *     }\n   *   });\n   *\n   *   console.log(collectionData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCreatorAddress(args: {\n    creatorAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n\n    return getCollectionDataByCreatorAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection ID.\n   *\n   * @param args.collectionId - The ID of the collection, which is the same as the address of the collection object.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional parameters for token standard and pagination.\n   * @returns GetCollectionDataResponse - The response type containing the collection data.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching collection data by collection ID\n   *   const collection = await aptos.getCollectionDataByCollectionId({\n   *     collectionId: \"0x123\", // replace with a real collection ID\n   *   });\n   *\n   *   console.log(collection);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionDataByCollectionId(args: {\n    collectionId: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg & PaginationArgs;\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionDataByCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the ID of a specified collection.\n   * This ID corresponds to the collection's object address in V2, while V1 does not utilize objects and lacks an address.\n   *\n   * @param args.creatorAddress - The address of the collection's creator.\n   * @param args.collectionName - The name of the collection.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options.tokenStandard - The token standard to query.\n   * @returns The collection ID.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the collection ID for a specific creator and collection name\n   *   const collectionId = await aptos.getCollectionId({\n   *     creatorAddress: \"0x1\", // replace with a real creator address\n   *     collectionName: \"myCollection\"\n   *   });\n   *\n   *   console.log(\"Collection ID:\", collectionId);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCollectionId(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: TokenStandardArg;\n  }): Promise<string> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves digital asset data using the address of a digital asset.\n   *\n   * @param args - The parameters for the request.\n   * @param args.digitalAssetAddress - The address of the digital asset.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns GetTokenDataResponse containing relevant data for the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching digital asset data for a specific address\n   *   const digitalAsset = await aptos.getDigitalAssetData({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getDigitalAssetData(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetTokenDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current ownership data of a specified digital asset using its address.\n   *\n   * @param args The parameters for the request.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   *\n   * @returns GetCurrentTokenOwnershipResponse containing relevant ownership data of the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the current ownership of a digital asset\n   *   const digitalAssetOwner = await aptos.getCurrentDigitalAssetOwnership({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAssetOwner);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getCurrentDigitalAssetOwnership(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetCurrentTokenOwnershipResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getCurrentDigitalAssetOwnership({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the digital assets owned by a specified address.\n   *\n   * @param args.ownerAddress The address of the owner.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional pagination and ordering parameters for the response.\n   *\n   * @returns GetOwnedTokensResponse containing ownership data of the digital assets belonging to the ownerAddress.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the digital assets owned by the specified address\n   *   const digitalAssets = await aptos.getOwnedDigitalAssets({\n   *     ownerAddress: \"0x1\", // replace with a real account address\n   *   });\n   *\n   *   console.log(digitalAssets);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getOwnedDigitalAssets(args: {\n    ownerAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetOwnedTokensResponse[0]>;\n  }): Promise<GetOwnedTokensResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getOwnedDigitalAssets({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the activity data for a specified digital asset using its address.\n   *\n   * @param args - The parameters for the request.\n   * @param args.digitalAssetAddress - The address of the digital asset.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters.\n   *\n   * @returns A promise that resolves to the activity data related to the digital asset.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the activity data for a digital asset\n   *   const digitalAssetActivity = await aptos.getDigitalAssetActivity({\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(digitalAssetActivity);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async getDigitalAssetActivity(args: {\n    digitalAssetAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n  }): Promise<GetTokenActivityResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.TOKEN_V2_PROCESSOR,\n    });\n    return getDigitalAssetActivity({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Creates a new collection within the specified account.\n   *\n   * @param args.creator - The account of the collection's creator.\n   * @param args.description - The description of the collection.\n   * @param args.name - The name of the collection.\n   * @param args.uri - The URI to additional info about the collection.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * The parameters below are optional:\n   * @param args.maxSupply - Controls the max supply of the digital assets. Defaults to MAX_U64_BIG_INT.\n   * @param args.mutableDescription - Controls mutability of the collection's description. Defaults to true.\n   * @param args.mutableRoyalty - Controls mutability of the collection's royalty. Defaults to true.\n   * @param args.mutableUri - Controls mutability of the collection's URI. Defaults to true.\n   * @param args.mutableTokenDescription - Controls mutability of the digital asset's description. Defaults to true.\n   * @param args.mutableTokenName - Controls mutability of the digital asset's name. Defaults to true.\n   * @param args.mutableTokenProperties - Controls mutability of digital asset's properties. Defaults to true.\n   * @param args.mutableTokenUri - Controls mutability of the digital asset's URI. Defaults to true.\n   * @param args.tokensBurnableByCreator - Controls whether digital assets can be burnable by the creator. Defaults to true.\n   * @param args.tokensFreezableByCreator - Controls whether digital assets can be frozen by the creator. Defaults to true.\n   * @param args.royaltyNumerator - The numerator of the royalty to be paid to the creator when a digital asset is transferred.\n   * Defaults to 0.\n   * @param args.royaltyDenominator - The denominator of the royalty to be paid to the creator when a digital asset is\n   * transferred. Defaults to 1.\n   *\n   * @returns A SimpleTransaction that when submitted will create the collection.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Creating a new collection transaction\n   *   const transaction = await aptos.createCollectionTransaction({\n   *     creator: Account.generate(), // Replace with a real account\n   *     description: \"A unique collection of digital assets.\",\n   *     name: \"My Digital Collection\",\n   *     uri: \"https://mycollection.com\",\n   *   });\n   *\n   *   console.log(\"Transaction created:\", transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async createCollectionTransaction(\n    args: {\n      creator: Account;\n      description: string;\n      name: string;\n      uri: string;\n      options?: InputGenerateTransactionOptions;\n    } & CreateCollectionOptions,\n  ): Promise<SimpleTransaction> {\n    return createCollectionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Create a transaction to mint a digital asset into the creator's account within an existing collection.\n   * This function helps you generate a transaction that can be simulated or submitted to the blockchain for minting a digital asset.\n   *\n   * @param args.creator - The creator of the collection.\n   * @param args.collection - The name of the collection the digital asset belongs to.\n   * @param args.description - The description of the digital asset.\n   * @param args.name - The name of the digital asset.\n   * @param args.uri - The URI to additional info about the digital asset.\n   * @param args.propertyKeys - Optional array of property keys for the digital asset.\n   * @param args.propertyTypes - Optional array of property types for the digital asset.\n   * @param args.propertyValues - Optional array of property values for the digital asset.\n   * @param args.options - Optional transaction generation options.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Creating a transaction to mint a digital asset\n   *   const transaction = await aptos.mintDigitalAssetTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     collection: \"MyCollection\",\n   *     description: \"This is a digital asset.\",\n   *     name: \"MyDigitalAsset\",\n   *     uri: \"https://example.com/my-digital-asset\",\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async mintDigitalAssetTransaction(args: {\n    creator: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer ownership of a non-fungible digital asset.\n   * This function allows you to transfer a digital asset only if it is not frozen, meaning the ownership transfer is not disabled.\n   *\n   * @param args The arguments for transferring the digital asset.\n   * @param args.sender The sender account of the current digital asset owner.\n   * @param args.digitalAssetAddress The address of the digital asset being transferred.\n   * @param args.recipient The account address of the recipient.\n   * @param args.digitalAssetType Optional. The type of the digital asset, defaults to \"0x4::token::Token\".\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Transfer a digital asset\n   *   const transaction = await aptos.transferDigitalAssetTransaction({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *     recipient: \"0x456\", // replace with a real recipient account address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async transferDigitalAssetTransaction(args: {\n    sender: Account;\n    digitalAssetAddress: AccountAddressInput;\n    recipient: AccountAddress;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Mint a soul bound digital asset into a recipient's account.\n   * This function allows you to create a unique digital asset that is bound to a specific account.\n   *\n   * @param args - The arguments for minting the soul bound transaction.\n   * @param args.account - The account that mints the digital asset.\n   * @param args.collection - The collection name that the digital asset belongs to.\n   * @param args.description - The digital asset description.\n   * @param args.name - The digital asset name.\n   * @param args.uri - The digital asset URL.\n   * @param args.recipient - The account address where the digital asset will be created.\n   * @param args.propertyKeys - The property keys for storing on-chain properties.\n   * @param args.propertyTypes - The type of property values.\n   * @param args.propertyValues - The property values to be stored on-chain.\n   * @param args.options - Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Mint a soul bound digital asset\n   *   const transaction = await aptos.mintSoulBoundTransaction({\n   *     account: Account.generate(), // Replace with a real account\n   *     collection: \"collectionName\",\n   *     description: \"collectionDescription\",\n   *     name: \"digitalAssetName\",\n   *     uri: \"digital-asset-uri.com\",\n   *     recipient: \"0x123\" // Replace with a real recipient account address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async mintSoulBoundTransaction(args: {\n    account: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    recipient: AccountAddressInput;\n    propertyKeys?: Array<string>;\n    propertyTypes?: Array<PropertyType>;\n    propertyValues?: Array<PropertyValue>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return mintSoulBoundTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Burn a digital asset by its creator, allowing for the removal of a specified digital asset from the blockchain.\n   *\n   * @param args The arguments for burning the digital asset.\n   * @param args.creator The creator account that is burning the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset to be burned.\n   * @param args.digitalAssetType Optional. The type of the digital asset being burned.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const creator = Account.generate(); // Replace with a real creator account\n   *   const transaction = await aptos.burnDigitalAssetTransaction({\n   *     creator: creator,\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async burnDigitalAssetTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return burnDigitalAssetTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Freeze the ability to transfer a specified digital asset.\n   * This function allows the creator to restrict the transfer capability of a digital asset.\n   *\n   * @param args The arguments for freezing the digital asset transfer.\n   * @param args.creator The creator account initiating the freeze.\n   * @param args.digitalAssetAddress The address of the digital asset to be frozen.\n   * @param args.digitalAssetType Optional. The type of the digital asset being frozen.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Freeze the digital asset transfer\n   *   const transaction = await aptos.freezeDigitalAssetTransaferTransaction({\n   *     creator: Account.generate(), // Replace with a real account if needed\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async freezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return freezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Unfreeze the ability to transfer a digital asset.\n   * This function allows the specified creator account to unfreeze the transfer of a digital asset identified by its address.\n   *\n   * @param args The parameters for unfreezing the digital asset transfer.\n   * @param args.creator The creator account that is unfreezing the digital asset transfer.\n   * @param args.digitalAssetAddress The address of the digital asset to unfreeze.\n   * @param args.digitalAssetType Optional. The type of the digital asset being unfrozen.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Unfreeze the ability to transfer a digital asset\n   *   const transaction = await aptos.unfreezeDigitalAssetTransaferTransaction({\n   *     creator: Account.generate(), // replace with a real creator account\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  // TODO: Rename Transafer to Transfer\n  async unfreezeDigitalAssetTransaferTransaction(args: {\n    creator: Account;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return unfreezeDigitalAssetTransferTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset description to provide additional context or information about the asset.\n   *\n   * @param args The parameters for setting the digital asset description.\n   * @param args.creator The creator account responsible for the digital asset.\n   * @param args.description The digital asset description to be set.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the digital asset description\n   *   const transaction = await aptos.setDigitalAssetDescriptionTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     description: \"This is a digital asset description.\",\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetDescriptionTransaction(args: {\n    creator: Account;\n    description: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetDescriptionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the digital asset name, allowing you to define a name for a specific digital asset on the blockchain.\n   *\n   * @param args The parameters for setting the digital asset name.\n   * @param args.creator The creator account responsible for the transaction.\n   * @param args.name The desired name for the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset, represented as a Move struct ID.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the blockchain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const creator = Account.generate(); // Generate a new account for the creator\n   *   const digitalAssetAddress = \"0x123\"; // replace with a real digital asset address\n   *\n   *   // Set the digital asset name\n   *   const transaction = await aptos.setDigitalAssetNameTransaction({\n   *     creator: creator,\n   *     name: \"digitalAssetName\",\n   *     digitalAssetAddress: digitalAssetAddress,\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetNameTransaction(args: {\n    creator: Account;\n    name: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetNameTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Set the URI for a digital asset, allowing you to associate a unique identifier with the asset.\n   *\n   * @param args The parameters for the transaction.\n   * @param args.creator The creator account initiating the transaction.\n   * @param args.uri The digital asset URI to be set.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the URI for a digital asset\n   *   const transaction = await aptos.setDigitalAssetURITransaction({\n   *     creator: Account.generate(), // Replace with a real creator account\n   *     uri: \"digital-asset-uri.com\",\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async setDigitalAssetURITransaction(args: {\n    creator: Account;\n    uri: string;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return setDigitalAssetURITransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a digital asset property to the blockchain.\n   * This function allows you to specify a new property for a digital asset, including its key, type, and value.\n   *\n   * @param args - The arguments for adding a digital asset property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - (Optional) The type of the digital asset.\n   * @param args.options - (Optional) Options for generating the transaction.\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Add a digital asset property\n   *   const transaction = await aptos.addDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // Replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: true,\n   *     digitalAssetAddress: \"0x123\", // Replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async addDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Remove a digital asset property from the blockchain.\n   * This function allows you to delete an existing property associated with a digital asset.\n   *\n   * @param args The parameters required to remove the digital asset property.\n   * @param args.creator The account that mints the digital asset.\n   * @param args.propertyKey The property key for storing on-chain properties.\n   * @param args.propertyType The type of property value.\n   * @param args.propertyValue The property value to be stored on-chain.\n   * @param args.digitalAssetAddress The digital asset address.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Remove a digital asset property\n   *   const transaction = await aptos.removeDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: true,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async removeDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return removeDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a digital asset property on-chain.\n   *\n   * @param args The parameters for updating the digital asset property.\n   * @param args.creator The account that mints the digital asset.\n   * @param args.digitalAssetAddress The address of the digital asset.\n   * @param args.propertyKey The property key for storing on-chain properties.\n   * @param args.propertyType The type of property value.\n   * @param args.propertyValue The property value to be stored on-chain.\n   * @param args.digitalAssetType Optional. The type of the digital asset.\n   * @param args.options Optional. Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Update a digital asset property\n   *   const transaction = await aptos.updateDigitalAssetPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"newKey\",\n   *     propertyType: \"BOOLEAN\",\n   *     propertyValue: false,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async updateDigitalAssetPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Add a typed digital asset property to the blockchain.\n   * This function allows you to define and store a specific property for a digital asset, enabling better categorization and\n   * management of digital assets.\n   *\n   * @param args - The parameters for adding the typed property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - The optional type of the digital asset.\n   * @param args.options - Optional transaction generation options.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Adding a typed digital asset property\n   *   const transaction = await aptos.addDigitalAssetTypedPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"typedKey\",\n   *     propertyType: \"STRING\",\n   *     propertyValue: \"hello\",\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async addDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return addDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Update a typed digital asset property on-chain.\n   * This function allows you to modify the properties of a digital asset, enabling dynamic updates to its attributes.\n   *\n   * @param args - The arguments for updating the digital asset property.\n   * @param args.creator - The account that mints the digital asset.\n   * @param args.propertyKey - The property key for storing on-chain properties.\n   * @param args.propertyType - The type of property value.\n   * @param args.propertyValue - The property value to be stored on-chain.\n   * @param args.digitalAssetAddress - The digital asset address.\n   * @param args.digitalAssetType - (Optional) The type of the digital asset.\n   * @param args.options - (Optional) Additional options for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Update a typed digital asset property\n   *   const transaction = await aptos.updateDigitalAssetTypedPropertyTransaction({\n   *     creator: Account.generate(), // replace with a real account\n   *     propertyKey: \"typedKey\",\n   *     propertyType: \"U8\",\n   *     propertyValue: 2,\n   *     digitalAssetAddress: \"0x123\", // replace with a real digital asset address\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group DigitalAsset\n   */\n  async updateDigitalAssetTypedPropertyTransaction(args: {\n    creator: Account;\n    propertyKey: string;\n    propertyType: PropertyType;\n    propertyValue: PropertyValue;\n    digitalAssetAddress: AccountAddressInput;\n    digitalAssetType?: MoveStructId;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    return updateDigitalAssetTypedPropertyTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/event}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * event namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { AnyNumber, GetEventsResponse, PaginationArgs, MoveStructId, OrderByArg, WhereArg } from \"../types\";\nimport { GetEventsQuery } from \"../types/generated/operations\";\nimport { GetEvents } from \"../types/generated/queries\";\nimport { EventsBoolExp, InputMaybe } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\nconst MAX_EVENT_TYPE_LENGTH = 300;\nconst checkEventTypeLength = (eventType?: InputMaybe<string>) => {\n  if (eventType && eventType.length > MAX_EVENT_TYPE_LENGTH) {\n    throw new Error(`Event type length exceeds the maximum length of ${MAX_EVENT_TYPE_LENGTH}`);\n  }\n};\n\n/**\n * Retrieves events associated with a specific module event type.\n * This function allows you to filter events based on the event type and pagination options.\n *\n * @param args - The arguments for retrieving module events.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.eventType - The MoveStructId representing the type of event to retrieve.\n * @param [args.options] - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getModuleEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, eventType, options } = args;\n\n  const whereCondition: EventsBoolExp = {\n    _or: [\n      // EventHandle events\n      { account_address: { _eq: eventType.split(\"::\")[0] } },\n      // Module events\n      {\n        account_address: { _eq: \"0x0000000000000000000000000000000000000000000000000000000000000000\" },\n        sequence_number: { _eq: 0 },\n        creation_number: { _eq: 0 },\n      },\n    ],\n    indexed_type: { _eq: eventType },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieve events associated with a specific account and creation number.\n *\n * @param args - The parameters for retrieving account events.\n * @param args.aptosConfig - The configuration settings for the Aptos client.\n * @param args.accountAddress - The address of the account for which events are being retrieved.\n * @param args.creationNumber - The creation number to filter events.\n * @param args.options - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getAccountEventsByCreationNumber(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  creationNumber: AnyNumber;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, creationNumber, options } = args;\n  const address = AccountAddress.from(accountAddress);\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address.toStringLong() },\n    creation_number: { _eq: creationNumber },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves events associated with a specific account and event type.\n *\n * @param args - The parameters for retrieving account events.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.accountAddress - The address of the account for which to retrieve events.\n * @param args.eventType - The type of event to filter by.\n * @param args.options - Optional pagination and ordering parameters for the event retrieval.\n * @group Implementation\n */\nexport async function getAccountEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  eventType: MoveStructId;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, eventType, options } = args;\n  const address = AccountAddress.from(accountAddress).toStringLong();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    indexed_type: { _eq: eventType },\n  };\n\n  return getEvents({ aptosConfig, options: { ...options, where: whereCondition } });\n}\n\n/**\n * Retrieves a list of events based on specified filtering and pagination options.\n *\n * @param args - The arguments for retrieving events.\n * @param args.aptosConfig - The configuration for connecting to the Aptos network.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.offset] - The number of records to skip before starting to collect the result set.\n * @param [args.options.limit] - The maximum number of records to return.\n * @param [args.options.orderBy] - Defines the order in which to return the events.\n * @param [args.options.where] - Conditions to filter the events.\n * @param [args.options.where.indexed_type] - Filters events by the indexed type.\n * @group Implementation\n */\nexport async function getEvents(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, options } = args;\n\n  /**\n   * Checks the length of event types based on the provided filtering options.\n   *\n   * @param options - The options for querying event types.\n   * @param options.where - The conditions to filter the event types.\n   * @param options.where.indexed_type - The indexed type to filter by.\n   * @param options.where.indexed_type._eq - The specific value to match for the indexed type.\n   * @param options.offset - The number of items to skip before starting to collect the result set.\n   * @param options.limit - The maximum number of items to return.\n   * @param options.orderBy - The criteria to sort the results.\n   * @group Implementation\n   */\n  // eslint-disable-next-line no-underscore-dangle\n  checkEventTypeLength(options?.where?.indexed_type?._eq);\n\n  const graphqlQuery = {\n    query: GetEvents,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetEventsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getEvents\",\n  });\n\n  return data.events;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getAccountEventsByCreationNumber,\n  getAccountEventsByEventType,\n  getModuleEventsByEventType,\n  getEvents,\n} from \"../internal/event\";\nimport { AnyNumber, GetEventsResponse, MoveStructId, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { EventsBoolExp } from \"../types/generated/types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Event` Aptos related queries.\n * @group Event\n */\nexport class Event {\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., Testnet, Mainnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet to use for funding accounts.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with Testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Retrieve module events based on a specified event type.\n   * This function allows you to query for events that are associated with a particular module event type in the Aptos blockchain.\n   *\n   * @param args - The arguments for retrieving module events.\n   * @param args.eventType - The event type to filter the results.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters for the event results.\n   *\n   * @returns Promise<GetEventsResponse> - A promise that resolves to the retrieved events.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve module events for a specific event type\n   *   const events = await aptos.getModuleEventsByEventType({\n   *     eventType: \"0x1::transaction_fee::FeeStatement\", // specify the event type\n   *     minimumLedgerVersion: 1, // optional: specify minimum ledger version if needed\n   *   });\n   *\n   *   console.log(events); // log the retrieved events\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getModuleEventsByEventType(args: {\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getModuleEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve events associated with a specific account address and creation number.\n   *\n   * @param args - The parameters for retrieving account events.\n   * @param args.accountAddress - The account address to query events for.\n   * @param args.creationNumber - The event creation number to filter the events.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to sync up to before querying.\n   *\n   * @returns Promise<GetEventsResponse>\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get events for the account at creation number 0\n   *   const events = await aptos.getAccountEventsByCreationNumber({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     creationNumber: 0,\n   *   });\n   *\n   *   console.log(events);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getAccountEventsByCreationNumber(args: {\n    accountAddress: AccountAddressInput;\n    creationNumber: AnyNumber;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByCreationNumber({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve events associated with a specific account address and event type.\n   *\n   * @param args.accountAddress - The account address to query events for.\n   * @param args.eventType - The type of event to filter by.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @param args.options - Optional pagination and ordering parameters for the event query.\n   *\n   * @returns Promise<GetEventsResponse>\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get events for a specific account and event type\n   *   const events = await aptos.getAccountEventsByEventType({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     eventType: \"0x1::transaction_fee::FeeStatement\", // replace with a real event type\n   *     minimumLedgerVersion: 1, // optional, specify if needed\n   *   });\n   *\n   *   console.log(events);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getAccountEventsByEventType(args: {\n    accountAddress: AccountAddressInput;\n    eventType: MoveStructId;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getAccountEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve all events from the Aptos blockchain.\n   * An optional `where` clause can be provided to filter the results based on specific criteria.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional pagination and filtering options.\n   * @param args.options.where Optional condition to filter events.\n   * @param args.options.offset Optional pagination offset.\n   * @param args.options.limit Optional maximum number of events to return.\n   * @param args.options.orderBy Optional ordering of the results.\n   *\n   * @returns GetEventsQuery response type containing the events.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve all events\n   *   const events = await aptos.getEvents();\n   *\n   *   // Retrieve events with filtering by account address\n   *   const whereCondition = {\n   *     account_address: { _eq: \"0x123\" }, // replace with a real account address\n   *   };\n   *   const filteredEvents = await aptos.getEvents({\n   *     options: { where: whereCondition },\n   *   });\n   *\n   *   console.log(events);\n   *   console.log(filteredEvents);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Event\n   */\n  async getEvents(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetEventsResponse[0]> & WhereArg<EventsBoolExp>;\n  }): Promise<GetEventsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.EVENTS_PROCESSOR,\n    });\n    return getEvents({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/faucet}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFaucet } from \"../client\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { TransactionResponseType, UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"../utils/const\";\nimport { waitForTransaction } from \"./transaction\";\n\n/**\n * Funds an account with a specified amount of tokens from the Aptos faucet.\n * This function is useful for quickly providing a new or existing account with tokens to facilitate transactions.\n *\n * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n * the minting page at https://aptos.dev/network/faucet.\n *\n * @param args - The arguments for funding the account.\n * @param args.aptosConfig - The configuration settings for connecting to the Aptos network.\n * @param args.accountAddress - The address of the account to be funded.\n * @param args.amount - The amount of tokens to fund the account with.\n * @param args.options - Optional parameters for the transaction.\n * @param args.options.timeoutSecs - The maximum time to wait for the transaction to complete, in seconds.\n * @param args.options.checkSuccess - A flag indicating whether to check if the transaction was successful.\n *\n * @throws Error if the transaction does not return a user transaction type.\n * @group Implementation\n */\nexport async function fundAccount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  amount: number;\n  options?: WaitForTransactionOptions;\n}): Promise<UserTransactionResponse> {\n  const { aptosConfig, accountAddress, amount, options } = args;\n  const timeout = options?.timeoutSecs || DEFAULT_TXN_TIMEOUT_SEC;\n  const { data } = await postAptosFaucet<any, { txn_hashes: Array<string> }>({\n    aptosConfig,\n    path: \"fund\",\n    body: {\n      address: AccountAddress.from(accountAddress).toString(),\n      amount,\n    },\n    originMethod: \"fundAccount\",\n  });\n\n  const txnHash = data.txn_hashes[0];\n\n  const res = await waitForTransaction({\n    aptosConfig,\n    transactionHash: txnHash,\n    options: {\n      timeoutSecs: timeout,\n      checkSuccess: options?.checkSuccess,\n    },\n  });\n\n  // Response is always User transaction for a user submitted transaction\n  if (res.type === TransactionResponseType.User) {\n    return res;\n  }\n\n  throw new Error(`Unexpected transaction received for fund account: ${res.type}`);\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fundAccount } from \"../internal/faucet\";\nimport { UserTransactionResponse, WaitForTransactionOptions } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexer } from \"../internal/transaction\";\nimport { ProcessorType } from \"../utils\";\n\n/**\n * A class to query all `Faucet` related queries on Aptos.\n * @group Faucet\n */\nexport class Faucet {\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   *\n   * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n   * the minting page at https://aptos.dev/network/faucet.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.DEVNET }); // specify your own network if needed\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Faucet\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * This function creates an account if it does not exist and mints the specified amount of coins into that account.\n   *\n   * Note that only devnet has a publicly accessible faucet. For testnet, you must use\n   * the minting page at https://aptos.dev/network/faucet.\n   *\n   * @param args - The arguments for funding the account.\n   * @param args.accountAddress - The address of the account to fund.\n   * @param args.amount - The amount of tokens to fund the account with.\n   * @param args.options - Configuration options for waiting for the transaction.\n   * @returns Transaction hash of the transaction that funded the account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.DEVNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fund an account with a specified amount of tokens\n   *   const transaction = await aptos.fundAccount({\n   *     accountAddress: \"0x1\", // replace with your account address\n   *     amount: 100,\n   *   });\n   *\n   *   console.log(\"Transaction hash:\", transaction.hash);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Faucet\n   */\n  async fundAccount(args: {\n    accountAddress: AccountAddressInput;\n    amount: number;\n    options?: WaitForTransactionOptions;\n  }): Promise<UserTransactionResponse> {\n    const fundTxn = await fundAccount({ aptosConfig: this.config, ...args });\n\n    // If the user explicitly says to NOT wait by setting waitForIndexer to false, then we skip this.\n    // But, by default we want to wait for the indexer.\n    if (args.options?.waitForIndexer === undefined || args.options?.waitForIndexer) {\n      await waitForIndexer({\n        aptosConfig: this.config,\n        minimumLedgerVersion: BigInt(fundTxn.version),\n        processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n      });\n    }\n\n    return fundTxn;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/fungible_asset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * fungible_asset namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport { queryIndexer } from \"./general\";\nimport {\n  GetCurrentFungibleAssetBalances,\n  GetFungibleAssetActivities,\n  GetFungibleAssetMetadata,\n} from \"../types/generated/queries\";\nimport {\n  GetCurrentFungibleAssetBalancesQuery,\n  GetFungibleAssetActivitiesQuery,\n  GetFungibleAssetMetadataQuery,\n} from \"../types/generated/operations\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { AccountAddressInput } from \"../core\";\nimport { Account } from \"../account\";\nimport {\n  EntryFunctionABI,\n  InputGenerateTransactionOptions,\n  parseTypeTag,\n  TypeTagAddress,\n  TypeTagU64,\n} from \"../transactions\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * Retrieves metadata for fungible assets based on specified criteria.\n * This function allows you to filter and paginate through fungible asset metadata.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.limit] - The maximum number of results to return.\n * @param [args.options.offset] - The number of results to skip before starting to collect the result set.\n * @param [args.options.where] - Conditions to filter the results.\n * @group Implementation\n */\nexport async function getFungibleAssetMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n}): Promise<GetFungibleAssetMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetMetadata,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetMetadata\",\n  });\n\n  return data.fungible_asset_metadata;\n}\n\n/**\n * Retrieves the activities associated with fungible assets.\n * This function allows you to filter and paginate through the activities based on specified conditions.\n *\n * @param args - The arguments for retrieving fungible asset activities.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.limit] - The maximum number of activities to retrieve.\n * @param [args.options.offset] - The number of activities to skip before starting to collect the result set.\n * @param [args.options.where] - Conditions to filter the activities.\n * @returns A promise that resolves to an array of fungible asset activities.\n * @group Implementation\n */\nexport async function getFungibleAssetActivities(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n}): Promise<GetFungibleAssetActivitiesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetActivities,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetActivitiesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetActivities\",\n  });\n\n  return data.fungible_asset_activities;\n}\n\n/**\n * Retrieves the current balances of fungible assets for a specified configuration.\n *\n * @param args - The arguments for retrieving fungible asset balances.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.options - Optional parameters for pagination and filtering.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the results.\n * @param args.options.where - Conditions to filter the results based on specific criteria.\n * @returns The current balances of fungible assets.\n * @group Implementation\n */\nexport async function getCurrentFungibleAssetBalances(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n}): Promise<GetCurrentFungibleAssetBalancesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetCurrentFungibleAssetBalances,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.limit,\n      offset: options?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentFungibleAssetBalancesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentFungibleAssetBalances\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\nconst faTransferAbi: EntryFunctionABI = {\n  typeParameters: [{ constraints: [] }],\n  parameters: [parseTypeTag(\"0x1::object::Object\"), new TypeTagAddress(), new TypeTagU64()],\n};\n\n/**\n * Transfers a specified amount of a fungible asset from the sender to the recipient.\n * This function helps facilitate the transfer of digital assets between accounts on the Aptos blockchain.\n *\n * @param args - The parameters for the transfer operation.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account initiating the transfer.\n * @param args.fungibleAssetMetadataAddress - The address of the fungible asset's metadata.\n * @param args.recipient - The address of the account receiving the asset.\n * @param args.amount - The amount of the fungible asset to transfer.\n * @param args.options - Optional settings for generating the transaction.\n * @group Implementation\n */\nexport async function transferFungibleAsset(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  fungibleAssetMetadataAddress: AccountAddressInput;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, fungibleAssetMetadataAddress, recipient, amount, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::primary_fungible_store::transfer\",\n      typeArguments: [\"0x1::fungible_asset::Metadata\"],\n      functionArguments: [fungibleAssetMetadataAddress, recipient, amount],\n      abi: faTransferAbi,\n    },\n    options,\n  });\n}\n\n/**\n * Transfers a specified amount of a fungible asset from any (primary or secondary) fungible store to any (primary or secondary) fungible store.\n * This function helps facilitate the transfer of digital assets between fungible stores on the Aptos blockchain.\n *\n * @param args - The parameters for the transfer operation.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account initiating the transfer.\n * @param args.fromStore - The address of the fungible store initiating the transfer.\n * @param args.toStore - The address of the fungible store receiving the asset.\n * @param args.amount - The amount of the fungible asset to transfer. Must be a positive number.\n * @param args.options - Optional settings for generating the transaction.\n * @returns A SimpleTransaction that can be submitted to the blockchain.\n * @throws Error if the transaction generation fails or if the input parameters are invalid.\n * @group Implementation\n */\nexport async function transferFungibleAssetBetweenStores(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  fromStore: AccountAddressInput;\n  toStore: AccountAddressInput;\n  amount: AnyNumber;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, fromStore, toStore, amount, options } = args;\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::dispatchable_fungible_asset::transfer\",\n      typeArguments: [\"0x1::fungible_asset::FungibleStore\"],\n      functionArguments: [fromStore, toStore, amount],\n      abi: faTransferAbi,\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n  WhereArg,\n} from \"../types\";\nimport {\n  getCurrentFungibleAssetBalances,\n  getFungibleAssetActivities,\n  getFungibleAssetMetadata,\n  transferFungibleAsset,\n  transferFungibleAssetBetweenStores,\n} from \"../internal/fungibleAsset\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions } from \"../transactions\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class for querying and managing fungible asset-related operations on the Aptos blockchain.\n * @group FungibleAsset\n */\nexport class FungibleAsset {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for connecting to the Aptos network.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries all fungible asset metadata.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   *\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching fungible asset metadata\n   *   const fungibleAssets = await aptos.getFungibleAssetMetadata();\n   *   console.log(fungibleAssets);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadata(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetMetadataBoolExp>;\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetMetadata({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the fungible asset metadata for a specific asset type.\n   * This function helps retrieve detailed information about a fungible asset based on its type.\n   *\n   * @param args - The parameters for the query.\n   * @param args.assetType - The asset type of the fungible asset, e.g., \"0x1::aptos_coin::AptosCoin\" for Aptos Coin.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   *\n   * @returns A fungible asset metadata item.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve fungible asset metadata by asset type\n   *   const fungibleAsset = await aptos.getFungibleAssetMetadataByAssetType({\n   *     assetType: \"0x1::aptos_coin::AptosCoin\" // replace with your asset type\n   *   });\n   *\n   *   console.log(fungibleAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadataByAssetType(args: {\n    assetType: string;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetFungibleAssetMetadataResponse[0]> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          asset_type: { _eq: args.assetType },\n        },\n      },\n    });\n\n    return data[0];\n  }\n\n  /**\n   * Retrieves fungible asset metadata based on the creator address.\n   *\n   * This function allows you to query metadata for a specific fungible asset created by a given address.\n   *\n   * @param args - The parameters for the query.\n   * @param args.creatorAddress - The creator address of the fungible asset.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   *\n   * @returns A fungible asset metadata item.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve fungible asset metadata by creator address\n   *   const fungibleAsset = await aptos.getFungibleAssetMetadataByCreatorAddress({\n   *     creatorAddress: \"0x123\", // replace with a real creator address\n   *   });\n   *\n   *   console.log(fungibleAsset);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetMetadataByCreatorAddress(args: {\n    creatorAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          creator_address: { _eq: AccountAddress.from(args.creatorAddress).toStringLong() },\n        },\n      },\n    });\n\n    return data;\n  }\n\n  /**\n   * Queries all fungible asset activities and returns a list of their metadata.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching fungible asset activities\n   *   const fungibleAssetActivities = await aptos.getFungibleAssetActivities();\n   *   console.log(fungibleAssetActivities);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getFungibleAssetActivities(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<FungibleAssetActivitiesBoolExp>;\n  }): Promise<GetFungibleAssetActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getFungibleAssetActivities({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries all fungible asset balances.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying.\n   * @param args.options Optional configuration for pagination and filtering.\n   *\n   * @returns A list of fungible asset metadata.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching current fungible asset balances\n   *   const fungibleAssetBalances = await aptos.getCurrentFungibleAssetBalances();\n   *\n   *   console.log(fungibleAssetBalances);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async getCurrentFungibleAssetBalances(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & WhereArg<CurrentFungibleAssetBalancesBoolExp>;\n  }): Promise<GetCurrentFungibleAssetBalancesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.FUNGIBLE_ASSET_PROCESSOR,\n    });\n    return getCurrentFungibleAssetBalances({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer a specified amount of fungible asset from the sender's primary store to the recipient's primary store.\n   * This method allows you to transfer any fungible asset, including fungible tokens.\n   *\n   * @param args - The arguments for the transfer operation.\n   * @param args.sender - The sender account.\n   * @param args.fungibleAssetMetadataAddress - The fungible asset account address. For example, if you're transferring USDT,\n   * this would be the USDT address.\n   * @param args.recipient - The recipient account address.\n   * @param args.amount - The number of assets to transfer.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Transfer fungible asset from sender to recipient\n   *   const transaction = await aptos.transferFungibleAsset({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     fungibleAssetMetadataAddress: \"0x123\", // replace with a real fungible asset address\n   *     recipient: \"0x456\", // replace with a real recipient account\n   *     amount: 5\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async transferFungibleAsset(args: {\n    sender: Account;\n    fungibleAssetMetadataAddress: AccountAddressInput;\n    recipient: AccountAddressInput;\n    amount: AnyNumber;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferFungibleAsset({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Transfer a specified amount of fungible asset from the sender's any (primary or secondary) fungible store to any (primary or secondary) fungible store.\n   * This method allows you to transfer any fungible asset, including fungible tokens.\n   *\n   * @param args - The arguments for the transfer operation.\n   * @param args.sender - The sender account initiating the transfer.\n   * @param args.fromStore - The fungible store address initiating the transfer.\n   * @param args.toStore - The fungible store address receiving the asset.\n   * @param args.amount - The number of assets to transfer. Must be a positive number.\n   * @param args.options - Optional parameters for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @throws Error if:\n   * - The sender account is invalid\n   * - The store addresses are invalid\n   * - The amount is negative or zero\n   * - The transaction fails to generate\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function transferAssets() {\n   *   // Transfer 100 units of the asset from senderStore to recipientStore\n   *   const transaction = await aptos.transferFungibleAssetBetweenStores({\n   *     sender: Account.generate(), // replace with a real sender account\n   *     fromStore: \"0x123\", // replace with a real fungible store address\n   *     toStore: \"0x456\", // replace with a real fungible store address\n   *     amount: 100\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   *\n   * transferAssets().catch(console.error);\n   * ```\n   * @group FungibleAsset\n   */\n  async transferFungibleAssetBetweenStores(args: {\n    sender: Account;\n    fromStore: AccountAddressInput;\n    toStore: AccountAddressInput;\n    amount: AnyNumber;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return transferFungibleAssetBetweenStores({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getChainTopUserTransactions,\n  getIndexerLastSuccessVersion,\n  getLedgerInfo,\n  getProcessorStatus,\n  queryIndexer,\n} from \"../internal/general\";\nimport { getBlockByHeight, getBlockByVersion } from \"../internal/transaction\";\nimport { view, viewJson } from \"../internal/view\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GetProcessorStatusResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersionArg,\n  MoveValue,\n} from \"../types\";\nimport { ProcessorType } from \"../utils/const\";\nimport { InputViewFunctionData, InputViewFunctionJsonData } from \"../transactions\";\n\n/**\n * A class to query various Aptos-related information and perform operations on the Aptos blockchain.\n * @group General\n */\nexport class General {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows users to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network\n   *         nodeUrl: \"https://testnet.aptos.dev\" // specify the node URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries for the Aptos ledger information.\n   *\n   * @returns The Aptos Ledger Info, which includes details such as chain ID, epoch, and ledger version.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the ledger information\n   *   const ledgerInfo = await aptos.getLedgerInfo();\n   *\n   *   console.log(ledgerInfo);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getLedgerInfo(): Promise<LedgerInfo> {\n    return getLedgerInfo({ aptosConfig: this.config });\n  }\n\n  /**\n   * Retrieves the chain ID of the Aptos blockchain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching the chain ID\n   *   const chainId = await aptos.getChainId();\n   *   console.log(\"Chain ID:\", chainId);\n   * }\n   * runExample().catch(console.error);\n   *\n   * @returns The chain ID of the Aptos blockchain.\n   * ```\n   * @group General\n   */\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Retrieves block information by the specified ledger version.\n   *\n   * @param args - The arguments for retrieving the block.\n   * @param args.ledgerVersion - The ledger version to lookup block information for.\n   * @param args.options - Optional parameters for the request.\n   * @param args.options.withTransactions - If set to true, include all transactions in the block.\n   *\n   * @returns Block information with optional transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve block information for a specific ledger version\n   *   const block = await aptos.getBlockByVersion({ ledgerVersion: 5 });\n   *   console.log(block);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getBlockByVersion(args: {\n    ledgerVersion: AnyNumber;\n    options?: { withTransactions?: boolean };\n  }): Promise<Block> {\n    return getBlockByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieve a block by its height, allowing for the inclusion of transactions if specified.\n   *\n   * @param args - The parameters for the block retrieval.\n   * @param args.blockHeight - The block height to look up, starting at 0.\n   * @param args.options - Optional settings for the retrieval.\n   * @param args.options.withTransactions - If set to true, includes all transactions in the block.\n   *\n   * @returns The block with optional transactions included.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the block at height 5, including transactions\n   *   const block = await aptos.getBlockByHeight({ blockHeight: 5, options: { withTransactions: true } });\n   *   console.log(block);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getBlockByHeight(args: { blockHeight: AnyNumber; options?: { withTransactions?: boolean } }): Promise<Block> {\n    return getBlockByHeight({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example\n   * const data = await aptos.view({\n   *  payload: {\n   *   function: \"0x1::coin::balance\",\n   *   typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *   functionArguments: [accountAddress],\n   *  }\n   * })\n   *\n   * @returns an array of Move values\n   * @group General\n   */\n  async view<T extends Array<MoveValue>>(args: {\n    payload: InputViewFunctionData;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return view<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function with JSON, this provides compatability with the old `aptos` package\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example\n   * const data = await aptos.view({\n   *  payload: {\n   *   function: \"0x1::coin::balance\",\n   *   typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *   functionArguments: [accountAddress.toString()],\n   *  }\n   * })\n   *\n   * @returns an array of Move values\n   * @group General\n   */\n  async viewJson<T extends Array<MoveValue>>(args: {\n    payload: InputViewFunctionJsonData;\n    options?: LedgerVersionArg;\n  }): Promise<T> {\n    return viewJson<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the top user transactions based on the specified limit.\n   *\n   * @param args - The arguments for querying top user transactions.\n   * @param args.limit - The number of transactions to return.\n   * @returns GetChainTopUserTransactionsResponse\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch the top user transactions with a limit of 5\n   *   const topUserTransactions = await aptos.getChainTopUserTransactions({ limit: 5 });\n   *\n   *   console.log(topUserTransactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getChainTopUserTransactions(args: { limit: number }): Promise<GetChainTopUserTransactionsResponse> {\n    return getChainTopUserTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Retrieves data from the Aptos Indexer using a GraphQL query.\n   * This function allows you to execute complex queries to fetch specific data from the Aptos blockchain.\n   *\n   * @param args.query.query - A GraphQL query string.\n   * @param args.query.variables - The variables for the query (optional).\n   *\n   * @return The provided T type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Querying the Aptos Indexer for ledger information\n   *   const topUserTransactions = await aptos.queryIndexer({\n   *     query: { query: `query MyQuery {\n   *       ledger_infos {\n   *         chain_id\n   *       }\n   *     }`}\n   *   });\n   *\n   *   console.log(topUserTransactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async queryIndexer<T extends {}>(args: { query: GraphqlQuery }): Promise<T> {\n    return queryIndexer<T>({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for the last successful indexer version, providing insight into the ledger version the indexer is updated to, which\n   * may lag behind the full nodes.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the last successful indexer version\n   *   const version = await aptos.getIndexerLastSuccessVersion();\n   *   console.log(`Last successful indexer version: ${version}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getIndexerLastSuccessVersion(): Promise<bigint> {\n    return getIndexerLastSuccessVersion({ aptosConfig: this.config });\n  }\n\n  /**\n   * Query the processor status for a specific processor type.\n   *\n   * @param processorType The processor type to query.\n   * @returns The status of the specified processor type.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the processor status for the account transactions processor\n   *   const status = await aptos.getProcessorStatus(\"account_transactions_processor\");\n   *   console.log(status);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group General\n   */\n  async getProcessorStatus(processorType: ProcessorType): Promise<GetProcessorStatusResponse[0]> {\n    return getProcessorStatus({ aptosConfig: this.config, processorType });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/name}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * name namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { GetANSNameResponse, MoveAddressType, OrderByArg, PaginationArgs, WhereArg } from \"../types\";\nimport { GetNamesQuery } from \"../types/generated/operations\";\nimport { GetNames } from \"../types/generated/queries\";\nimport { CurrentAptosNamesBoolExp } from \"../types/generated/types\";\nimport { Network } from \"../utils/apiEndpoints\";\nimport { queryIndexer } from \"./general\";\nimport { view } from \"./view\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\nexport const VALIDATION_RULES_DESCRIPTION = [\n  \"A name must be between 3 and 63 characters long,\",\n  \"and can only contain lowercase a-z, 0-9, and hyphens.\",\n  \"A name may not start or end with a hyphen.\",\n].join(\" \");\n\n/**\n * Validate if a given fragment is a valid ANS segment.\n * This function checks the length and character constraints of the fragment to ensure it meets the ANS standards.\n *\n * @param fragment - A fragment of a name, either the domain or subdomain.\n * @returns A boolean indicating if the fragment is a valid fragment.\n * @group Implementation\n */\nexport function isValidANSSegment(fragment: string): boolean {\n  if (!fragment) return false;\n  if (fragment.length < 3) return false;\n  if (fragment.length > 63) return false;\n  // only lowercase a-z and 0-9 are allowed, along with -. a domain may not start or end with a hyphen\n  if (!/^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/.test(fragment)) return false;\n  return true;\n}\n\n/**\n * Checks if an ANS name is valid or not.\n *\n * @param name - A string of the domain name, which can include or exclude the .apt suffix.\n * @group Implementation\n */\nexport function isValidANSName(name: string): { domainName: string; subdomainName?: string } {\n  const [first, second, ...rest] = name.replace(/\\.apt$/, \"\").split(\".\");\n\n  if (rest.length > 0) {\n    throw new Error(`${name} is invalid. A name can only have two parts, a domain and a subdomain separated by a \".\"`);\n  }\n\n  if (!isValidANSSegment(first)) {\n    throw new Error(`${first} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  if (second && !isValidANSSegment(second)) {\n    throw new Error(`${second} is not valid. ${VALIDATION_RULES_DESCRIPTION}`);\n  }\n\n  return {\n    domainName: second || first,\n    subdomainName: second ? first : undefined,\n  };\n}\n\n/**\n * Policy for determining how subdomains expire in relation to their parent domain.\n * @group Implementation\n */\nexport enum SubdomainExpirationPolicy {\n  Independent = 0,\n  FollowsDomain = 1,\n}\n\n/**\n * Determine if a given ANS name is considered active based on its expiration dates.\n * Domains are active if their expiration date is in the future, while subdomains may\n * follow their parent's expiration policy (1) or expire independently (0).\n * If the subdomain is expiring independently, it can expire before their parent, but not after.\n *\n * @param name - An ANS name returned from one of the functions of the SDK.\n * @returns A boolean indicating whether the contract considers the name active or not.\n * @group Implementation\n */\nexport function isActiveANSName(name: GetANSNameResponse[0]): boolean {\n  if (!name) return false;\n\n  const isTLDExpired = new Date(name.domain_expiration_timestamp).getTime() < Date.now();\n  const isExpired = new Date(name.expiration_timestamp).getTime() < Date.now();\n\n  // If we are a subdomain, if our parent is expired we are always expired\n  if (name.subdomain && isTLDExpired) return false;\n\n  // If we are a subdomain and our expiration policy is to follow the domain, we\n  // are active (since we know our parent is not expired by this point)\n  if (name.subdomain && name.subdomain_expiration_policy === SubdomainExpirationPolicy.FollowsDomain) return true;\n\n  // At this point, we are either a TLD or a subdomain with an independent\n  // expiration policy, we are active as long as we the expiration timestamp\n  return !isExpired;\n}\n\nexport const LOCAL_ANS_ACCOUNT_PK =\n  process.env.ANS_TEST_ACCOUNT_PRIVATE_KEY ??\n  \"ed25519-priv-0x37368b46ce665362562c6d1d4ec01a08c8644c488690df5a17e13ba163e20221\";\nexport const LOCAL_ANS_ACCOUNT_ADDRESS =\n  process.env.ANS_TEST_ACCOUNT_ADDRESS ?? \"0x585fc9f0f0c54183b039ffc770ca282ebd87307916c215a3e692f2f8e4305e82\";\n\nconst NetworkToAnsContract: Record<Network, string | null> = {\n  [Network.TESTNET]: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n  [Network.MAINNET]: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\",\n  [Network.LOCAL]: LOCAL_ANS_ACCOUNT_ADDRESS,\n  [Network.CUSTOM]: null,\n  [Network.DEVNET]: null,\n};\n\n/**\n * Retrieves the address of the ANS contract based on the specified Aptos network configuration.\n *\n * @param aptosConfig - The configuration object for the Aptos network.\n * @param aptosConfig.network - The network for which to retrieve the ANS contract address.\n *\n * @throws Throws an error if the ANS contract is not deployed to the specified network.\n * @group Implementation\n */\nfunction getRouterAddress(aptosConfig: AptosConfig): string {\n  const address = NetworkToAnsContract[aptosConfig.network];\n  if (!address) throw new Error(`The ANS contract is not deployed to ${aptosConfig.network}`);\n  return address;\n}\n\nconst unwrapOption = <T>(option: any): T | undefined => {\n  if (!!option && typeof option === \"object\" && \"vec\" in option && Array.isArray(option.vec)) {\n    return option.vec[0];\n  }\n\n  return undefined;\n};\n\n/**\n * Retrieve the owner address of a specified domain or subdomain.\n *\n * @param args - The arguments for retrieving the owner address.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.name - The name of the domain or subdomain to query.\n * @returns The account address of the owner, or undefined if not found.\n * @group Implementation\n */\nexport async function getOwnerAddress(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<AccountAddress | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_owner_addr`,\n      functionArguments: [domainName, subdomainName],\n    },\n  });\n\n  const owner = unwrapOption<MoveAddressType>(res[0]);\n\n  return owner ? AccountAddress.from(owner) : undefined;\n}\n\n/**\n * Parameters for registering a name in the Aptos network.\n *\n * @param aptosConfig - Configuration settings for the Aptos network.\n * @param sender - The account initiating the name registration.\n * @param name - The name to be registered.\n * @param expiration - The expiration policy for the name registration.\n * @group Implementation\n */\nexport interface RegisterNameParameters {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  expiration:\n    | { policy: \"domain\"; years?: 1 }\n    | { policy: \"subdomain:follow-domain\" }\n    | { policy: \"subdomain:independent\"; expirationDate: number };\n  transferable?: boolean;\n  toAddress?: AccountAddressInput;\n  targetAddress?: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}\n\n/**\n * Registers a domain or subdomain with the specified parameters. This function ensures that the provided names and expiration\n * policies are valid before proceeding with the registration process.\n *\n * @param args - The parameters required for registering a name.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.expiration - The expiration details for the registration.\n * @param args.name - The name to be registered, which can be a domain or subdomain.\n * @param args.sender - The account details of the sender initiating the registration.\n * @param args.targetAddress - The target address for the registration.\n * @param args.toAddress - The address to which the registration is associated.\n * @param args.options - Additional options for the registration process.\n * @param args.transferable - Indicates whether the registered name is transferable.\n *\n * @throws Error if the provided expiration policy is invalid for subdomains.\n * @throws Error if the domain does not exist.\n * @throws Error if the subdomain expiration time exceeds the domain expiration time.\n *\n * @returns A transaction object representing the registration process.\n * @group Implementation\n */\nexport async function registerName(args: RegisterNameParameters): Promise<SimpleTransaction> {\n  const { aptosConfig, expiration, name, sender, targetAddress, toAddress, options, transferable } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const hasSubdomainPolicy =\n    expiration.policy === \"subdomain:independent\" || expiration.policy === \"subdomain:follow-domain\";\n\n  if (subdomainName && !hasSubdomainPolicy) {\n    throw new Error(\n      \"Subdomains must have an expiration policy of either 'subdomain:independent' or 'subdomain:follow-domain'\",\n    );\n  }\n\n  if (hasSubdomainPolicy && !subdomainName) {\n    throw new Error(`Policy is set to ${expiration.policy} but no subdomain was provided`);\n  }\n\n  if (expiration.policy === \"domain\") {\n    const years = expiration.years ?? 1;\n    if (years !== 1) {\n      throw new Error(\"For now, names can only be registered for 1 year at a time\");\n    }\n\n    const secondsInYear = 31536000;\n    const registrationDuration = years * secondsInYear;\n\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::register_domain`,\n        functionArguments: [domainName, registrationDuration, targetAddress, toAddress],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  // We are a subdomain\n  if (!subdomainName) {\n    throw new Error(`${expiration.policy} requires a subdomain to be provided.`);\n  }\n\n  const tldExpiration = await getExpiration({ aptosConfig, name: domainName });\n  if (!tldExpiration) {\n    throw new Error(\"The domain does not exist\");\n  }\n\n  const expirationDateInMillisecondsSinceEpoch =\n    expiration.policy === \"subdomain:independent\" ? expiration.expirationDate : tldExpiration;\n\n  if (expirationDateInMillisecondsSinceEpoch > tldExpiration) {\n    throw new Error(\"The subdomain expiration time cannot be greater than the domain expiration time\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::register_subdomain`,\n      functionArguments: [\n        domainName,\n        subdomainName,\n        Math.round(expirationDateInMillisecondsSinceEpoch / 1000),\n        expiration.policy === \"subdomain:follow-domain\" ? 1 : 0,\n        !!transferable,\n        targetAddress,\n        toAddress,\n      ],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the expiration time of a specified domain or subdomain in epoch milliseconds.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.name - The name of the domain or subdomain to check.\n * @returns The expiration time in epoch milliseconds, or undefined if an error occurs.\n * @group Implementation\n */\nexport async function getExpiration(args: { aptosConfig: AptosConfig; name: string }): Promise<number | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  try {\n    const res = await view({\n      aptosConfig,\n      payload: {\n        function: `${routerAddress}::router::get_expiration`,\n        functionArguments: [domainName, subdomainName],\n      },\n    });\n\n    // Normalize expiration time from epoch seconds to epoch milliseconds\n    return Number(res[0]) * 1000;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Retrieves the primary name associated with a given account address.\n * This function helps in obtaining the complete domain name by combining the subdomain and domain names.\n *\n * @param args - The arguments for retrieving the primary name.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.address - The account address for which to retrieve the primary name.\n * @returns The primary name as a string, or undefined if no domain name exists.\n * @group Implementation\n */\nexport async function getPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  address: AccountAddressInput;\n}): Promise<string | undefined> {\n  const { aptosConfig, address } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_primary_name`,\n      functionArguments: [AccountAddress.from(address).toString()],\n    },\n  });\n\n  const domainName = unwrapOption<MoveAddressType>(res[1]);\n  const subdomainName = unwrapOption<MoveAddressType>(res[0]);\n\n  if (!domainName) return undefined;\n\n  return [subdomainName, domainName].filter(Boolean).join(\".\");\n}\n\n/**\n * Sets the primary name for the specified account, allowing for the association of a domain or subdomain with the account.\n * If no name is provided, it clears the existing primary name.\n *\n * @param args - The arguments for setting the primary name.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.sender - The account that is sending the transaction.\n * @param args.name - The name to set as the primary name. If omitted, the function will clear the primary name.\n * @param args.options - Optional transaction generation options.\n * @returns A transaction object representing the operation.\n * @group Implementation\n */\nexport async function setPrimaryName(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name?: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  if (!name) {\n    const transaction = await generateTransaction({\n      aptosConfig,\n      sender: sender.accountAddress.toString(),\n      data: {\n        function: `${routerAddress}::router::clear_primary_name`,\n        functionArguments: [],\n      },\n      options,\n    });\n\n    return transaction;\n  }\n\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_primary_name`,\n      functionArguments: [domainName, subdomainName],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the target address associated with a given domain name and subdomain name.\n *\n * @param args - The arguments for retrieving the target address.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.name - The name of the domain, which may include a subdomain.\n * @returns The target address as an AccountAddress, or undefined if not found.\n * @group Implementation\n */\nexport async function getTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<AccountAddress | undefined> {\n  const { aptosConfig, name } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const res = await view({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::router::get_target_addr`,\n      functionArguments: [domainName, subdomainName],\n    },\n  });\n\n  const target = unwrapOption<MoveAddressType>(res[0]);\n  return target ? AccountAddress.from(target) : undefined;\n}\n\n/**\n * Sets the target address for a specified domain and subdomain in the Aptos network.\n * This function helps to associate a given address with a domain name, allowing for easier access and management of resources.\n *\n * @param args - The arguments for setting the target address.\n * @param args.aptosConfig - The configuration settings for the Aptos network.\n * @param args.sender - The account that is sending the transaction.\n * @param args.name - The name of the domain or subdomain to be set.\n * @param args.address - The address to be associated with the domain or subdomain.\n * @param args.options - Optional parameters for generating the transaction.\n *\n * @returns A transaction object representing the set target address operation.\n * @group Implementation\n */\nexport async function setTargetAddress(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  address: AccountAddressInput;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, address, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::set_target_addr`,\n      functionArguments: [domainName, subdomainName, address],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * Retrieves the active Aptos name associated with the specified domain and subdomain.\n *\n * @param args - The parameters for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.name - The name to look up, which includes the domain and optional subdomain.\n * @returns The active Aptos name if it exists; otherwise, returns undefined.\n * @group Implementation\n */\nexport async function getName(args: {\n  aptosConfig: AptosConfig;\n  name: string;\n}): Promise<GetANSNameResponse[0] | undefined> {\n  const { aptosConfig, name } = args;\n  const { domainName, subdomainName = \"\" } = isValidANSName(name);\n\n  const where: CurrentAptosNamesBoolExp = {\n    domain: { _eq: domainName },\n    subdomain: { _eq: subdomainName },\n  };\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    query: {\n      query: GetNames,\n      variables: {\n        where_condition: where,\n        limit: 1,\n      },\n    },\n    originMethod: \"getName\",\n  });\n\n  // Convert the expiration_timestamp from an ISO string to milliseconds since epoch\n  let res = data.current_aptos_names[0];\n  if (res) {\n    res = sanitizeANSName(res);\n  }\n\n  return isActiveANSName(res) ? res : undefined;\n}\n\n/**\n * Options for querying names, including pagination, ordering, and filtering criteria.\n *\n * @param options - Pagination and filtering options for the query.\n * @group Implementation\n */\ninterface QueryNamesOptions {\n  options?: PaginationArgs & OrderByArg<GetANSNameResponse[0]> & WhereArg<CurrentAptosNamesBoolExp>;\n}\n\n/**\n * Arguments for retrieving account names based on the specified account address.\n *\n * @param accountAddress - The address of the account for which names are to be retrieved.\n * @group Implementation\n */\nexport interface GetAccountNamesArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves the current Aptos names associated with a specific account address.\n *\n * @param args - The arguments for retrieving account names.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for querying account names.\n * @param args.options.limit - The maximum number of names to retrieve.\n * @param args.options.offset - The number of names to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.accountAddress - The address of the account for which to retrieve names.\n *\n * @returns An array of sanitized Aptos names associated with the specified account address.\n * @group Implementation\n */\nexport async function getAccountNames(\n  args: { aptosConfig: AptosConfig } & GetAccountNamesArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountNames\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving the domains associated with a specific account.\n *\n * @param accountAddress - The address of the account for which to fetch domains.\n * @group Implementation\n */\nexport interface GetAccountDomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves the list of top-level domains owned by a specified account.\n *\n * @param args - The arguments for retrieving account domains.\n * @param args.aptosConfig - The Aptos configuration object.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.options.where.owner_address - The address of the account whose domains are being queried.\n * @param args.options.where.expiration_timestamp - The minimum expiration timestamp for the domains.\n * @param args.options.where.subdomain - The specific subdomain to filter by.\n *\n * @returns An array of sanitized domain names owned by the specified account.\n * @group Implementation\n */\nexport async function getAccountDomains(\n  args: { aptosConfig: AptosConfig } & GetAccountDomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountDomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _eq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving subdomains associated with a specific account.\n *\n * @param accountAddress - The address of the account for which to fetch subdomains.\n * @group Implementation\n */\nexport interface GetAccountSubdomainsArgs extends QueryNamesOptions {\n  accountAddress: AccountAddressInput;\n}\n\n/**\n * Retrieves a list of subdomains owned by a specified account address.\n * This function helps you identify all subdomains associated with a given account.\n *\n * @param args - The arguments for retrieving account subdomains.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the result set.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.options.where.owner_address - The address of the account to filter by.\n * @param args.options.where.expiration_timestamp - The expiration timestamp to filter by.\n * @param args.options.where.subdomain - The subdomain condition to filter by.\n * @param args.accountAddress - The address of the account whose subdomains are being queried.\n * @group Implementation\n */\nexport async function getAccountSubdomains(\n  args: { aptosConfig: AptosConfig } & GetAccountSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, accountAddress } = args;\n\n  const expirationDate = await getANSExpirationDate({ aptosConfig });\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getAccountSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          owner_address: { _eq: accountAddress.toString() },\n          expiration_timestamp: { _gte: expirationDate },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName);\n}\n\n/**\n * Arguments for retrieving subdomains associated with a specific domain.\n *\n * @param domain - The domain for which to fetch subdomains.\n * @group Implementation\n */\nexport interface GetDomainSubdomainsArgs extends QueryNamesOptions {\n  domain: string;\n}\n\n/**\n * Retrieve the active subdomains associated with a specified domain.\n *\n * @param args - The arguments for retrieving subdomains.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.options - Optional parameters for the query.\n * @param args.options.limit - The maximum number of results to return.\n * @param args.options.offset - The number of results to skip before starting to collect the results.\n * @param args.options.orderBy - The field by which to order the results.\n * @param args.options.where - Additional conditions to filter the results.\n * @param args.domain - The domain for which to retrieve subdomains.\n *\n * @returns An array of active subdomain names.\n * @group Implementation\n */\nexport async function getDomainSubdomains(\n  args: { aptosConfig: AptosConfig } & GetDomainSubdomainsArgs,\n): Promise<GetANSNameResponse> {\n  const { aptosConfig, options, domain } = args;\n\n  const data = await queryIndexer<GetNamesQuery>({\n    aptosConfig,\n    originMethod: \"getDomainSubdomains\",\n    query: {\n      query: GetNames,\n      variables: {\n        limit: options?.limit,\n        offset: options?.offset,\n        order_by: options?.orderBy,\n        where_condition: {\n          ...(args.options?.where ?? {}),\n          domain: { _eq: domain },\n          subdomain: { _neq: \"\" },\n        },\n      },\n    },\n  });\n\n  return data.current_aptos_names.map(sanitizeANSName).filter(isActiveANSName);\n}\n\n/**\n * This function returns the expiration date in which a name is fully expired as\n * defined by the contract.  The grace period allows for names to be past\n * expiration for a certain amount of time before they are released to the\n * public. The names will not function as normal, but the owner can renew\n * without others taking ownership of the name. At the time of writing, the\n * contract specified 30 days.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - An AptosConfig object containing the configuration settings.\n * @returns The expiration date in ISO 8601 format.\n * @group Implementation\n */\nasync function getANSExpirationDate(args: { aptosConfig: AptosConfig }): Promise<string> {\n  const { aptosConfig } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n\n  const [gracePeriodInSeconds] = await view<[number]>({\n    aptosConfig,\n    payload: {\n      function: `${routerAddress}::config::reregistration_grace_sec`,\n      functionArguments: [],\n    },\n  });\n\n  const gracePeriodInDays = gracePeriodInSeconds / 60 / 60 / 24;\n  const now = () => new Date();\n  return new Date(now().setDate(now().getDate() - gracePeriodInDays)).toISOString();\n}\n\n/**\n * Renews a domain for a specified duration. This function allows you to extend the registration of a domain for one year.\n *\n * @param args - The parameters required to renew the domain.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.sender - The account that is sending the renewal transaction.\n * @param args.name - The name of the domain to renew.\n * @param args.years - The number of years to renew the domain for. Currently, only 1 year renewals are supported. (optional, default is 1)\n * @param args.options - Additional options for generating the transaction. (optional)\n * @throws Error if the name contains a subdomain or if the years parameter is not equal to 1.\n * @group Implementation\n */\nexport async function renewDomain(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  name: string;\n  years?: 1;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, name, years = 1, options } = args;\n  const routerAddress = getRouterAddress(aptosConfig);\n  const renewalDuration = years * 31536000;\n  const { domainName, subdomainName } = isValidANSName(name);\n\n  if (subdomainName) {\n    throw new Error(\"Subdomains cannot be renewed\");\n  }\n\n  if (years !== 1) {\n    throw new Error(\"Currently, only 1 year renewals are supported\");\n  }\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: `${routerAddress}::router::renew_domain`,\n      functionArguments: [domainName, renewalDuration],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\n/**\n * The indexer returns ISO strings for expiration, however the contract works in\n * epoch milliseconds. This function converts the ISO string to epoch\n * milliseconds. In the future, if other properties need sanitization, this can\n * be extended.\n *\n * @param name - The ANS name response to sanitize.\n * @param name.expiration_timestamp - The expiration timestamp in ISO string format.\n * @group Implementation\n */\nfunction sanitizeANSName(name: GetANSNameResponse[0]): GetANSNameResponse[0] {\n  return {\n    ...name,\n    expiration_timestamp: new Date(name.expiration_timestamp).getTime(),\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"../account\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport {\n  RegisterNameParameters,\n  getExpiration,\n  getOwnerAddress,\n  registerName,\n  getPrimaryName,\n  setPrimaryName,\n  getTargetAddress,\n  setTargetAddress,\n  renewDomain,\n  getName,\n  getAccountDomains,\n  GetAccountDomainsArgs,\n  GetAccountSubdomainsArgs,\n  getAccountSubdomains,\n  getAccountNames,\n  GetAccountNamesArgs,\n  getDomainSubdomains,\n  GetDomainSubdomainsArgs,\n} from \"../internal/ans\";\nimport { GetANSNameResponse } from \"../types\";\nimport { InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\n\n/**\n * A class to handle all `ANS` operations.\n * @group ANS\n */\nexport class ANS {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., mainnet, testnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet to use for funding accounts.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for connecting to the Aptos testnet\n   *     const config = new AptosConfig({ network: Network.TESTNET });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Retrieve the owner address of a specified domain name or subdomain name from the contract.\n   *\n   * @param args - The arguments for retrieving the owner address.\n   * @param args.name - A string representing the name of the domain or subdomain to retrieve the owner address for.\n   *\n   * @returns AccountAddress if the name is owned, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the owner address of \"test.aptos\"\n   *   const owner = await aptos.getOwnerAddress({ name: \"test.aptos\" });\n   *   console.log(owner); // Logs the owner address or undefined if not owned\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getOwnerAddress(args: { name: string }): Promise<AccountAddress | undefined> {\n    return getOwnerAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the expiration time of a domain name or subdomain name from the contract.\n   *\n   * @param args - The arguments for retrieving the expiration.\n   * @param args.name - A string of the name to retrieve.\n   *\n   * @returns number as a unix timestamp in milliseconds.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the expiration time for the domain \"test.aptos\"\n   *   const exp = await aptos.getExpiration({ name: \"test.aptos\" });\n   *\n   *   // Log the expiration date\n   *   console.log(new Date(exp)); // Outputs the expiration date\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getExpiration(args: { name: string }): Promise<number | undefined> {\n    return getExpiration({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the target address of a domain or subdomain name, which indicates the address the name points to for use on-chain.\n   * Note that the target address can point to addresses that do not own the name.\n   *\n   * @param args - The arguments for retrieving the target address.\n   * @param args.name - A string representing the name, which can be a primary name, a subdomain, or a combination (e.g.,\n   * \"primary\", \"primary.apt\", \"secondary.primary\", \"secondary.primary.apt\").\n   *\n   * @returns AccountAddress if the name has a target, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the target address for the specified domain name\n   *   const targetAddr = await aptos.getTargetAddress({ name: \"test.aptos\" });\n   *\n   *   console.log(targetAddr); // Logs the target address, e.g., 0x123...\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getTargetAddress(args: { name: string }): Promise<AccountAddress | undefined> {\n    return getTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the target address of a domain or subdomain name, pointing it to a specified address for use on-chain.\n   * The target address can be different from the owner of the name.\n   *\n   * @param args - The arguments for setting the target address.\n   * @param args.sender - The account initiating the transaction.\n   * @param args.name - A string representing the domain or subdomain name (e.g., \"test.aptos\").\n   * @param args.address - The AccountAddressInput of the address to set the domain or subdomain to.\n   * @param args.options - Optional settings for generating the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Setting the target address for a domain name\n   *   const sender = Account.generate(); // replace with a real account\n   *   const address = \"0x1\"; // replace with a real account address\n   *\n   *   await aptos.setTargetAddress({\n   *     sender: sender,\n   *     name: \"test.aptos\",\n   *     address: address,\n   *   });\n   *\n   *   const targetAddress = await aptos.getTargetAddress({ name: \"test.aptos\" });\n   *   console.log(targetAddress); // Should log the address set for \"test.aptos\"\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async setTargetAddress(args: {\n    sender: Account;\n    name: string;\n    address: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setTargetAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieve the primary name for an account. An account can have multiple names, but only one primary name, which may not exist.\n   *\n   * @param args - The arguments for retrieving the primary name.\n   * @param args.address - An AccountAddressInput (address) of the account.\n   *\n   * @returns A string if the account has a primary name, undefined otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the primary name for the specified account address\n   *   const name = await aptos.getPrimaryName({ address: \"0x1\" }); // replace with a real account address\n   *   console.log(name);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getPrimaryName(args: { address: AccountAddressInput }): Promise<string | undefined> {\n    return getPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sets the primary name for the sender account, allowing them to designate a single primary name among potentially multiple\n   * names. An account may not have a primary name.\n   *\n   * @param args - The arguments for setting the primary name.\n   * @param args.sender - The sender account.\n   * @param args.name - A string representing the name to set as primary (e.g., \"test.aptos\").\n   * @param args.options - Optional transaction options.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Set the primary name for the sender account\n   *   const sender = Account.generate(); // replace with a real account\n   *   await aptos.setPrimaryName({ sender, name: \"test.aptos\" });\n   *\n   *   const primaryName = await aptos.getPrimaryName({ address: sender.accountAddress });\n   *   console.log(\"Primary Name:\", primaryName); // Should log: \"Primary Name: test.aptos\"\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async setPrimaryName(args: {\n    sender: Account;\n    name?: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return setPrimaryName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Registers a new name.\n   *\n   * This function allows you to register a domain or subdomain name with specific expiration policies and options.\n   *\n   * @param args.sender - The sender account.\n   * @param args.name - A string of the name to register. This can be inclusive or exclusive of the .apt suffix. Examples include:\n   * \"test\", \"test.apt\", \"test.aptos.apt\", etc.\n   * @param args.expiration  - An object with the expiration policy of the name.\n   * @param args.expiration.policy - 'domain' | 'subdomain:follow-domain' | 'subdomain:independent'.\n   * - domain: Years is required and the name will expire after the given number of years.\n   * - subdomain:follow-domain: The name will expire at the same time as the domain name.\n   * - subdomain:independent: The name will expire at the given date.\n   * @param args.expiration.expirationDate - An epoch number in milliseconds of the date when the subdomain will expire. Only\n   * applicable when the policy is set to 'subdomain:independent'.\n   * @param args.transferable  - Determines if the subdomain being minted is soul-bound. Applicable only to subdomains.\n   * @param args.targetAddress optional - The address the domain name will resolve to. If not provided, the sender's address will\n   * be used.\n   * @param args.toAddress optional - The address to send the domain name to. If not provided, the transaction will be sent to the\n   * router.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Registering a subdomain name assuming def.apt is already registered and belongs to the sender alice.\n   *   const txn = await aptos.registerName({\n   *     sender: \"0x1\", // replace with a real sender account\n   *     name: \"test.aptos.apt\",\n   *     expiration: {\n   *       policy: \"subdomain:independent\",\n   *       expirationDate: Date.now() + 30 * 24 * 60 * 60 * 1000, // expires in 30 days\n   *     },\n   *   });\n   *\n   *   console.log(\"Transaction:\", txn);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async registerName(args: Omit<RegisterNameParameters, \"aptosConfig\">): Promise<SimpleTransaction> {\n    return registerName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Renews a domain name for one year.\n   * If a domain name was minted with V1 of the contract, it will automatically be upgraded to V2 via this transaction.\n   *\n   * @param args - The arguments for renewing the domain.\n   * @param args.sender - The sender account, which must be the domain owner.\n   * @param args.name - A string representing the domain to renew. Subdomains cannot be renewed.\n   * @param args.years - The number of years to renew the name. Currently, only one year is permitted.\n   * @param args.options - Optional transaction options.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Renew the domain \"test\" for one year\n   *   const transaction = await aptos.renewDomain({\n   *     sender: Account.generate(), // replace with a real account\n   *     name: \"test\"\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async renewDomain(args: {\n    sender: Account;\n    name: string;\n    years?: 1;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return renewDomain({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a single name from the indexer based on the provided name argument.\n   *\n   * @param args - The arguments for retrieving the name.\n   * @param args.name - A string of the name to retrieve, e.g. \"test.aptos.apt\" or \"test.apt\" or \"test\".\n   *                    Can be inclusive or exclusive of the .apt suffix and can be a subdomain.\n   *\n   * @returns A promise of an ANSName or undefined if the name is not active.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Fetching a name from the indexer\n   *     const name = await aptos.getName({ name: \"test.aptos\" }); // replace with a real name\n   *     console.log(name);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getName(args: { name: string }): Promise<GetANSNameResponse[0] | undefined> {\n    return getName({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all names for an account, including both top-level domains and subdomains.\n   *\n   * @param args - The arguments for fetching account names.\n   * @param args.accountAddress - An AccountAddressInput of the address to retrieve names for.\n   * @param args.options - Optional parameters for fetching names.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, a number of the names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch account names for a specific address\n   *   const accountNames = await aptos.getAccountNames({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify how many names to fetch\n   *       orderBy: \"name\", // specify the order by which to sort the names\n   *     },\n   *   });\n   *\n   *   console.log(accountNames);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountNames(args: GetAccountNamesArgs): Promise<GetANSNameResponse> {\n    return getAccountNames({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all top-level domain names for a specified account.\n   *\n   * @param args - The arguments for retrieving account domains.\n   * @param args.accountAddress - An AccountAddressInput of the address to retrieve domain names for.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, a number of the names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching all top-level domain names for a specific account\n   *   const domains = await aptos.getAccountDomains({\n   *     accountAddress: \"0x1\", // replace with a real account address\n   *     options: {\n   *       limit: 10, // specify the number of names to fetch\n   *       offset: 0, // specify the offset for pagination\n   *       orderBy: \"created_at\", // specify the order by which to sort the names\n   *       where: {\n   *         // additional filters can be specified here\n   *       },\n   *     },\n   *   });\n   *\n   *   console.log(domains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountDomains(args: GetAccountDomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountDomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomain names for a specified account.\n   *\n   * @param args - The arguments for retrieving subdomains.\n   * @param args.accountAddress - The address to retrieve subdomain names for.\n   * @param args.options - Optional parameters for fetching subdomains.\n   * @param args.options.offset - The offset to start from when fetching names.\n   * @param args.options.limit - The number of names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise of an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     // Fetching subdomain names for a specific account\n   *     const subdomains = await aptos.getAccountSubdomains({\n   *         accountAddress: \"0x1\", // replace with a real account address\n   *         options: {\n   *             limit: 10, // specify the number of subdomains to fetch\n   *             offset: 0, // specify the offset for pagination\n   *             orderBy: \"name\", // specify the order by which to sort the names\n   *         },\n   *     });\n   *\n   *     console.log(subdomains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getAccountSubdomains(args: GetAccountSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getAccountSubdomains({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches all subdomain names for a given domain, excluding the domain itself.\n   *\n   * @param args - The arguments for fetching subdomains.\n   * @param args.domain - A string of the domain name, e.g., \"test.apt\" or \"test\" (without the suffix of .apt).\n   * @param args.options - Optional parameters for fetching subdomains.\n   * @param args.options.offset - Optional, the offset to start from when fetching names.\n   * @param args.options.limit - Optional, the number of names to fetch per request.\n   * @param args.options.orderBy - The order to sort the names by.\n   * @param args.options.where - Additional filters to apply to the query.\n   *\n   * @returns A promise that resolves to an array of ANSName.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching subdomains for a specific domain\n   *   const subdomains = await aptos.getDomainSubdomains({\n   *     domain: \"test\", // replace with your domain\n   *     options: {\n   *       limit: 10, // specify the number of subdomains to fetch\n   *       offset: 0, // specify the starting point for fetching\n   *       orderBy: \"name\", // specify the order by which to sort the results\n   *     },\n   *   });\n   *\n   *   console.log(subdomains);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group ANS\n   */\n  async getDomainSubdomains(args: GetDomainSubdomainsArgs): Promise<GetANSNameResponse> {\n    return getDomainSubdomains({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/staking}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * staking namespace and without having a dependency cycle error.\n * @group Implementation\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { GetDelegatedStakingActivitiesQuery, GetNumberOfDelegatorsQuery } from \"../types/generated/operations\";\nimport { GetDelegatedStakingActivities, GetNumberOfDelegators } from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves the number of active delegators for a specified pool address.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.poolAddress - The address of the pool for which to retrieve the number of delegators.\n * @returns The number of active delegators for the specified pool address.\n * @group Implementation\n */\nexport async function getNumberOfDelegators(args: {\n  aptosConfig: AptosConfig;\n  poolAddress: AccountAddressInput;\n}): Promise<number> {\n  const { aptosConfig, poolAddress } = args;\n  const address = AccountAddress.from(poolAddress).toStringLong();\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { where_condition: { pool_address: { _eq: address } } },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({ aptosConfig, query });\n\n  // commonjs (aka cjs) doesn't handle Nullish Coalescing for some reason\n  // might be because of how ts infer the graphql generated scheme type\n  return data.num_active_delegator_per_pool[0] ? data.num_active_delegator_per_pool[0].num_active_delegator : 0;\n}\n\n/**\n * Retrieves the number of active delegators for all pools.\n *\n * @param args - The arguments for the function.\n * @param args.aptosConfig - The configuration for the Aptos client.\n * @param [args.options] - Optional parameters for ordering the results.\n * @param args.options.orderBy - Specifies the order in which to return the results.\n * @returns The number of active delegators per pool.\n * @group Implementation\n */\nexport async function getNumberOfDelegatorsForAllPools(args: {\n  aptosConfig: AptosConfig;\n  options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n}): Promise<GetNumberOfDelegatorsResponse> {\n  const { aptosConfig, options } = args;\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { order_by: options?.orderBy },\n  };\n  const data = await queryIndexer<GetNumberOfDelegatorsQuery>({\n    aptosConfig,\n    query,\n  });\n  return data.num_active_delegator_per_pool;\n}\n\n/**\n * Retrieves the delegated staking activities for a specified delegator and pool.\n *\n * @param args - The parameters for the query.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.delegatorAddress - The address of the delegator whose activities are being queried.\n * @param args.poolAddress - The address of the pool associated with the delegated staking activities.\n * @returns The delegated staking activities for the specified delegator and pool.\n * @group Implementation\n */\nexport async function getDelegatedStakingActivities(args: {\n  aptosConfig: AptosConfig;\n  delegatorAddress: AccountAddressInput;\n  poolAddress: AccountAddressInput;\n}): Promise<GetDelegatedStakingActivitiesResponse> {\n  const { aptosConfig, delegatorAddress, poolAddress } = args;\n  const query = {\n    query: GetDelegatedStakingActivities,\n    variables: {\n      delegatorAddress: AccountAddress.from(delegatorAddress).toStringLong(),\n      poolAddress: AccountAddress.from(poolAddress).toStringLong(),\n    },\n  };\n  const data = await queryIndexer<GetDelegatedStakingActivitiesQuery>({ aptosConfig, query });\n  return data.delegated_staking_activities;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getDelegatedStakingActivities,\n  getNumberOfDelegators,\n  getNumberOfDelegatorsForAllPools,\n} from \"../internal/staking\";\nimport { AnyNumber, GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, OrderByArg } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `Staking` related queries on Aptos.\n * @group Staking\n */\nexport class Staking {\n  /**\n   * Creates an instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Queries the current number of delegators in a specified pool. Throws an error if the pool is not found.\n   *\n   * @param args - The parameters for the query.\n   * @param args.poolAddress - The address of the pool to query.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The number of delegators for the given pool.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get the number of delegators for a specific pool\n   *   const delegators = await aptos.getNumberOfDelegators({ poolAddress: \"0x1\" }); // replace with a real pool address\n   *   console.log(`Number of delegators: ${delegators}`);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getNumberOfDelegators(args: {\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<number> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegators({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Retrieves the current number of delegators across all pools.\n   *\n   * @param args Optional parameters for the query.\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to before querying.\n   * @param args.options Optional ordering options for the response.\n   * @returns GetNumberOfDelegatorsForAllPoolsResponse response type containing the number of delegators per pool.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Retrieve the number of delegators for all pools\n   *   const delegators = await aptos.getNumberOfDelegatorsForAllPools();\n   *   console.log(delegators);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getNumberOfDelegatorsForAllPools(args?: {\n    minimumLedgerVersion?: AnyNumber;\n    options?: OrderByArg<GetNumberOfDelegatorsResponse[0]>;\n  }): Promise<GetNumberOfDelegatorsResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getNumberOfDelegatorsForAllPools({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries delegated staking activities for a specific delegator and pool.\n   *\n   * @param args - The arguments for querying delegated staking activities.\n   * @param args.delegatorAddress - The address of the delegator.\n   * @param args.poolAddress - The address of the staking pool.\n   * @param args.minimumLedgerVersion - Optional ledger version to sync up to before querying.\n   * @returns The response containing delegated staking activities.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Get delegated staking activities for a specific delegator and pool\n   *   const activities = await aptos.getDelegatedStakingActivities({\n   *     delegatorAddress: \"0x1\", // replace with a real delegator address\n   *     poolAddress: \"0x2\", // replace with a real pool address\n   *     minimumLedgerVersion: 1, // specify your own if needed\n   *   });\n   *\n   *   console.log(activities);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Staking\n   */\n  async getDelegatedStakingActivities(args: {\n    delegatorAddress: AccountAddressInput;\n    poolAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetDelegatedStakingActivitiesResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args?.minimumLedgerVersion,\n      processorType: ProcessorType.STAKE_PROCESSOR,\n    });\n    return getDelegatedStakingActivities({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, AccountAddressInput } from \"../../core\";\nimport { generateTransaction } from \"../../internal/transactionSubmission\";\nimport {\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionOptions,\n  AptosScriptComposer,\n  TransactionPayloadScript,\n  generateRawTransaction,\n} from \"../../transactions\";\nimport { MultiAgentTransaction } from \"../../transactions/instances/multiAgentTransaction\";\nimport { SimpleTransaction } from \"../../transactions/instances/simpleTransaction\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { Deserializer } from \"../../bcs\";\n\n/**\n * A class to handle all `Build` transaction operations.\n * @group Implementation\n */\nexport class Build {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.account - The account details for authentication.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network\n   *         nodeUrl: \"https://testnet.aptos.dev\", // specify the node URL\n   *     });\n   *\n   *     // Initialize the Aptos client\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Build a simple transaction.\n   *\n   * This function allows you to create a transaction with specified sender and data.\n   *\n   * @param args.sender - The sender account address.\n   * @param args.data - The transaction data.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a simple transaction\n   *   const transaction = await aptos.transaction.simple({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [\"0x2\", 100], // replace with a real destination account address\n   *     },\n   *     options: {\n   *       gasUnitPrice: 100, // specify your own gas unit price if needed\n   *       maxGasAmount: 1000, // specify your own max gas amount if needed\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  async simple(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<SimpleTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Build a transaction from a series of Move calls.\n   *\n   * This function allows you to create a transaction with a list of Move calls.\n   *\n   * Right now we only tested this logic with single signer and we will add support\n   * for mutli agent transactions if needed.\n   *\n   * @param args.sender - The sender account address.\n   * @param args.builder - The closure to construct the list of calls.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns SimpleTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a transaction from a chained series of Move calls.\n   *   const transaction = await aptos.transaction.build.scriptComposer({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     builder: builder: async (builder) => {\n   *       const coin = await builder.addBatchedCalls({\n   *          function: \"0x1::coin::withdraw\",\n   *          functionArguments: [CallArgument.new_signer(0), 1],\n   *          typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *        });\n   *\n   *        // Pass the returned value from the first function call to the second call\n   *        const fungibleAsset = await builder.addBatchedCalls({\n   *          function: \"0x1::coin::coin_to_fungible_asset\",\n   *          functionArguments: [coin[0]],\n   *          typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *        });\n   *\n   *        await builder.addBatchedCalls({\n   *          function: \"0x1::primary_fungible_store::deposit\",\n   *          functionArguments: [singleSignerED25519SenderAccount.accountAddress, fungibleAsset[0]],\n   *          typeArguments: [],\n   *        });\n   *        return builder;\n   *     },\n   *     options: {\n   *       gasUnitPrice: 100, // specify your own gas unit price if needed\n   *       maxGasAmount: 1000, // specify your own max gas amount if needed\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   */\n  async scriptComposer(args: {\n    sender: AccountAddressInput;\n    builder: (builder: AptosScriptComposer) => Promise<AptosScriptComposer>;\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<SimpleTransaction> {\n    const composer = new AptosScriptComposer(this.config);\n    await composer.init();\n    const builder = await args.builder(composer);\n    const bytes = builder.build();\n    const rawTxn = await generateRawTransaction({\n      aptosConfig: this.config,\n      payload: TransactionPayloadScript.load(new Deserializer(bytes)),\n      ...args,\n    });\n    return new SimpleTransaction(rawTxn, args.withFeePayer === true ? AccountAddress.ZERO : undefined);\n  }\n\n  /**\n   * Build a multi-agent transaction that allows multiple signers to authorize a transaction.\n   *\n   * @param args - The parameters for creating the multi-agent transaction.\n   * @param args.sender - The sender account address.\n   * @param args.data - The transaction data.\n   * @param args.secondarySignerAddresses - An array of the secondary signers' account addresses.\n   * @param args.options - Optional transaction configurations.\n   * @param args.withFeePayer - Whether there is a fee payer for the transaction.\n   *\n   * @returns MultiAgentTransaction\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Build a multi-agent transaction\n   *   const transaction = await aptos.multiAgent({\n   *     sender: \"0x1\", // replace with a real sender account address\n   *     data: {\n   *       // Transaction data structure\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [\"0x2\", 100], // replace with a real destination account address and amount\n   *     },\n   *     secondarySignerAddresses: [\"0x3\", \"0x4\"], // replace with real secondary signer addresses\n   *     options: {\n   *       // Optional transaction configurations\n   *       maxGasAmount: \"1000\",\n   *       gasUnitPrice: \"1\",\n   *     },\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  async multiAgent(args: {\n    sender: AccountAddressInput;\n    data: InputGenerateTransactionPayloadData;\n    secondarySignerAddresses: AccountAddressInput[];\n    options?: InputGenerateTransactionOptions;\n    withFeePayer?: boolean;\n  }): Promise<MultiAgentTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PublicKey } from \"../../core\";\nimport { simulateTransaction } from \"../../internal/transactionSubmission\";\nimport { AnyRawTransaction, InputSimulateTransactionOptions } from \"../../transactions\";\nimport { UserTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSimulation } from \"./helpers\";\n\n/**\n * A class to handle all `Simulate` transaction operations.\n * @group Implementation\n */\nexport class Simulate {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Simulates a transaction based on the provided parameters and returns the result.\n   * This function helps you understand the outcome of a transaction before executing it on the blockchain.\n   *\n   * @param args - The parameters for simulating the transaction.\n   * @param args.signerPublicKey - The public key of the signer for the transaction (optional).\n   * @param args.transaction - The raw transaction data to simulate.\n   * @param args.feePayerPublicKey - The public key of the fee payer (optional).\n   * @param args.options - Additional options for simulating the transaction (optional).\n   *\n   * @example\n   * ```typescript\n   * import {\n   *     Account,\n   *     Aptos,\n   *     AptosConfig,\n   *     Network,\n   * } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function example() {\n   *     let sender = Account.generate();\n   *     let receiver = Account.generate();\n   *\n   *     // 0. Set up the client and test accounts\n   *     const config = new AptosConfig({ network: Network.DEVNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     await aptos.fundAccount({\n   *         accountAddress: sender.accountAddress,\n   *         amount: 100_000_000,\n   *     });\n   *\n   *     // 1. Build the transaction to preview the impact of it\n   *     const transaction = await aptos.transaction.build.simple({\n   *         sender: sender.accountAddress,\n   *         data: {\n   *             // All transactions on Aptos are implemented via smart contracts.\n   *             function: \"0x1::aptos_account::transfer\",\n   *             functionArguments: [receiver.accountAddress, 100],\n   *         },\n   *     });\n   *\n   *     // 2. Simulate to see what would happen if we execute this transaction\n   *     const [userTransactionResponse] = await aptos.transaction.simulate.simple({\n   *         signerPublicKey: sender.publicKey,\n   *         transaction,\n   *     });\n   *     console.log(userTransactionResponse);\n   *\n   *     // If the fee looks ok, continue to signing!\n   *     // ...\n   * }\n   *\n   * example();\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSimulation\n  async simple(args: {\n    signerPublicKey?: PublicKey;\n    transaction: AnyRawTransaction;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Simulates a multi-agent transaction by generating a signed transaction and posting it to the Aptos full node.\n   * This function helps in understanding the outcome of a transaction involving multiple signers before it is executed.\n   *\n   * @param args - The parameters for simulating the transaction.\n   * @param args.signerPublicKey - The public key of the primary signer (optional).\n   * @param args.transaction - The raw transaction to be simulated.\n   * @param args.secondarySignersPublicKeys - An array of public keys for secondary signers (optional).\n   *        Each element of the array can be optional, allowing the corresponding key check to be skipped.\n   * @param args.feePayerPublicKey - The public key of the fee payer (optional).\n   * @param args.options - Options for simulating the transaction (optional).\n   *\n   * @example\n   * ```typescript\n   * import {\n   *     Account,\n   *     Aptos,\n   *     AptosConfig,\n   *     Network,\n   * } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function example() {\n   *     let sender1 = Account.generate();\n   *     let sender2 = Account.generate();\n   *     let receiver = Account.generate();\n   *\n   *     // 0. Set up the client and test accounts\n   *     const config = new AptosConfig({ network: Network.DEVNET });\n   *     const aptos = new Aptos(config);\n   *\n   *     await aptos.fundAccount({\n   *         accountAddress: sender.accountAddress,\n   *         amount: 100_000_000,\n   *     });\n   *\n   *     // 1. Build\n   *     console.log(\"\\n=== 1. Building the transaction ===\\n\");\n   *     const transaction = await aptos.transaction.build.multiAgent({\n   *     sender: sender1.accountAddress,\n   *     secondarySignerAddresses: [sender2.accountAddress],\n   *     data: {\n   *        // REPLACE WITH YOUR MULTI-AGENT FUNCTION HERE\n   *        function:\n   *          \"<REPLACE WITH YOUR MULTI AGENT MOVE ENTRY FUNCTION> (Syntax {address}::{module}::{function})\",\n   *          functionArguments: [],\n   *        },\n   *      });\n   *      console.log(\"Transaction:\", transaction);\n   *\n   *      // 2. Simulate (Optional)\n   *      console.log(\"\\n === 2. Simulating Response (Optional) === \\n\");\n   *      const [userTransactionResponse] = await aptos.transaction.simulate.multiAgent(\n   *        {\n   *          signerPublicKey: sender1.publicKey,\n   *          secondarySignersPublicKeys: [sender2.publicKey],\n   *          transaction,\n   *        },\n   *      );\n   *      console.log(userTransactionResponse);\n   *\n   *      // If the fee looks ok, continue to signing!\n   *      // ...\n   * }\n   *\n   * example();\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSimulation\n  async multiAgent(args: {\n    signerPublicKey?: PublicKey;\n    transaction: AnyRawTransaction;\n    secondarySignersPublicKeys?: Array<PublicKey | undefined>;\n    feePayerPublicKey?: PublicKey;\n    options?: InputSimulateTransactionOptions;\n  }): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { submitTransaction } from \"../../internal/transactionSubmission\";\nimport { AccountAuthenticator, AnyRawTransaction } from \"../../transactions\";\nimport { PendingTransactionResponse } from \"../../types\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { ValidateFeePayerDataOnSubmission } from \"./helpers\";\n\n/**\n * A class to handle all `Submit` transaction operations.\n * @group Implementation\n */\nexport class Submit {\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet for obtaining test tokens.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // Use the TESTNET for testing\n   *         nodeUrl: \"https://testnet.aptos.dev\", // Specify the node URL\n   *         faucetUrl: \"https://faucet.testnet.aptos.dev\" // Specify the faucet URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Submits a transaction to the Aptos blockchain using the provided transaction details and authenticators.\n   * This function allows you to execute transactions securely by specifying the sender and optional fee payer authenticators.\n   *\n   * @param args - The arguments for submitting the transaction.\n   * @param args.transaction - The raw transaction data to be submitted.\n   * @param args.senderAuthenticator - The authenticator for the sender's account.\n   * @param [args.feePayerAuthenticator] - The optional authenticator for the fee payer's account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new sender account\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [Account.generate().accountAddress, 100], // Replace with a real destination account\n   *     },\n   *   });\n   *\n   *   // Submit the transaction\n   *   const response = await aptos.simple({\n   *     transaction,\n   *     senderAuthenticator: sender.getAuthenticator(), // Use the sender's authenticator\n   *   });\n   *\n   *   console.log(\"Transaction submitted:\", response);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSubmission\n  async simple(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Submits a multi-agent transaction to the Aptos network, allowing multiple signers to authorize the transaction.\n   * This function is useful for scenarios where a transaction requires approval from multiple accounts.\n   *\n   * @param args - The parameters for the multi-agent transaction.\n   * @param args.transaction - The raw transaction to be submitted.\n   * @param args.senderAuthenticator - The authenticator for the sender account.\n   * @param args.additionalSignersAuthenticators - An array of authenticators for additional signers.\n   * @param [args.feePayerAuthenticator] - An optional authenticator for the fee payer account.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new sender account\n   *   const additionalSigner1 = Account.generate(); // Generate an additional signer account\n   *   const additionalSigner2 = Account.generate(); // Generate another additional signer account\n   *\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [additionalSigner1.accountAddress, 100],\n   *     },\n   *   });\n   *\n   *   const response = await aptos.multiAgent({\n   *     transaction,\n   *     senderAuthenticator: sender.getAuthenticator(), // Use the sender's authenticator\n   *     additionalSignersAuthenticators: [\n   *       additionalSigner1.getAuthenticator(), // Use the first additional signer's authenticator\n   *       additionalSigner2.getAuthenticator(), // Use the second additional signer's authenticator\n   *     ],\n   *   });\n   *\n   *   console.log(response); // Log the response from the transaction submission\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  @ValidateFeePayerDataOnSubmission\n  async multiAgent(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    additionalSignersAuthenticators: Array<AccountAuthenticator>;\n    feePayerAuthenticator?: AccountAuthenticator;\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","import EventEmitter from \"eventemitter3\";\nimport { TransactionWorkerEvents, TransactionWorker, TransactionWorkerEventsEnum } from \"../../transactions/management\";\nimport { InputGenerateTransactionPayloadData, InputGenerateTransactionOptions } from \"../../transactions\";\nimport { AptosConfig } from \"../aptosConfig\";\nimport { Account } from \"../../account\";\n\nexport class TransactionManagement extends EventEmitter<TransactionWorkerEvents> {\n  account!: Account;\n\n  transactionWorker!: TransactionWorker;\n\n  readonly config: AptosConfig;\n\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration settings.\n   * This allows you to interact with the Aptos blockchain using the specified network and options.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., TESTNET, MAINNET).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.account - Optional account settings for authentication.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // specify the network to use\n   *         nodeUrl: \"https://testnet.aptos.dev\" // replace with your node URL\n   *     });\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  constructor(config: AptosConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Initializes the transaction worker using the provided sender account and begins listening for events.\n   * This function is essential for setting up the transaction processing environment.\n   *\n   * @param args - The arguments for starting the transaction worker.\n   * @param args.sender - The sender account to sign and submit the transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const sender = Account.generate(); // Generate a new account for sending transactions\n   *\n   *     // Start the transaction worker with the sender account\n   *     aptos.start({ sender });\n   *\n   *     console.log(\"Transaction worker started with sender:\", sender.accountAddress);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private start(args: { sender: Account }): void {\n    const { sender } = args;\n    this.account = sender;\n    this.transactionWorker = new TransactionWorker(this.config, sender);\n\n    this.transactionWorker.start();\n    this.registerToEvents();\n  }\n\n  /**\n   * Pushes transaction data to the transaction worker for processing.\n   *\n   * @param args.data An array of transaction payloads to be processed.\n   * @param args.options Optional. Transaction generation configurations (excluding accountSequenceNumber).\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Prepare transaction payloads\n   *   const payloads = [\n   *      {}, // Build your first transaction payload\n   *      {}, // Build your second transaction payload\n   *   ];\n   *\n   *   // Push transaction data to the worker\n   *   aptos.push({\n   *     data: payloads,\n   *     {}, // Specify options as needed\n   *   });\n   *\n   *   console.log(\"Transaction data pushed successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private push(args: {\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    const { data, options } = args;\n\n    for (const d of data) {\n      this.transactionWorker.push(d, options);\n    }\n  }\n\n  /**\n   * Starts listening to transaction worker events, allowing the application to respond to transaction status changes.\n   * This function enables the application to handle events such as transaction sent, execution success, or failure.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Register to listen for transaction events\n   *   aptos.registerToEvents();\n   *\n   *   // You can send a transaction here to see the events in action\n   *   const sender = Account.generate(); // replace with a real account\n   *   const destination = Account.generate(); // replace with a real account\n   *\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [destination.accountAddress, 100],\n   *     },\n   *   });\n   *\n   *   await aptos.transaction.send(transaction);\n   *\n   *   console.log(\"Transaction sent and events registered.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Implementation\n   */\n  private registerToEvents() {\n    // TODO - Should we ask events to listen to this as an input?\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSent, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSent, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionSendFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecuted, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecuted, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.TransactionExecutionFailed, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, data);\n    });\n    this.transactionWorker.on(TransactionWorkerEventsEnum.ExecutionFinish, async (data) => {\n      this.emit(TransactionWorkerEventsEnum.ExecutionFinish, data);\n    });\n  }\n\n  /**\n   * Send batch transactions for a single account.\n   *\n   * This function uses a transaction worker that receives payloads to be processed\n   * and submitted to chain.\n   * Note that this process is best for submitting multiple transactions that\n   * don't rely on each other, i.e. batch funds, batch token mints, etc.\n   *\n   * If any worker failure, the functions throws an error.\n   *\n   * @param args.sender The sender account to sign and submit the transaction\n   * @param args.data An array of transaction payloads\n   * @param args.options optional. Transaction generation configurations (excluding accountSequenceNumber)\n   *\n   * @return void. Throws if any error\n   * @group Implementation\n   */\n  forSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): void {\n    try {\n      const { sender, data, options } = args;\n      this.start({ sender });\n\n      this.push({ data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n}\n","/**\n * A wrapper that handles and manages an account sequence number.\n *\n * Submit up to `maximumInFlight` transactions per account in parallel with a timeout of `sleepTime`\n * If local assumes `maximumInFlight` are in flight, determine the actual committed state from the network\n * If there are less than `maximumInFlight` due to some being committed, adjust the window\n * If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating\n * If ever waiting more than `maxWaitTime` restart the sequence number to the current on-chain state\n *\n * Assumptions:\n * Accounts are expected to be managed by a single AccountSequenceNumber and not used otherwise.\n * They are initialized to the current on-chain state, so if there are already transactions in\n * flight, they may take some time to reset.\n * Accounts are automatically initialized if not explicitly\n *\n * Notes:\n * This is co-routine safe, that is many async tasks can be reading from this concurrently.\n * The state of an account cannot be used across multiple AccountSequenceNumber services.\n * The synchronize method will create a barrier that prevents additional nextSequenceNumber\n * calls until it is complete.\n * This only manages the distribution of sequence numbers it does not help handle transaction\n * failures.\n * If a transaction fails, you should call synchronize and wait for timeouts.\n * @group Implementation\n * @category Transactions\n */\n\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../account\";\nimport { getInfo } from \"../../internal/account\";\nimport { nowInSeconds, sleep } from \"../../utils/helpers\";\n\n/**\n * Represents an account's sequence number management for transaction handling on the Aptos blockchain.\n * This class provides methods to retrieve the next available sequence number, synchronize with the on-chain sequence number,\n * and manage local sequence numbers while ensuring thread safety.\n *\n * @param aptosConfig - The configuration settings for Aptos.\n * @param account - The account associated with the sequence number.\n * @param maxWaitTime - The maximum time to wait for a transaction to commit.\n * @param maximumInFlight - The maximum number of transactions that can be in flight at once.\n * @param sleepTime - The time to wait before retrying to get the sequence number.\n * @group Implementation\n * @category Transactions\n */\nexport class AccountSequenceNumber {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // sequence number on chain\n  // TODO: Change to Uncommitted\n  lastUncommintedNumber: bigint | null = null;\n\n  // local sequence number\n  currentNumber: bigint | null = null;\n\n  /**\n   * We want to guarantee that we preserve ordering of workers to requests.\n   *\n   * `lock` is used to try to prevent multiple coroutines from accessing a shared resource at the same time,\n   * which can result in race conditions and data inconsistency.\n   * This code actually doesn't do it though, since we aren't giving out a slot, it is still somewhat a race condition.\n   *\n   * The ideal solution is likely that each thread grabs the next number from an incremental integer.\n   * When they complete, they increment that number and that entity is able to enter the `lock`.\n   * That would guarantee ordering.\n   * @group Implementation\n   * @category Transactions\n   */\n  lock = false;\n\n  maxWaitTime: number;\n\n  maximumInFlight: number;\n\n  sleepTime: number;\n\n  /**\n   * Creates an instance of the class with the specified configuration and account details.\n   * This constructor initializes the necessary parameters for managing Aptos transactions.\n   *\n   * @param aptosConfig - The configuration settings for Aptos.\n   * @param account - The account associated with the Aptos transactions.\n   * @param maxWaitTime - The maximum time to wait for a transaction to be processed, in milliseconds.\n   * @param maximumInFlight - The maximum number of transactions that can be in flight at the same time.\n   * @param sleepTime - The time to sleep between transaction checks, in milliseconds.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number,\n    maximumInFlight: number,\n    sleepTime: number,\n  ) {\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.maxWaitTime = maxWaitTime;\n    this.maximumInFlight = maximumInFlight;\n    this.sleepTime = sleepTime;\n  }\n\n  /**\n   * Returns the next available sequence number for this account.\n   * This function ensures that the sequence number is updated and synchronized, handling potential delays in transaction commits.\n   *\n   * @returns {BigInt} The next available sequence number.\n   * @group Implementation\n   * @category Transactions\n   */\n  async nextSequenceNumber(): Promise<bigint | null> {\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n    let nextNumber = BigInt(0);\n    try {\n      if (this.lastUncommintedNumber === null || this.currentNumber === null) {\n        await this.initialize();\n      }\n\n      if (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n        await this.update();\n\n        const startTime = nowInSeconds();\n        while (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n          await sleep(this.sleepTime);\n          if (nowInSeconds() - startTime > this.maxWaitTime) {\n            /* eslint-disable no-console */\n            console.warn(\n              `Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`,\n            );\n            await this.initialize();\n          } else {\n            await this.update();\n          }\n        }\n      }\n      nextNumber = this.currentNumber!;\n      this.currentNumber! += BigInt(1);\n    } catch (e) {\n      console.error(\"error in getting next sequence number for this account\", e);\n    } finally {\n      this.lock = false;\n    }\n    return nextNumber;\n  }\n\n  /**\n   * Initializes this account with the sequence number on chain.\n   *\n   * @returns {Promise<void>} A promise that resolves when the account has been initialized.\n   *\n   * @throws {Error} Throws an error if the account information cannot be retrieved.\n   * @group Implementation\n   * @category Transactions\n   */\n  async initialize(): Promise<void> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.currentNumber = BigInt(sequenceNumber);\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n  }\n\n  /**\n   * Updates this account's sequence number with the one on-chain.\n   *\n   * @returns The on-chain sequence number for this account.\n   * @group Implementation\n   * @category Transactions\n   */\n  async update(): Promise<bigint> {\n    const { sequence_number: sequenceNumber } = await getInfo({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress,\n    });\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n    return this.lastUncommintedNumber;\n  }\n\n  /**\n   * Synchronizes the local sequence number with the sequence number on-chain for the specified account.\n   * This function polls the network until all submitted transactions have either been committed or until the maximum wait time has elapsed.\n   *\n   * @throws {Error} Throws an error if there is an issue synchronizing the account sequence number with the one on-chain.\n   * @group Implementation\n   * @category Transactions\n   */\n  async synchronize(): Promise<void> {\n    if (this.lastUncommintedNumber === this.currentNumber) return;\n\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n\n    try {\n      await this.update();\n      const startTime = nowInSeconds();\n      while (this.lastUncommintedNumber !== this.currentNumber) {\n        if (nowInSeconds() - startTime > this.maxWaitTime) {\n          /* eslint-disable no-console */\n          console.warn(\n            `Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`,\n          );\n          await this.initialize();\n        } else {\n          await sleep(this.sleepTime);\n          await this.update();\n        }\n      }\n    } catch (e) {\n      console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n    } finally {\n      this.lock = false;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport EventEmitter from \"eventemitter3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Account } from \"../../account\";\nimport { waitForTransaction } from \"../../internal/transaction\";\nimport { generateTransaction, signAndSubmitTransaction } from \"../../internal/transactionSubmission\";\nimport { PendingTransactionResponse, TransactionResponse } from \"../../types\";\nimport { InputGenerateTransactionOptions, InputGenerateTransactionPayloadData } from \"../types\";\nimport { AccountSequenceNumber } from \"./accountSequenceNumber\";\nimport { AsyncQueue, AsyncQueueCancelledError } from \"./asyncQueue\";\nimport { SimpleTransaction } from \"../instances/simpleTransaction\";\n\n/**\n * @group Implementation\n * @category Transactions\n */\nexport const promiseFulfilledStatus = \"fulfilled\";\n\n/**\n * Events emitted by the transaction worker during its operation, allowing the dapp to respond to various transaction states.\n * @group Implementation\n * @category Transactions\n */\nexport enum TransactionWorkerEventsEnum {\n  // fired after a transaction gets sent to the chain\n  TransactionSent = \"transactionSent\",\n  // fired if there is an error sending the transaction to the chain\n  TransactionSendFailed = \"transactionSendFailed\",\n  // fired when a single transaction has executed successfully\n  TransactionExecuted = \"transactionExecuted\",\n  // fired if a single transaction fails in execution\n  TransactionExecutionFailed = \"transactionExecutionFailed\",\n  // fired when the worker has finished its job / when the queue has been emptied\n  ExecutionFinish = \"executionFinish\",\n}\n\n/**\n * Defines the events emitted by the transaction worker during various stages of transaction processing. *\n * @group Implementation\n * @category Transactions\n */\nexport interface TransactionWorkerEvents {\n  transactionSent: (data: SuccessEventData) => void;\n  transactionSendFailed: (data: FailureEventData) => void;\n  transactionExecuted: (data: SuccessEventData) => void;\n  transactionExecutionFailed: (data: FailureEventData) => void;\n  executionFinish: (data: ExecutionFinishEventData) => void;\n}\n\n/**\n * The payload for when the worker has finished its job.\n * @group Implementation\n * @category Transactions\n */\nexport type ExecutionFinishEventData = {\n  message: string;\n};\n\n/**\n * The payload for a success event.\n * @group Implementation\n * @category Transactions\n */\nexport type SuccessEventData = {\n  message: string;\n  transactionHash: string;\n};\n\n/**\n * The payload for a failure event.\n * @group Implementation\n * @category Transactions\n */\nexport type FailureEventData = {\n  message: string;\n  error: string;\n};\n\n/**\n * TransactionWorker provides a simple framework for receiving payloads to be processed.\n *\n * Once one `start()` the process and pushes a new transaction, the worker acquires\n * the current account's next sequence number (by using the AccountSequenceNumber class),\n * generates a signed transaction and pushes an async submission process into the `outstandingTransactions` queue.\n * At the same time, the worker processes transactions by reading the `outstandingTransactions` queue\n * and submits the next transaction to chain, it\n * 1) waits for resolution of the submission process or get pre-execution validation error\n * and 2) waits for the resolution of the execution process or get an execution error.\n * The worker fires events for any submission and/or execution success and/or failure.\n * @group Implementation\n * @category Transactions\n */\nexport class TransactionWorker extends EventEmitter<TransactionWorkerEvents> {\n  readonly aptosConfig: AptosConfig;\n\n  readonly account: Account;\n\n  // current account sequence number\n  // TODO: Rename Sequnce -> Sequence\n  readonly accountSequnceNumber: AccountSequenceNumber;\n\n  readonly taskQueue: AsyncQueue<() => Promise<void>> = new AsyncQueue<() => Promise<void>>();\n\n  // process has started\n  started: boolean;\n\n  /**\n   * transactions payloads waiting to be generated and signed\n   *\n   * TODO support entry function payload from ABI builder\n   * @group Implementation\n   * @category Transactions\n   */\n  transactionsQueue = new AsyncQueue<\n    [InputGenerateTransactionPayloadData, InputGenerateTransactionOptions | undefined]\n  >();\n\n  /**\n   * signed transactions waiting to be submitted\n   * @group Implementation\n   * @category Transactions\n   */\n  outstandingTransactions = new AsyncQueue<[Promise<PendingTransactionResponse>, bigint]>();\n\n  /**\n   * transactions that have been submitted to chain\n   * @group Implementation\n   * @category Transactions\n   */\n  sentTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * transactions that have been committed to chain\n   * @group Implementation\n   * @category Transactions\n   */\n  executedTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * Initializes a new instance of the class, providing a framework for receiving payloads to be processed.\n   *\n   * @param aptosConfig - A configuration object for Aptos.\n   * @param account - The account that will be used for sending transactions.\n   * @param maxWaitTime - The maximum wait time to wait before re-syncing the sequence number to the current on-chain state,\n   * default is 30 seconds.\n   * @param maximumInFlight - The maximum number of transactions that can be submitted per account, default is 100.\n   * @param sleepTime - The time to wait in seconds before re-evaluating if the maximum number of transactions are in flight,\n   * default is 10 seconds.\n   * @group Implementation\n   * @category Transactions\n   */\n  constructor(\n    aptosConfig: AptosConfig,\n    account: Account,\n    maxWaitTime: number = 30,\n    maximumInFlight: number = 100,\n    sleepTime: number = 10,\n  ) {\n    super();\n    this.aptosConfig = aptosConfig;\n    this.account = account;\n    this.started = false;\n    this.accountSequnceNumber = new AccountSequenceNumber(\n      aptosConfig,\n      account,\n      maxWaitTime,\n      maximumInFlight,\n      sleepTime,\n    );\n  }\n\n  /**\n   * Submits the next transaction for the account by generating it with the current sequence number\n   * and adding it to the outstanding transaction queue for processing.\n   * This function continues to submit transactions until there are no more to process.\n   *\n   * @throws {Error} Throws an error if the transaction submission fails.\n   * @group Implementation\n   * @category Transactions\n   */\n  async submitNextTransaction() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const sequenceNumber = await this.accountSequnceNumber.nextSequenceNumber();\n        if (sequenceNumber === null) return;\n        const transaction = await this.generateNextTransaction(this.account, sequenceNumber);\n        if (!transaction) return;\n        const pendingTransaction = signAndSubmitTransaction({\n          aptosConfig: this.aptosConfig,\n          transaction,\n          signer: this.account,\n        });\n        await this.outstandingTransactions.enqueue([pendingTransaction, sequenceNumber]);\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Submit transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Reads the outstanding transaction queue and submits the transactions to the chain.\n   * This function processes each transaction, checking their status and emitting events based on whether they were successfully\n   * sent or failed.\n   *\n   * @throws {Error} Throws an error if the process execution fails.\n   * @event TransactionWorkerEventsEnum.TransactionSent - Emitted when a transaction has been successfully committed to the chain.\n   * @event TransactionWorkerEventsEnum.TransactionSendFailed - Emitted when a transaction fails to commit, along with the error\n   * reason.\n   * @event TransactionWorkerEventsEnum.ExecutionFinish - Emitted when the execution of transactions is complete.\n   * @group Implementation\n   * @category Transactions\n   */\n  async processTransactions() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const awaitingTransactions = [];\n        const sequenceNumbers = [];\n        let [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n        awaitingTransactions.push(pendingTransaction);\n        sequenceNumbers.push(sequenceNumber);\n\n        while (!this.outstandingTransactions.isEmpty()) {\n          [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n          awaitingTransactions.push(pendingTransaction);\n          sequenceNumbers.push(sequenceNumber);\n        }\n        // send awaiting transactions to chain\n        const sentTransactions = await Promise.allSettled(awaitingTransactions);\n        for (let i = 0; i < sentTransactions.length && i < sequenceNumbers.length; i += 1) {\n          // check sent transaction status\n          const sentTransaction = sentTransactions[i];\n          sequenceNumber = sequenceNumbers[i];\n          if (sentTransaction.status === promiseFulfilledStatus) {\n            // transaction sent to chain\n            this.sentTransactions.push([sentTransaction.value.hash, sequenceNumber, null]);\n            // check sent transaction execution\n            this.emit(TransactionWorkerEventsEnum.TransactionSent, {\n              message: `transaction hash ${sentTransaction.value.hash} has been committed to chain`,\n              transactionHash: sentTransaction.value.hash,\n            });\n            await this.checkTransaction(sentTransaction, sequenceNumber);\n          } else {\n            // send transaction failed\n            this.sentTransactions.push([sentTransaction.status, sequenceNumber, sentTransaction.reason]);\n            this.emit(TransactionWorkerEventsEnum.TransactionSendFailed, {\n              message: `failed to commit transaction ${this.sentTransactions.length} with error ${sentTransaction.reason}`,\n              error: sentTransaction.reason,\n            });\n          }\n        }\n        this.emit(TransactionWorkerEventsEnum.ExecutionFinish, {\n          message: `execute ${sentTransactions.length} transactions finished`,\n        });\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      throw new Error(`Process execution failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Once a transaction has been sent to the chain, this function checks for its execution status.\n   * @param sentTransaction - The transaction that was sent to the chain and is now waiting to be executed.\n   * @param sequenceNumber - The account's sequence number that was sent with the transaction.\n   * @group Implementation\n   * @category Transactions\n   */\n  async checkTransaction(sentTransaction: PromiseFulfilledResult<PendingTransactionResponse>, sequenceNumber: bigint) {\n    try {\n      const waitFor: Array<Promise<TransactionResponse>> = [];\n      waitFor.push(waitForTransaction({ aptosConfig: this.aptosConfig, transactionHash: sentTransaction.value.hash }));\n      const sentTransactions = await Promise.allSettled(waitFor);\n\n      for (let i = 0; i < sentTransactions.length; i += 1) {\n        const executedTransaction = sentTransactions[i];\n        if (executedTransaction.status === promiseFulfilledStatus) {\n          // transaction executed to chain\n          this.executedTransactions.push([executedTransaction.value.hash, sequenceNumber, null]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecuted, {\n            message: `transaction hash ${executedTransaction.value.hash} has been executed on chain`,\n            transactionHash: sentTransaction.value.hash,\n          });\n        } else {\n          // transaction execution failed\n          this.executedTransactions.push([executedTransaction.status, sequenceNumber, executedTransaction.reason]);\n          this.emit(TransactionWorkerEventsEnum.TransactionExecutionFailed, {\n            message: `failed to execute transaction ${this.executedTransactions.length} with error ${executedTransaction.reason}`,\n            error: executedTransaction.reason,\n          });\n        }\n      }\n    } catch (error: any) {\n      throw new Error(`Check transaction failed for ${this.account.accountAddress.toString()} with error ${error}`);\n    }\n  }\n\n  /**\n   * Pushes a transaction to the transactions queue for processing.\n   *\n   * @param transactionData - The transaction payload containing necessary details.\n   * @param transactionData.abi - For all entry function payloads, the ABI to skip remote ABI lookups.\n   * @param options - Optional parameters for transaction configuration.\n   * @param options.maxGasAmount - Maximum gas amount for the transaction.\n   * @param options.gasUnitPrice - Gas unit price for the transaction.\n   * @param options.expireTimestamp - Expiration timestamp on the transaction.\n   * @param options.accountSequenceNumber - The sequence number for the transaction.\n   * @group Implementation\n   * @category Transactions\n   */\n  async push(\n    transactionData: InputGenerateTransactionPayloadData,\n    options?: InputGenerateTransactionOptions,\n  ): Promise<void> {\n    this.transactionsQueue.enqueue([transactionData, options]);\n  }\n\n  /**\n   * Generates a signed transaction that can be submitted to the chain.\n   *\n   * @param account - An Aptos account used as the sender of the transaction.\n   * @param sequenceNumber - A sequence number the transaction will be generated with.\n   * @returns A signed transaction object or undefined if the transaction queue is empty.\n   * @group Implementation\n   * @category Transactions\n   */\n  async generateNextTransaction(account: Account, sequenceNumber: bigint): Promise<SimpleTransaction | undefined> {\n    if (this.transactionsQueue.isEmpty()) return undefined;\n    const [transactionData, options] = await this.transactionsQueue.dequeue();\n    return generateTransaction({\n      aptosConfig: this.aptosConfig,\n      sender: account.accountAddress,\n      data: transactionData,\n      options: { ...options, accountSequenceNumber: sequenceNumber },\n    });\n  }\n\n  /**\n   * Starts transaction submission and processing by executing tasks from the queue until it is cancelled.\n   *\n   * @throws {Error} Throws an error if unable to start transaction batching.\n   * @group Implementation\n   * @category Transactions\n   */\n  async run() {\n    try {\n      while (!this.taskQueue.isCancelled()) {\n        const task = await this.taskQueue.dequeue();\n        await task();\n      }\n    } catch (error: any) {\n      throw new Error(`Unable to start transaction batching: ${error}`);\n    }\n  }\n\n  /**\n   * Starts the transaction management process.\n   *\n   * @throws {Error} Throws an error if the worker has already started.\n   * @group Implementation\n   * @category Transactions\n   */\n  start() {\n    if (this.started) {\n      throw new Error(\"worker has already started\");\n    }\n    this.started = true;\n    this.taskQueue.enqueue(() => this.submitNextTransaction());\n    this.taskQueue.enqueue(() => this.processTransactions());\n    this.run();\n  }\n\n  /**\n   * Stops the transaction management process.\n   *\n   * @throws {Error} Throws an error if the worker has already stopped.\n   * @group Implementation\n   * @category Transactions\n   */\n  stop() {\n    if (this.taskQueue.isCancelled()) {\n      throw new Error(\"worker has already stopped\");\n    }\n    this.started = false;\n    this.taskQueue.cancel();\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getGasPriceEstimation,\n  getTransactionByHash,\n  getTransactionByVersion,\n  getTransactions,\n  isTransactionPending,\n  waitForTransaction,\n} from \"../internal/transaction\";\nimport {\n  AnyNumber,\n  CommittedTransactionResponse,\n  GasEstimation,\n  HexInput,\n  PaginationArgs,\n  PendingTransactionResponse,\n  TransactionResponse,\n  WaitForTransactionOptions,\n} from \"../types\";\nimport {\n  FeePayerOrFeePayerAuthenticatorOrNeither,\n  getSigningMessage,\n  publicPackageTransaction,\n  signAndSubmitAsFeePayer,\n  signAndSubmitTransaction,\n  signAsFeePayer,\n  signTransaction,\n} from \"../internal/transactionSubmission\";\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  InputGenerateTransactionOptions,\n  InputGenerateTransactionPayloadData,\n} from \"../transactions\";\nimport { AccountAddressInput, AuthenticationKey, Ed25519PrivateKey } from \"../core\";\nimport { Account } from \"../account\";\nimport { Build } from \"./transactionSubmission/build\";\nimport { Simulate } from \"./transactionSubmission/simulate\";\nimport { Submit } from \"./transactionSubmission/submit\";\nimport { TransactionManagement } from \"./transactionSubmission/management\";\nimport { SimpleTransaction } from \"../transactions/instances/simpleTransaction\";\nimport { rotateAuthKey } from \"../internal/account\";\n\n/**\n * Represents a transaction in the Aptos blockchain,\n * providing methods to build, simulate, submit, and manage transactions.\n * This class encapsulates functionalities for querying transaction details,\n * estimating gas prices, signing transactions, and handling transaction states.\n *\n * This class is used as part of the Aptos object, so should be called like so:\n * @example\n * ```typescript\n * import { Account, Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n * const COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n * const ALICE_INITIAL_BALANCE = 100_000_000;\n * const TRANSFER_AMOUNT = 100;\n *\n * async function example() {\n *   console.log(\n *     \"This example will create two accounts (Alice and Bob), fund them, and transfer between them.\",\n *   );\n *\n *   // Set up the client\n *   const config = new AptosConfig({ network: Network.DEVNET });\n *   const aptos = new Aptos(config);\n *\n *   // Generate two account credentials\n *   // Each account has a private key, a public key, and an address\n *   const alice = Account.generate();\n *   const bob = Account.generate();\n *\n *   console.log(\"=== Addresses ===\\n\");\n *   console.log(`Alice's address is: ${alice.accountAddress}`);\n *   console.log(`Bob's address is: ${bob.accountAddress}`);\n *\n *   // Fund the accounts using a faucet\n *   console.log(\"\\n=== Funding accounts ===\\n\");\n *\n *   await aptos.fundAccount({\n *     accountAddress: alice.accountAddress,\n *     amount: ALICE_INITIAL_BALANCE,\n *   });\n *\n *   // Send a transaction from Alice's account to Bob's account\n *   const txn = await aptos.transaction.build.simple({\n *     sender: alice.accountAddress,\n *     data: {\n *       // All transactions on Aptos are implemented via smart contracts.\n *       function: \"0x1::aptos_account::transfer\",\n *       functionArguments: [bob.accountAddress, 100],\n *     },\n *   });\n *\n *   console.log(\"\\n=== Transfer transaction ===\\n\");\n *   // Both signs and submits\n *   const committedTxn = await aptos.signAndSubmitTransaction({\n *     signer: alice,\n *     transaction: txn,\n *  });\n *   // Waits for Aptos to verify and execute the transaction\n *   const executedTransaction = await aptos.waitForTransaction({\n *     transactionHash: committedTxn.hash,\n *   });\n *   console.log(\"Transaction hash:\", executedTransaction.hash);\n *\n *  console.log(\"\\n=== Balances after transfer ===\\n\");\n *  const newAliceAccountBalance = await aptos.getAccountResource({\n *    accountAddress: alice.accountAddress,\n *    resourceType: COIN_STORE,\n *  });\n *  const newAliceBalance = Number(newAliceAccountBalance.coin.value);\n *  console.log(`Alice's balance is: ${newAliceBalance}`);\n *\n *  const newBobAccountBalance = await aptos.getAccountResource({\n *    accountAddress: bob.accountAddress,\n *    resourceType: COIN_STORE,\n *  });\n *  const newBobBalance = Number(newBobAccountBalance.coin.value);\n *  console.log(`Bob's balance is: ${newBobBalance}`);\n * }\n *\n * example();\n * ```\n * @group Transaction\n */\nexport class Transaction {\n  readonly config: AptosConfig;\n\n  readonly build: Build;\n\n  readonly simulate: Simulate;\n\n  readonly submit: Submit;\n\n  readonly batch: TransactionManagement;\n\n  /**\n   * Creates an instance of the Aptos client with the specified configuration.\n   * This allows you to interact with the Aptos blockchain using the provided settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., Testnet, Mainnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client instance\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify the network\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client created successfully:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  constructor(config: AptosConfig) {\n    this.config = config;\n    this.build = new Build(this.config);\n    this.simulate = new Simulate(this.config);\n    this.submit = new Submit(this.config);\n    this.batch = new TransactionManagement(this.config);\n  }\n\n  /**\n   * Queries on-chain transactions, excluding pending transactions.\n   * Use this function to retrieve historical transactions from the blockchain.\n   *\n   * @param args Optional parameters for pagination.\n   * @param args.options Optional pagination options.\n   * @param args.options.offset The number of the transaction to start with.\n   * @param args.options.limit The number of results to return.\n   *\n   * @returns An array of on-chain transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch transactions with pagination\n   *   const transactions = await aptos.getTransactions({\n   *     options: {\n   *       offset: 0, // Start from the first transaction\n   *       limit: 10, // Limit to 10 results\n   *     },\n   *   });\n   *\n   *   console.log(transactions);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactions(args?: { options?: PaginationArgs }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by version. This function will not return pending transactions.\n   *\n   * @param args - The arguments for querying the transaction.\n   * @param args.ledgerVersion - Transaction version is an unsigned 64-bit number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching a transaction by its version\n   *   const transaction = await aptos.getTransactionByVersion({ ledgerVersion: 1 }); // replace 1 with a real version\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactionByVersion(args: { ledgerVersion: AnyNumber }): Promise<TransactionResponse> {\n    return getTransactionByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transactions by their transaction hash, returning both pending and committed transactions.\n   *\n   * @param args - The arguments for querying the transaction.\n   * @param args.transactionHash - The transaction hash should be a hex-encoded bytes string with a 0x prefix.\n   * @returns The transaction from the mempool (pending) or the on-chain (committed) transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetch a transaction by its hash\n   *   const transaction = await aptos.getTransactionByHash({ transactionHash: \"0x123\" }); // replace with a real transaction hash\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getTransactionByHash(args: { transactionHash: HexInput }): Promise<TransactionResponse> {\n    return getTransactionByHash({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Defines if the specified transaction is currently in a pending state.\n   * This function helps you determine the status of a transaction using its hash.\n   *\n   * @param args - The arguments for the function.\n   * @param args.transactionHash - A hash of the transaction in hexadecimal format.\n   * @returns `true` if the transaction is in a pending state and `false` otherwise.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Check if the transaction is pending using its hash\n   *   const isPendingTransaction = await aptos.isPendingTransaction({ transactionHash: \"0x123\" }); // replace with a real transaction hash\n   *   console.log(\"Is the transaction pending?\", isPendingTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async isPendingTransaction(args: { transactionHash: HexInput }): Promise<boolean> {\n    return isTransactionPending({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Waits for a transaction to move past the pending state and provides the transaction response.\n   * There are 4 cases.\n   * 1. Transaction is successfully processed and committed to the chain.\n   *    - The function will resolve with the transaction response from the API.\n   * 2. Transaction is rejected for some reason, and is therefore not committed to the blockchain.\n   *    - The function will throw an AptosApiError with an HTTP status code indicating some problem with the request.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   *    - If `checkSuccess` is true, the function will throw a FailedTransactionError\n   *      If `checkSuccess` is false, the function will resolve with the transaction response where the `success` field is false.\n   * 4. Transaction does not move past the pending state within `args.options.timeoutSecs` seconds.\n   *    - The function will throw a WaitForTransactionError\n   *\n   * @param args.transactionHash - The hash of a transaction previously submitted to the blockchain.\n   * @param args.options - Optional parameters for waiting behavior.\n   * @param args.options.timeoutSecs - Timeout in seconds. Defaults to 20 seconds.\n   * @param args.options.checkSuccess - A boolean which controls whether the function will error if the transaction failed.\n   * Defaults to true.\n   * @returns The transaction on-chain response.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Wait for a transaction to complete using its hash\n   *   const transactionHash = \"0x123\"; // replace with a real transaction hash\n   *   const transactionResponse = await aptos.waitForTransaction({\n   *     transactionHash,\n   *     options: {\n   *       timeoutSecs: 30, // specify your own timeout if needed\n   *       checkSuccess: true,\n   *     },\n   *   });\n   *\n   *   console.log(transactionResponse);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async waitForTransaction(args: {\n    transactionHash: HexInput;\n    options?: WaitForTransactionOptions;\n  }): Promise<CommittedTransactionResponse> {\n    return waitForTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Estimates the gas unit price required to process a transaction on the Aptos blockchain in a timely manner.\n   * This helps users to understand the cost associated with their transactions.\n   * {@link https://api.mainnet.aptoslabs.com/v1/spec#/operations/estimate_gas_price}\n   *\n   * @returns An object containing the estimated gas price.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET }); // Specify your network\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Getting the gas price estimation\n   *   const gasPriceEstimation = await aptos.getGasPriceEstimation();\n   *\n   *   console.log(\"Estimated Gas Price:\", gasPriceEstimation);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async getGasPriceEstimation(): Promise<GasEstimation> {\n    return getGasPriceEstimation({\n      aptosConfig: this.config,\n    });\n  }\n\n  /**\n   * Returns a signing message for a transaction, allowing a user to sign it using their preferred method before submission to the network.\n   *\n   * @param args - The arguments for obtaining the signing message.\n   * @param args.transaction - A raw transaction for signing elsewhere.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *     const transaction = await aptos.transaction.build.simple({\n   *         sender: \"0x1\", // replace with a real sender address\n   *         data: {\n   *             function: \"0x1::aptos_account::transfer\",\n   *             functionArguments: [\"0x2\", 100], // replace with a real destination address\n   *         },\n   *     });\n   *\n   *     const message = await aptos.getSigningMessage({ transaction });\n   *     console.log(message);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getSigningMessage(args: { transaction: AnyRawTransaction }): Uint8Array {\n    return getSigningMessage(args);\n  }\n\n  /**\n   * Generates a transaction to publish a Move package to the blockchain.\n   * This function helps you create a transaction that can be simulated or submitted to the chain for publishing a package.\n   *\n   * To get the `metadataBytes` and `byteCode`, can compile using Aptos CLI with command\n   * `aptos move compile --save-metadata ...`,\n   *\n   * {@link https://aptos.dev/tutorials/your-first-dapp/#step-4-publish-a-move-module}\n   *\n   * @param args The arguments for publishing the package.\n   * @param args.account The publisher account.\n   * @param args.metadataBytes The package metadata bytes.\n   * @param args.moduleBytecode An array of the bytecode of each module in the package in compiler output order.\n   * @param args.options Optional settings for generating the transaction.\n   *\n   * @returns A SimpleTransaction that can be simulated or submitted to the chain.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Replace with a real account address\n   *   const account = \"0x1\";\n   *   const metadataBytes = \"0x...\"; // replace with real metadata bytes\n   *   const byteCode = \"0x...\"; // replace with real module bytecode\n   *\n   *   const transaction = await aptos.publishPackageTransaction({\n   *     account,\n   *     metadataBytes,\n   *     moduleBytecode: [byteCode],\n   *   });\n   *\n   *   console.log(transaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async publishPackageTransaction(args: {\n    account: AccountAddressInput;\n    metadataBytes: HexInput;\n    moduleBytecode: Array<HexInput>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return publicPackageTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Rotates the authentication key for a given account.  Once an account is rotated, only the new private key\n   * or keyless signing scheme can be used to sign transactions for the account.\n   *\n   * @param args - The arguments for rotating the authentication key.\n   * @param args.fromAccount - The account from which the authentication key will be rotated.\n   * @param args.toAccount - (Optional) The target account to rotate to. Required if not using toNewPrivateKey or toAuthKey.\n   * @param args.toNewPrivateKey - (Optional) The new private key to rotate to. Required if not using toAccount or toAuthKey.\n   * @param args.toAuthKey - (Optional) The new authentication key to rotate to. Can only be used with dangerouslySkipVerification=true.\n   * @param args.dangerouslySkipVerification - (Optional) If true, skips verification steps after rotation. Required when using toAuthKey.\n   *\n   * @remarks\n   * This function supports three modes of rotation:\n   * 1. Using a target Account object (toAccount)\n   * 2. Using a new private key (toNewPrivateKey)\n   * 3. Using a raw authentication key (toAuthKey) - requires dangerouslySkipVerification=true\n   *\n   * When not using dangerouslySkipVerification, the function performs additional safety checks and account setup.\n   *\n   * If the new key is a multi key, skipping verification is dangerous because verification will publish the public key onchain and\n   * prevent users from being locked out of the account from loss of knowledge of one of the public keys.\n   *\n   * @returns PendingTransactionResponse\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account, PrivateKey } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Rotate the authentication key for an account\n   *   const response = await aptos.rotateAuthKey({\n   *     // replace with a real account\n   *     fromAccount: Account.generate(),\n   *     // replace with a real private key\n   *     toNewPrivateKey: new PrivateKey(\"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"),\n   *   });\n   *\n   *   console.log(response);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async rotateAuthKey(\n    args: {\n      fromAccount: Account;\n    } & (\n      | { toAccount: Account; dangerouslySkipVerification?: never }\n      | { toNewPrivateKey: Ed25519PrivateKey; dangerouslySkipVerification?: never }\n      | { toAuthKey: AuthenticationKey; dangerouslySkipVerification: true }\n    ),\n  ): Promise<PendingTransactionResponse> {\n    return rotateAuthKey({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sign a transaction that can later be submitted to the chain.\n   * This function is essential for ensuring the authenticity of the transaction by using the provided account's signing capabilities.\n   *\n   * @param args - The arguments for signing the transaction.\n   * @param args.signer - The account that will sign the transaction.\n   * @param args.transaction - A raw transaction to sign.\n   *\n   * @returns AccountAuthenticator - The authenticator for the signed transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for signing\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [ \"0x1\", 100 ], // replace with a real account address and amount\n   *     },\n   *   });\n   *\n   *   const signedTransaction = await aptos.transaction.sign({\n   *     signer: sender,\n   *     transaction,\n   *   }); // Sign the transaction\n   *\n   *   console.log(\"Signed Transaction:\", signedTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  sign(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signTransaction({\n      ...args,\n    });\n  }\n\n  /**\n   * Sign a transaction as a fee payer that can later be submitted to the chain.\n   * This function ensures that the transaction is marked with the fee payer's address, allowing it to be processed correctly.\n   *\n   * @param args - The arguments for signing the transaction.\n   * @param args.signer - The fee payer signer account.\n   * @param args.transaction - A raw transaction to sign on. This transaction must include a `feePayerAddress` property.\n   *\n   * @returns AccountAuthenticator - The authenticator for the signed transaction.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for the fee payer\n   *   const transaction = await aptos.transaction.build.simple({\n   *     // All transactions on Aptos are implemented via smart contracts.\n   *     function: \"0x1::aptos_account::transfer\",\n   *     functionArguments: [sender.accountAddress, 100],\n   *     feePayerAddress: sender.accountAddress, // Set the fee payer address\n   *   });\n   *\n   *   const signedTransaction = await aptos.transaction.signAsFeePayer({\n   *     signer: sender,\n   *     transaction,\n   *   });\n   *\n   *   console.log(\"Signed transaction as fee payer:\", signedTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  // eslint-disable-next-line class-methods-use-this\n  signAsFeePayer(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signAsFeePayer({\n      ...args,\n    });\n  }\n\n  // TRANSACTION SUBMISSION //\n\n  /**\n   * @deprecated Prefer to use `aptos.transaction.batch.forSingleAccount()`\n   *\n   * Batch transactions for a single account by submitting multiple transaction payloads.\n   * This function is useful for efficiently processing and submitting transactions that do not depend on each other, such as\n   * batch funding or batch token minting.\n   *\n   * @param args - The arguments for batching transactions.\n   * @param args.sender - The sender account to sign and submit the transactions.\n   * @param args.data - An array of transaction payloads to be processed.\n   * @param args.options - Optional. Transaction generation configurations (excluding accountSequenceNumber).\n   *\n   * @throws Error if any worker failure occurs during submission.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, Account } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   * const sender = Account.generate(); // Generate a new account for sending transactions\n   *\n   * async function runExample() {\n   *   const transactions = [\n   *     { }, // Build your first transaction payload\n   *     { }, // Build your second transaction payload\n   *   ];\n   *\n   *   // Batch transactions for the single account\n   *   await aptos.batchTransactionsForSingleAccount({\n   *     sender,\n   *     data: transactions,\n   *   });\n   *\n   *   console.log(\"Batch transactions submitted successfully.\");\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Transaction\n   */\n  async batchTransactionsForSingleAccount(args: {\n    sender: Account;\n    data: InputGenerateTransactionPayloadData[];\n    options?: Omit<InputGenerateTransactionOptions, \"accountSequenceNumber\">;\n  }): Promise<void> {\n    try {\n      const { sender, data, options } = args;\n      this.batch.forSingleAccount({ sender, data, options });\n    } catch (error: any) {\n      throw new Error(`failed to submit transactions with error: ${error}`);\n    }\n  }\n\n  /**\n   * Sign and submit a single signer transaction to the blockchain.\n   * This function allows you to execute a transaction after signing it with the specified account.\n   *\n   * @param args The arguments for signing and submitting the transaction.\n   * @param args.signer The signer account to sign the transaction.\n   * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const sender = Account.generate(); // Generate a new account for sending the transaction\n   *   const transaction = await aptos.transaction.build.simple({\n   *     sender: sender.accountAddress,\n   *     data: {\n   *       function: \"0x1::aptos_account::transfer\",\n   *       functionArguments: [ \"0x1\", 100 ], // replace with a real account address\n   *     },\n   *   });\n   *\n   *   // Sign and submit the transaction\n   *   const pendingTransaction = await aptos.signAndSubmitTransaction({\n   *     signer: sender,\n   *     transaction,\n   *   });\n   *\n   *   console.log(pendingTransaction);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @return PendingTransactionResponse\n   * @group Transaction\n   */\n  async signAndSubmitTransaction(\n    args: FeePayerOrFeePayerAuthenticatorOrNeither & {\n      signer: Account;\n      transaction: AnyRawTransaction;\n    },\n  ): Promise<PendingTransactionResponse> {\n    return signAndSubmitTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Sign and submit a single signer transaction as the fee payer to chain given an authenticator by the sender of the transaction.\n   *\n   * @param args.feePayer The fee payer account to sign the transaction\n   * @param args.senderAuthenticator The AccountAuthenticator signed by the sender of the transaction\n   * @param args.transaction An instance of a RawTransaction, plus optional secondary/fee payer addresses\n   *\n   * @example\n   * const transaction = await aptos.transaction.build.simple({sender: alice.accountAddress, feePayer: true ...})\n   * const senderAuthenticator = alice.signTransactionWithAuthenticator(transaction)\n   * const pendingTransaction = await aptos.signAndSubmitAsFeePayer({\n   *  senderAuthenticator,\n   *  feePayer: bob,\n   *  transaction,\n   * })\n   *\n   * @return PendingTransactionResponse\n   * @group Transaction\n   */\n  async signAndSubmitAsFeePayer(args: {\n    feePayer: Account;\n    senderAuthenticator: AccountAuthenticator;\n    transaction: AnyRawTransaction;\n  }): Promise<PendingTransactionResponse> {\n    return signAndSubmitAsFeePayer({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/keyless}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * keyless namespace and without having a dependency cycle error.\n * @group Implementation\n */\nimport { jwtDecode, JwtPayload } from \"jwt-decode\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosPepperService, postAptosProvingService } from \"../client\";\nimport {\n  AccountAddressInput,\n  EphemeralSignature,\n  Groth16Zkp,\n  Hex,\n  KeylessPublicKey,\n  MoveJWK,\n  ZeroKnowledgeSig,\n  ZkProof,\n  getKeylessConfig,\n} from \"../core\";\nimport { HexInput, ZkpVariant } from \"../types\";\nimport { Account, EphemeralKeyPair, KeylessAccount, ProofFetchCallback } from \"../account\";\nimport { PepperFetchRequest, PepperFetchResponse, ProverRequest, ProverResponse } from \"../types/keyless\";\nimport { lookupOriginalAccountAddress } from \"./account\";\nimport { FederatedKeylessPublicKey } from \"../core/crypto/federatedKeyless\";\nimport { FederatedKeylessAccount } from \"../account/FederatedKeylessAccount\";\nimport { MoveVector } from \"../bcs\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions\";\nimport { KeylessError, KeylessErrorType } from \"../errors\";\nimport { FIREBASE_AUTH_ISS_PATTERN } from \"../utils/const\";\n\n/**\n * Retrieves a pepper value based on the provided configuration and authentication details.\n *\n * @param args - The arguments required to fetch the pepper.\n * @param args.aptosConfig - The configuration object for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for the operation.\n * @param args.uidKey - An optional unique identifier key (defaults to \"sub\").\n * @param args.derivationPath - An optional derivation path for the key.\n * @returns A Uint8Array containing the fetched pepper value.\n * @group Implementation\n */\nexport async function getPepper(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  uidKey?: string;\n  derivationPath?: string;\n}): Promise<Uint8Array> {\n  const { aptosConfig, jwt, ephemeralKeyPair, uidKey = \"sub\", derivationPath } = args;\n\n  const body = {\n    jwt_b64: jwt,\n    epk: ephemeralKeyPair.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n    exp_date_secs: ephemeralKeyPair.expiryDateSecs,\n    epk_blinder: Hex.fromHexInput(ephemeralKeyPair.blinder).toStringWithoutPrefix(),\n    uid_key: uidKey,\n    derivation_path: derivationPath,\n  };\n  const { data } = await postAptosPepperService<PepperFetchRequest, PepperFetchResponse>({\n    aptosConfig,\n    path: \"fetch\",\n    body,\n    originMethod: \"getPepper\",\n    overrides: { WITH_CREDENTIALS: false },\n  });\n  return Hex.fromHexInput(data.pepper).toUint8Array();\n}\n\n/**\n * Generates a zero-knowledge proof based on the provided parameters.\n * This function is essential for creating a signed proof that can be used in various cryptographic operations.\n *\n * @param args - The parameters required to generate the proof.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for generating the proof.\n * @param args.pepper - An optional hex input used to enhance security (default is generated if not provided).\n * @param args.uidKey - An optional string that specifies the unique identifier key (defaults to \"sub\").\n * @throws Error if the pepper length is not valid or if the ephemeral key pair's lifespan exceeds the maximum allowed.\n * @group Implementation\n */\nexport async function getProof(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  pepper?: HexInput;\n  uidKey?: string;\n  maxExpHorizonSecs?: number;\n}): Promise<ZeroKnowledgeSig> {\n  const {\n    aptosConfig,\n    jwt,\n    ephemeralKeyPair,\n    pepper = await getPepper(args),\n    uidKey = \"sub\",\n    maxExpHorizonSecs = (await getKeylessConfig({ aptosConfig })).maxExpHorizonSecs,\n  } = args;\n  if (Hex.fromHexInput(pepper).toUint8Array().length !== KeylessAccount.PEPPER_LENGTH) {\n    throw new Error(`Pepper needs to be ${KeylessAccount.PEPPER_LENGTH} bytes`);\n  }\n  const decodedJwt = jwtDecode<JwtPayload>(jwt);\n  if (typeof decodedJwt.iat !== \"number\") {\n    throw new Error(\"iat was not found\");\n  }\n  if (maxExpHorizonSecs < ephemeralKeyPair.expiryDateSecs - decodedJwt.iat) {\n    throw Error(`The EphemeralKeyPair is too long lived.  It's lifespan must be less than ${maxExpHorizonSecs}`);\n  }\n  const json = {\n    jwt_b64: jwt,\n    epk: ephemeralKeyPair.getPublicKey().bcsToHex().toStringWithoutPrefix(),\n    epk_blinder: Hex.fromHexInput(ephemeralKeyPair.blinder).toStringWithoutPrefix(),\n    exp_date_secs: ephemeralKeyPair.expiryDateSecs,\n    exp_horizon_secs: maxExpHorizonSecs,\n    pepper: Hex.fromHexInput(pepper).toStringWithoutPrefix(),\n    uid_key: uidKey,\n  };\n\n  const { data } = await postAptosProvingService<ProverRequest, ProverResponse>({\n    aptosConfig,\n    path: \"prove\",\n    body: json,\n    originMethod: \"getProof\",\n    overrides: { WITH_CREDENTIALS: false },\n  });\n\n  const proofPoints = data.proof;\n  const groth16Zkp = new Groth16Zkp({\n    a: proofPoints.a,\n    b: proofPoints.b,\n    c: proofPoints.c,\n  });\n\n  const signedProof = new ZeroKnowledgeSig({\n    proof: new ZkProof(groth16Zkp, ZkpVariant.Groth16),\n    trainingWheelsSignature: EphemeralSignature.fromHex(data.training_wheels_signature),\n    expHorizonSecs: maxExpHorizonSecs,\n  });\n  return signedProof;\n}\n\n/**\n * Derives a keyless account by fetching the necessary proof and looking up the original account address.\n * This function helps in creating a keyless account that can be used without managing private keys directly.\n *\n * @param args - The arguments required to derive the keyless account.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param args.jwt - The JSON Web Token used for authentication.\n * @param args.ephemeralKeyPair - The ephemeral key pair used for cryptographic operations.\n * @param args.uidKey - An optional unique identifier key for the user.\n * @param args.pepper - An optional hexadecimal input used for additional security.\n * @param args.proofFetchCallback - An optional callback function to handle the proof fetch outcome.\n * @returns A keyless account object.\n * @group Implementation\n */\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<KeylessAccount>;\n\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  jwkAddress: AccountAddressInput;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<FederatedKeylessAccount>;\n\nexport async function deriveKeylessAccount(args: {\n  aptosConfig: AptosConfig;\n  jwt: string;\n  ephemeralKeyPair: EphemeralKeyPair;\n  jwkAddress?: AccountAddressInput;\n  uidKey?: string;\n  pepper?: HexInput;\n  proofFetchCallback?: ProofFetchCallback;\n}): Promise<KeylessAccount | FederatedKeylessAccount> {\n  const { aptosConfig, jwt, jwkAddress, uidKey, proofFetchCallback, pepper = await getPepper(args) } = args;\n  const { verificationKey, maxExpHorizonSecs } = await getKeylessConfig({ aptosConfig });\n\n  const proofPromise = getProof({ ...args, pepper, maxExpHorizonSecs });\n  // If a callback is provided, pass in the proof as a promise to KeylessAccount.create.  This will make the proof be fetched in the\n  // background and the callback will handle the outcome of the fetch.  This allows the developer to not have to block on the proof fetch\n  // allowing for faster rendering of UX.\n  //\n  // If no callback is provided, the just await the proof fetch and continue synchronously.\n  const proof = proofFetchCallback ? proofPromise : await proofPromise;\n\n  // Look up the original address to handle key rotations and then instantiate the account.\n  if (jwkAddress !== undefined) {\n    const publicKey = FederatedKeylessPublicKey.fromJwtAndPepper({ jwt, pepper, jwkAddress, uidKey });\n    const address = await lookupOriginalAccountAddress({\n      aptosConfig,\n      authenticationKey: publicKey.authKey().derivedAddress(),\n    });\n\n    return FederatedKeylessAccount.create({\n      ...args,\n      address,\n      proof,\n      pepper,\n      proofFetchCallback,\n      jwkAddress,\n      verificationKey,\n    });\n  }\n\n  const publicKey = KeylessPublicKey.fromJwtAndPepper({ jwt, pepper, uidKey });\n  const address = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: publicKey.authKey().derivedAddress(),\n  });\n  return KeylessAccount.create({ ...args, address, proof, pepper, proofFetchCallback, verificationKey });\n}\n\nexport interface JWKS {\n  keys: MoveJWK[];\n}\n\nexport async function updateFederatedKeylessJwkSetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  iss: string;\n  jwksUrl?: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, iss, options } = args;\n\n  let { jwksUrl } = args;\n\n  if (jwksUrl === undefined) {\n    if (FIREBASE_AUTH_ISS_PATTERN.test(iss)) {\n      jwksUrl = \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\";\n    } else {\n      jwksUrl = iss.endsWith(\"/\") ? `${iss}.well-known/jwks.json` : `${iss}/.well-known/jwks.json`;\n    }\n  }\n\n  let response: Response;\n\n  try {\n    response = await fetch(jwksUrl);\n    if (!response.ok) {\n      throw new Error(`${response.status} ${response.statusText}`);\n    }\n  } catch (error) {\n    let errorMessage: string;\n    if (error instanceof Error) {\n      errorMessage = `${error.message}`;\n    } else {\n      errorMessage = `error unknown - ${error}`;\n    }\n    throw KeylessError.fromErrorType({\n      type: KeylessErrorType.JWK_FETCH_FAILED_FEDERATED,\n      details: `Failed to fetch JWKS at ${jwksUrl}: ${errorMessage}`,\n    });\n  }\n\n  const jwks: JWKS = await response.json();\n  return generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::jwks::update_federated_jwk_set\",\n      functionArguments: [\n        iss,\n        MoveVector.MoveString(jwks.keys.map((key) => key.kid)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.alg)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.e)),\n        MoveVector.MoveString(jwks.keys.map((key) => key.n)),\n      ],\n    },\n    options,\n  });\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account, EphemeralKeyPair, KeylessAccount, ProofFetchCallback } from \"../account\";\nimport { FederatedKeylessAccount } from \"../account/FederatedKeylessAccount\";\nimport { AccountAddressInput, ZeroKnowledgeSig } from \"../core\";\nimport {\n  deriveKeylessAccount,\n  getPepper,\n  getProof,\n  updateFederatedKeylessJwkSetTransaction,\n} from \"../internal/keyless\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions\";\nimport { HexInput } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\n\n/**\n * A class to query all `Keyless` related queries on Aptos.\n *\n * More documentation on how to integrate Keyless Accounts see the below\n * [Aptos Keyless Integration Guide](https://aptos.dev/guides/keyless-accounts/#aptos-keyless-integration-guide).\n * @group Keyless\n */\nexport class Keyless {\n  /**\n   * Initializes a new instance of the Aptos class with the provided configuration.\n   * This allows you to interact with the Aptos blockchain using the specified network settings.\n   *\n   * @param config - The configuration settings for connecting to the Aptos network.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new configuration for the Aptos client\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your desired network\n   *\n   *     // Initialize the Aptos client with the configuration\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Fetches the pepper from the Aptos pepper service API.\n   *\n   * @param args - The arguments for fetching the pepper.\n   * @param args.jwt - JWT token.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.derivationPath - A derivation path used for creating multiple accounts per user via the BIP-44 standard. Defaults\n   * to \"m/44'/637'/0'/0'/0\".\n   * @returns The pepper which is a Uint8Array of length 31.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *\n   *   // Fetching the pepper using the provided JWT and ephemeral key pair\n   *   const pepper = await aptos.getPepper({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     // derivationPath: \"m/44'/637'/0'/0'/0\" // specify your own if needed\n   *   });\n   *\n   *   console.log(\"Fetched pepper:\", pepper);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async getPepper(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    derivationPath?: string;\n  }): Promise<Uint8Array> {\n    return getPepper({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Fetches a proof from the Aptos prover service API.\n   *\n   * @param args - The arguments for fetching the proof.\n   * @param args.jwt - JWT token.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.pepper - The pepper used for the account. If not provided, it will be fetched from the Aptos pepper service.\n   * @param args.uidKey - A key in the JWT token to use to set the uidVal in the IdCommitment.\n   *\n   * @returns The proof which is represented by a ZeroKnowledgeSig.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, EphemeralKeyPair, getPepper } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *\n   *   // Fetch the proof using the getProof function\n   *   const proof = await aptos.getProof({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     pepper: await getPepper({}), // fetch the pepper if not provided\n   *     uidKey: \"sub\", // specify the uid key\n   *   });\n   *\n   *   console.log(\"Fetched proof:\", proof);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async getProof(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    pepper?: HexInput;\n    uidKey?: string;\n  }): Promise<ZeroKnowledgeSig> {\n    return getProof({ aptosConfig: this.config, ...args });\n  }\n\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<KeylessAccount>;\n\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    jwkAddress: AccountAddressInput;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<FederatedKeylessAccount>;\n\n  /**\n   * Derives a Keyless Account from the provided JWT token and corresponding EphemeralKeyPair. This function computes the proof\n   * via the proving service and can fetch the pepper from the pepper service if not explicitly provided.\n   *\n   * @param args - The arguments required to derive the Keyless Account.\n   * @param args.jwt - The JWT token used for deriving the account.\n   * @param args.ephemeralKeyPair - The EphemeralKeyPair used to generate the nonce in the JWT token.\n   * @param args.jwkAddress - The address the where the JWKs used to verify signatures are found.  Setting the value derives a\n   * FederatedKeylessAccount.\n   * @param args.uidKey - An optional key in the JWT token to set the uidVal in the IdCommitment.\n   * @param args.pepper - An optional pepper value.\n   * @param args.proofFetchCallback - An optional callback function for fetching the proof in the background, allowing for a more\n   * responsive user experience.\n   *\n   * @returns A KeylessAccount that can be used to sign transactions.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network, deriveKeylessAccount } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   const jwt = \"your_jwt_token\"; // replace with a real JWT token\n   *   const ephemeralKeyPair = new EphemeralKeyPair(); // create a new ephemeral key pair\n   *\n   *   // Deriving the Keyless Account\n   *   const keylessAccount = await deriveKeylessAccount({\n   *     jwt,\n   *     ephemeralKeyPair,\n   *     uidKey: \"your_uid_key\", // optional\n   *     pepper: \"your_pepper\", // optional\n   *   });\n   *\n   *   console.log(\"Keyless Account derived:\", keylessAccount);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Keyless\n   */\n  async deriveKeylessAccount(args: {\n    jwt: string;\n    ephemeralKeyPair: EphemeralKeyPair;\n    jwkAddress?: AccountAddressInput;\n    uidKey?: string;\n    pepper?: HexInput;\n    proofFetchCallback?: ProofFetchCallback;\n  }): Promise<KeylessAccount | FederatedKeylessAccount> {\n    return deriveKeylessAccount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * This installs a set of FederatedJWKs at an address for a given iss.\n   *\n   * It will fetch the JSON Web Keyset (JWK) set from the well-known endpoint and update the FederatedJWKs at the sender's address\n   * to reflect it.\n   *\n   * @param args.sender The account that will install the JWKs\n   * @param args.iss the iss claim of the federated OIDC provider.\n   * @param args.jwksUrl the URL to find the corresponding JWKs. For supported IDP providers this parameter in not necessary.\n   *\n   * @returns The pending transaction that results from submission.\n   * @group Keyless\n   */\n  async updateFederatedKeylessJwkSetTransaction(args: {\n    sender: Account;\n    iss: string;\n    jwksUrl?: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SimpleTransaction> {\n    return updateFederatedKeylessJwkSetTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n","import { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddressInput, AccountAddress } from \"../core\";\nimport { PaginationArgs, OrderByArg, GetObjectDataQueryResponse, WhereArg } from \"../types\";\nimport { GetObjectDataQuery } from \"../types/generated/operations\";\nimport { GetObjectData } from \"../types/generated/queries\";\nimport { CurrentObjectsBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\n/**\n * Retrieves the current objects based on specified filtering and pagination options.\n *\n * @param args - The arguments for retrieving object data.\n * @param args.aptosConfig - The configuration settings for Aptos.\n * @param [args.options] - Optional parameters for pagination and filtering.\n * @param [args.options.offset] - The number of items to skip before starting to collect the result set.\n * @param [args.options.limit] - The maximum number of items to return.\n * @param [args.options.orderBy] - The criteria for ordering the results.\n * @param [args.options.where] - The conditions to filter the results.\n * @returns The current objects that match the specified criteria.\n * @group Implementation\n */\nexport async function getObjectData(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]> & WhereArg<CurrentObjectsBoolExp>;\n}): Promise<GetObjectDataQueryResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetObjectData,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetObjectDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getObjectData\",\n  });\n\n  return data.current_objects;\n}\n\n/**\n * Retrieves the object data associated with a specific object address.\n * This function allows you to access detailed information about an object in the Aptos blockchain.\n *\n * @param args - The arguments for retrieving object data.\n * @param args.aptosConfig - The configuration for connecting to the Aptos blockchain.\n * @param args.objectAddress - The address of the object whose data is being retrieved.\n * @param args.options - Optional parameters for pagination and ordering of the results.\n * @group Implementation\n */\nexport async function getObjectDataByObjectAddress(args: {\n  aptosConfig: AptosConfig;\n  objectAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n}): Promise<GetObjectDataQueryResponse[0]> {\n  const { aptosConfig, objectAddress, options } = args;\n  const address = AccountAddress.from(objectAddress).toStringLong();\n\n  const whereCondition: { object_address: { _eq: string } } = {\n    object_address: { _eq: address },\n  };\n  return (await getObjectData({ aptosConfig, options: { ...options, where: whereCondition } }))[0];\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnyNumber, GetObjectDataQueryResponse, OrderByArg, PaginationArgs } from \"../types\";\nimport { AccountAddressInput } from \"../core\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { ProcessorType } from \"../utils\";\nimport { waitForIndexerOnVersion } from \"./utils\";\nimport { getObjectDataByObjectAddress } from \"../internal/object\";\n\n/**\n * A class to query all `Object` related queries on Aptos.\n * @group Object\n */\nexport class AptosObject {\n  /**\n   * Creates an instance of the Aptos client with the provided configuration.\n   * This allows interaction with the Aptos blockchain using the specified settings.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., mainnet, testnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet for funding accounts (optional).\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a configuration for the Aptos client\n   *     const config = new AptosConfig({\n   *         network: Network.TESTNET, // Specify the desired network\n   *         nodeUrl: \"https://testnet.aptos.dev\", // Replace with your node URL\n   *     });\n   *\n   *     // Create an instance of the Aptos client\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client created successfully\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Object\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Fetches the object data based on the specified object address.\n   *\n   * @param args.objectAddress - The object address to retrieve data for.\n   * @param args.minimumLedgerVersion - Optional minimum ledger version to wait for.\n   * @param args.options - Optional configuration options for pagination and ordering.\n   *\n   * @returns The object data corresponding to the provided address.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * const config = new AptosConfig({ network: Network.TESTNET });\n   * const aptos = new Aptos(config);\n   *\n   * async function runExample() {\n   *   // Fetching object data by object address\n   *   const objectData = await aptos.getObjectDataByObjectAddress({\n   *     objectAddress: \"0x1\", // replace with a real object address\n   *   });\n   *\n   *   console.log(objectData);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Object\n   */\n  async getObjectDataByObjectAddress(args: {\n    objectAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: PaginationArgs & OrderByArg<GetObjectDataQueryResponse[0]>;\n  }): Promise<GetObjectDataQueryResponse[0]> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorType: ProcessorType.OBJECT_PROCESSOR,\n    });\n    return getObjectDataByObjectAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"./account\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Coin } from \"./coin\";\nimport { DigitalAsset } from \"./digitalAsset\";\nimport { Event } from \"./event\";\nimport { Faucet } from \"./faucet\";\nimport { FungibleAsset } from \"./fungibleAsset\";\nimport { General } from \"./general\";\nimport { ANS } from \"./ans\";\nimport { Staking } from \"./staking\";\nimport { Transaction } from \"./transaction\";\nimport { Table } from \"./table\";\nimport { Keyless } from \"./keyless\";\nimport { AptosObject } from \"./object\";\nimport { AccountAbstraction } from \"./account/abstraction\";\n\n/**\n * The main entry point for interacting with the Aptos APIs,\n * providing access to various functionalities organized into\n * distinct namespaces.\n *\n * To utilize the SDK, instantiate a new Aptos object to gain\n * access to the complete range of SDK features.\n *\n * @example\n * ```typescript\n * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n *\n * async function runExample() {\n *     // Create a configuration for connecting to the Aptos testnet\n *     const config = new AptosConfig({ network: Network.TESTNET });\n *\n *     // Initialize the Aptos client with the configuration\n *     const aptos = new Aptos(config);\n *\n *     console.log(\"Aptos client initialized:\", aptos);\n * }\n * runExample().catch(console.error);\n * ```\n * @group Client\n */\nexport class Aptos {\n  readonly config: AptosConfig;\n\n  readonly account: Account;\n\n  readonly ans: ANS;\n\n  readonly coin: Coin;\n\n  readonly digitalAsset: DigitalAsset;\n\n  readonly event: Event;\n\n  readonly faucet: Faucet;\n\n  readonly fungibleAsset: FungibleAsset;\n\n  readonly general: General;\n\n  readonly staking: Staking;\n\n  readonly transaction: Transaction;\n\n  readonly table: Table;\n\n  readonly keyless: Keyless;\n\n  readonly object: AptosObject;\n\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration settings.\n   * This allows you to interact with various Aptos functionalities such as accounts, transactions, and events.\n   *\n   * @param settings - Configuration settings for the Aptos client.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with default settings\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own settings if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Client\n   */\n  constructor(settings?: AptosConfig) {\n    this.config = new AptosConfig(settings);\n    this.account = new Account(this.config);\n    this.abstraction = new AccountAbstraction(this.config);\n    this.ans = new ANS(this.config);\n    this.coin = new Coin(this.config);\n    this.digitalAsset = new DigitalAsset(this.config);\n    this.event = new Event(this.config);\n    this.faucet = new Faucet(this.config);\n    this.fungibleAsset = new FungibleAsset(this.config);\n    this.general = new General(this.config);\n    this.staking = new Staking(this.config);\n    this.transaction = new Transaction(this.config);\n    this.table = new Table(this.config);\n    this.keyless = new Keyless(this.config);\n    this.object = new AptosObject(this.config);\n  }\n}\n\n// extends Aptos interface so all the methods and properties\n// from the other classes will be recognized by typescript.\nexport interface Aptos\n  extends Account,\n    ANS,\n    Coin,\n    DigitalAsset,\n    Event,\n    Faucet,\n    FungibleAsset,\n    General,\n    Keyless,\n    Staking,\n    Table,\n    AptosObject,\n    Omit<Transaction, \"build\" | \"simulate\" | \"submit\" | \"batch\"> {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes\nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine any subclass and the Aptos class.\n * @group Client\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  // Mixin instance methods\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Aptos, Account, \"account\");\napplyMixin(Aptos, AccountAbstraction, \"abstraction\");\napplyMixin(Aptos, ANS, \"ans\");\napplyMixin(Aptos, Coin, \"coin\");\napplyMixin(Aptos, DigitalAsset, \"digitalAsset\");\napplyMixin(Aptos, Event, \"event\");\napplyMixin(Aptos, Faucet, \"faucet\");\napplyMixin(Aptos, FungibleAsset, \"fungibleAsset\");\napplyMixin(Aptos, General, \"general\");\napplyMixin(Aptos, Staking, \"staking\");\napplyMixin(Aptos, Transaction, \"transaction\");\napplyMixin(Aptos, Table, \"table\");\napplyMixin(Aptos, Keyless, \"keyless\");\napplyMixin(Aptos, AptosObject, \"object\");\n"],"names":["jwtDecode","sha3_256","bn254","bytesToNumberBE","FederatedKeylessPublicKey","_FederatedKeylessPublicKey","AccountPublicKey","jwkAddress","keylessPublicKey","AccountAddress","serializer","Serializer","AuthenticationKey","args","verifyKeylessSignatureWithJwkAndConfig","deserializer","KeylessPublicKey","publicKey","verifyKeylessSignature","encode","AnyPublicKey","_AnyPublicKey","AccountPublicKey","publicKey","Ed25519PublicKey","Secp256k1PublicKey","KeylessPublicKey","FederatedKeylessPublicKey","args","message","signature","AnySignature","AuthenticationKey","serializer","deserializer","variantIndex","_AnySignature","Signature","Ed25519Signature","Secp256k1Signature","KeylessSignature","bitCount","byte","n","AbstractMultiKey","AccountPublicKey","args","bits","firstBitInByte","bitmap","dupCheckSet","bit","idx","byteOffset","publicKey","index","pk","MultiKey","_MultiKey","publicKeys","signaturesRequired","AnyPublicKey","message","signature","signerIndices","i","singleSignature","MultiKeySignature","error","AuthenticationKey","serializer","deserializer","keys","anyPublicKey","value","_MultiKeySignature","Signature","signatures","AnySignature","nSignatures","acc","_MultiEd25519PublicKey","AbstractMultiKey","args","publicKeys","threshold","message","signature","MultiEd25519Signature","indices","i","j","index","AuthenticationKey","bytes","Ed25519PublicKey","k","serializer","deserializer","keys","begin","publicKey","MultiEd25519PublicKey","_MultiEd25519Signature","Signature","signatures","bitmap","Ed25519Signature","bits","firstBitInByte","dupCheckSet","bit","byteOffset","byte","AccountAuthenticator","Serializable","deserializer","index","AccountAuthenticatorEd25519","AccountAuthenticatorMultiEd25519","AccountAuthenticatorSingleKey","AccountAuthenticatorMultiKey","AccountAuthenticatorNoAccountAuthenticator","AccountAuthenticatorAbstraction","_AccountAuthenticatorEd25519","public_key","signature","serializer","Ed25519PublicKey","Ed25519Signature","_AccountAuthenticatorMultiEd25519","MultiEd25519PublicKey","MultiEd25519Signature","_AccountAuthenticatorSingleKey","AnyPublicKey","AnySignature","_AccountAuthenticatorMultiKey","public_keys","signatures","MultiKey","MultiKeySignature","_AccountAuthenticatorNoAccountAuthenticator","_AccountAuthenticatorAbstraction","functionInfo","signingMessageDigest","authenticator","accountIdentity","isValidFunctionInfo","Hex","moduleAddress","moduleName","functionName","getFunctionParts","AccountAddress","variant","abstractSignature","abstractPublicKey","sha3Hash","ModuleId","_ModuleId","Serializable","address","name","moduleId","parts","AccountAddress","Identifier","serializer","deserializer","TypeTag","_TypeTag","Serializable","deserializer","address","AccountAddress","moduleName","Identifier","name","typeArgs","StructTag","index","TypeTagBool","TypeTagU8","TypeTagU64","TypeTagU128","TypeTagAddress","TypeTagSigner","TypeTagVector","TypeTagStruct","TypeTagU16","TypeTagU32","TypeTagU256","TypeTagGeneric","_TypeTagBool","serializer","_deserializer","_TypeTagU8","_TypeTagU16","_TypeTagU32","_TypeTagU64","_TypeTagU128","_TypeTagU256","_TypeTagAddress","_TypeTagSigner","TypeTagReference","_TypeTagReference","value","_TypeTagGeneric","_TypeTagVector","_TypeTagStruct","typePredicate","typeArg","structName","_StructTag","module_name","type_args","aptosCoinStructTag","stringStructTag","optionStructTag","objectStructTag","deserializeFromScriptArgument","deserializer","index","U8","U64","U128","AccountAddress","MoveVector","Bool","U16","U32","U256","Serialized","TransactionPayload","Serializable","TransactionPayloadScript","TransactionPayloadEntryFunction","TransactionPayloadMultiSig","_TransactionPayloadScript","script","serializer","Script","_TransactionPayloadEntryFunction","entryFunction","EntryFunction","_TransactionPayloadMultiSig","multiSig","value","MultiSig","_EntryFunction","module_name","function_name","type_args","args","module_id","ModuleId","Identifier","item","TypeTag","length","i","fixedBytesLength","fixedBytes","EntryFunctionBytes","_Script","bytecode","scriptArgument","_MultiSig","multisig_address","transaction_payload","payloadPresent","MultiSigTransactionPayload","_MultiSigTransactionPayload","RawTransaction","_RawTransaction","Serializable","sender","sequence_number","payload","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","serializer","deserializer","AccountAddress","TransactionPayload","ChainId","RawTransactionWithData","index","MultiAgentRawTransaction","FeePayerRawTransaction","_MultiAgentRawTransaction","raw_txn","secondary_signer_addresses","rawTxn","secondarySignerAddresses","_FeePayerRawTransaction","fee_payer_address","feePayerAddress","TransactionAuthenticator","Serializable","deserializer","index","TransactionAuthenticatorEd25519","TransactionAuthenticatorMultiEd25519","TransactionAuthenticatorMultiAgent","TransactionAuthenticatorFeePayer","TransactionAuthenticatorSingleSender","_TransactionAuthenticatorEd25519","public_key","signature","serializer","Ed25519PublicKey","Ed25519Signature","_TransactionAuthenticatorMultiEd25519","MultiEd25519PublicKey","MultiEd25519Signature","_TransactionAuthenticatorMultiAgent","sender","secondary_signer_addresses","secondary_signers","AccountAuthenticator","AccountAddress","_TransactionAuthenticatorFeePayer","fee_payer","address","authenticator","_TransactionAuthenticatorSingleSender","SignedTransaction","_SignedTransaction","Serializable","raw_txn","authenticator","serializer","deserializer","RawTransaction","TransactionAuthenticator","SimpleTransaction","_SimpleTransaction","Serializable","rawTransaction","feePayerAddress","serializer","deserializer","RawTransaction","feePayerPresent","AccountAddress","MultiAgentTransaction","_MultiAgentTransaction","Serializable","rawTransaction","secondarySignerAddresses","feePayerAddress","serializer","deserializer","RawTransaction","AccountAddress","feePayerPresent","deriveTransactionType","transaction","FeePayerRawTransaction","MultiAgentRawTransaction","generateSigningMessage","bytes","domainSeparator","hash","sha3Hash","prefix","body","mergedArray","generateSigningMessageForSerializable","serializable","generateSigningMessageForTransaction","rawTxn","RAW_TRANSACTION_WITH_DATA_SALT","RAW_TRANSACTION_SALT","Ed25519Account","_Ed25519Account","args","privateKey","address","AccountAddress","Ed25519PrivateKey","path","mnemonic","message","AccountAuthenticatorEd25519","transaction","generateSigningMessageForTransaction","isSingleKeySigner","obj","SingleKeyAccount","_SingleKeyAccount","args","privateKey","address","AnyPublicKey","AccountAddress","scheme","Ed25519PrivateKey","Secp256k1PrivateKey","path","mnemonic","message","AccountAuthenticatorSingleKey","transaction","AnySignature","generateSigningMessageForTransaction","account","Account","args","scheme","legacy","Ed25519Account","SingleKeyAccount","privateKey","address","Ed25519PrivateKey","mnemonic","path","publicKey","randomBytes","TWO_WEEKS_IN_SECONDS","_EphemeralKeyPair","Serializable","args","privateKey","expiryDateSecs","blinder","EphemeralPublicKey","floorToWholeHour","nowInSeconds","Hex","generateBlinder","fields","padAndPackBytesWithLen","bytesToBigIntLE","nonceHash","poseidonHash","serializer","deserializer","variantIndex","Ed25519PrivateKey","bytes","Deserializer","data","EphemeralSignature","EphemeralKeyPair","randomBytes","EventEmitter","jwtDecode","isKeylessSigner","obj","_AbstractKeylessAccount","Serializable","args","address","ephemeralKeyPair","publicKey","uidKey","uidVal","aud","pepper","proof","proofFetchCallback","jwt","verificationKeyHash","AccountAddress","EventEmitter","ZeroKnowledgeSig","status","pepperBytes","Hex","AnyPublicKey","promise","error","serializer","deserializer","EphemeralKeyPair","message","signature","AnySignature","AccountAuthenticatorSingleKey","transaction","aptosConfig","KeylessError","header","jwtDecode","verificationKey","getKeylessConfig","expiryDateSecs","ephemeralPublicKey","ephemeralSignature","KeylessSignature","base64UrlDecode","EphemeralCertificate","raw","deriveTransactionType","signMess","TransactionAndProof","fetchJWK","AbstractKeylessAccount","generateSigningMessage","KeylessAccount","_KeylessAccount","AbstractKeylessAccount","args","publicKey","KeylessPublicKey","serializer","deserializer","address","proof","ephemeralKeyPair","jwt","uidKey","pepper","verificationKeyHash","iss","aud","uidVal","getIssAudAndUidVal","bytes","Deserializer","Hex","proofFetchCallback","verificationKey","FederatedKeylessAccount","_FederatedKeylessAccount","AbstractKeylessAccount","args","publicKey","FederatedKeylessPublicKey","serializer","deserializer","address","proof","ephemeralKeyPair","jwt","uidKey","pepper","verificationKeyHash","jwkAddress","AccountAddress","iss","aud","uidVal","getIssAudAndUidVal","bytes","Deserializer","proofFetchCallback","verificationKey","MultiKeyAccount","_MultiKeyAccount","args","multiKey","address","signers","signer","Ed25519Account","SingleKeyAccount","AccountAddress","bitPositions","signersAndBitPosition","index","b","value","publicKeys","signaturesRequired","MultiKey","account","message","AccountAuthenticatorMultiKey","transaction","promises","AbstractKeylessAccount","aptosConfig","data","signatures","MultiKeySignature","MultiEd25519Account","args","signers","publicKey","address","AccountAddress","bitPositions","signer","signersAndBitPosition","index","b","value","message","AccountAuthenticatorMultiEd25519","transaction","signatures","MultiEd25519Signature","generateSigningMessageForTransaction","deserializeSchemeAndAddress","deserializer","signingScheme","SigningScheme","AccountAddress","serializeKeylessAccountCommon","account","serializer","deserializeKeylessAccountCommon","deserializer","jwt","uidKey","pepper","ephemeralKeyPair","EphemeralKeyPair","proof","ZeroKnowledgeSig","verificationKeyHash","AccountUtils","toBytes","Serializer","isSingleKeySigner","anyPublicKey","federatedKeylessAccount","multiKeyAccount","signer","toHexStringWithoutPrefix","Hex","toHexString","deserialize","address","signingScheme","deserializeSchemeAndAddress","privateKey","Ed25519PrivateKey","Ed25519Account","variantIndex","SingleKeyAccount","Secp256k1PrivateKey","keylessComponents","jwtClaims","getIssAudAndUidVal","KeylessAccount","jwkAddress","AccountAddress","audless","FederatedKeylessAccount","multiKey","MultiKey","length","signers","i","MultiKeyAccount","keylessAccountFromHex","hex","fromHex","federatedKeylessAccountFromHex","multiKeyAccountFromHex","singleKeyAccountFromHex","ed25519AccountFromHex","Deserializer","fromBytes","bytes","sha3_256","AbstractedAccount","_AbstractedAccount","Account","signer","accountAddress","authenticationFunction","isValidFunctionInfo","AbstractPublicKey","digest","AbstractSignature","serializer","Serializer","message","AccountAuthenticatorAbstraction","sha3_256","transaction","generateSigningMessageForTransaction","sha3_256","_DerivableAbstractedAccount","AbstractedAccount","signer","authenticationFunction","abstractPublicKey","daaAccountAddress","AccountAddress","functionInfo","accountIdentifier","isValidFunctionInfo","moduleAddress","moduleName","functionName","hash","sha3_256","serializer","Serializer","s2","message","AccountAuthenticatorAbstraction","DerivableAbstractedAccount","sha3Hash","isValidIdentifier","str","isValidWhitespaceCharacter","char","isGeneric","isRef","isPrimitive","consumeWhitespace","tagStr","pos","i","innerChar","TypeTagParserErrorType","TypeTagParserError","typeTagStr","invalidReason","parseTypeTag","typeStr","options","allowGenerics","saved","innerTypes","curTypes","cur","currentStr","expectedTypes","newType","parseTypeTagInner","savedPop","savedStr","savedTypes","savedExpectedTypes","parsedTypeTag","nextChar","types","trimmedStr","lowerCaseTrimmed","TypeTagSigner","TypeTagBool","TypeTagAddress","TypeTagU8","TypeTagU16","TypeTagU32","TypeTagU64","TypeTagU128","TypeTagU256","TypeTagVector","actualType","TypeTagReference","TypeTagGeneric","structParts","address","AccountAddress","TypeTagStruct","StructTag","Identifier","isBool","arg","isString","isNumber","convertNumber","isLargeNumber","isEmptyOption","isEncodedEntryFunctionArgument","isBcsBool","isBcsU8","isBcsU16","isBcsU32","isBcsU64","isBcsU128","isBcsU256","isBcsAddress","isBcsString","isBcsFixedBytes","MoveVector","MoveOption","Bool","AccountAddress","MoveString","FixedBytes","U8","U16","U32","U64","U128","U256","isScriptDataInput","throwTypeMismatch","expectedType","position","findFirstNonSignerArg","functionAbi","index","param","TEXT_ENCODER","standardizeTypeTags","typeArguments","typeArg","isString","parseTypeTag","fetchModuleAbi","moduleAddress","moduleName","aptosConfig","getModule","fetchFunctionAbi","functionName","moduleAbi","func","fetchMoveFunctionAbi","functionAbi","params","i","fetchEntryFunctionAbi","numSigners","findFirstNonSignerArg","fetchViewFunctionAbi","returnTypes","convertCallArgument","argument","position","genericTypeParams","CallArgument","convertArgument","functionAbiOrModuleAbi","arg","options","param","checkOrConvertArgument","isEncodedEntryFunctionArgument","checkType","parseArg","isBool","Bool","throwTypeMismatch","AccountAddress","num","convertNumber","U8","U16","U32","isLargeNumber","U64","U128","U256","genericIndex","MoveVector","item","MoveString","FixedBytes","isEmptyOption","innerParam","TypeTagBool","MoveOption","TypeTagAddress","TypeTagU8","TypeTagU16","TypeTagU32","TypeTagU64","TypeTagU128","TypeTagU256","s","isBcsBool","isBcsAddress","isBcsU8","isBcsU16","isBcsU32","isBcsU64","isBcsU128","isBcsU256","TypeTagStruct","isBcsString","generateTransactionPayload","args","isScriptDataInput","generateTransactionPayloadScript","moduleAddress","moduleName","functionName","getFunctionParts","functionAbi","fetchAbi","fetchEntryFunctionAbi","generateTransactionPayloadWithABI","typeArguments","standardizeTypeTags","functionArguments","arg","i","convertArgument","entryFunctionPayload","EntryFunction","multisigAddress","AccountAddress","TransactionPayloadMultiSig","MultiSig","MultiSigTransactionPayload","TransactionPayloadEntryFunction","generateViewFunctionPayload","fetchViewFunctionAbi","generateViewFunctionPayloadWithABI","TransactionPayloadScript","Script","Hex","generateRawTransaction","aptosConfig","sender","payload","options","feePayerAddress","getChainId","NetworkToChainId","getLedgerInfo","getGasUnitPrice","getGasPriceEstimation","getSequenceNumberForAny","getSequenceNumber","getInfo","chainId","gasEstimate","sequenceNumber","maxGasAmount","gasUnitPrice","expireTimestamp","RawTransaction","ChainId","buildTransaction","rawTxn","signers","signer","MultiAgentTransaction","SimpleTransaction","generateSignedTransactionForSimulation","signerPublicKey","transaction","secondarySignersPublicKeys","feePayerPublicKey","accountAuthenticator","getAuthenticatorForSimulation","transactionToSign","FeePayerRawTransaction","secondaryAccountAuthenticators","publicKey","feePayerAuthenticator","transactionAuthenticator","TransactionAuthenticatorFeePayer","SignedTransaction","MultiAgentRawTransaction","TransactionAuthenticatorMultiAgent","AccountAuthenticatorEd25519","TransactionAuthenticatorEd25519","AccountAuthenticatorSingleKey","AccountAuthenticatorMultiKey","TransactionAuthenticatorSingleSender","AccountAuthenticatorNoAccountAuthenticator","accountPublicKey","KeylessPublicKey","FederatedKeylessPublicKey","Secp256k1PublicKey","AnyPublicKey","invalidSignature","Ed25519Signature","Ed25519PublicKey","AnySignature","KeylessSignature","MultiKey","MultiKeySignature","pubKey","_","generateSignedTransaction","additionalSignersAuthenticators","senderAuthenticator","normalizeBundle","AccountAuthenticator","txnAuthenticator","AccountAuthenticatorMultiEd25519","TransactionAuthenticatorMultiEd25519","hashValues","input","hash","sha3Hash","item","TRANSACTION_PREFIX","generateUserTransactionHash","signedTransaction","key","abi","fetch","memoizeAsync","ScriptComposerWasm","AptosScriptComposer","_AptosScriptComposer","aptosConfig","module","TransactionComposer","initSync","ScriptComposerWasm","input","moduleAddress","moduleName","functionName","getFunctionParts","nodeUrl","typeArgument","typeArguments","standardizeTypeTags","moduleAbi","fetchModuleAbi","functionAbi","func","functionArguments","arg","i","CallArgument","convertArgument","generateTransaction","args","payload","buildTransactionPayload","buildRawTransaction","aptosConfig","data","generateTransactionPayloadData","generateTransactionPayload","sender","options","feePayerAddress","isFeePayerTransactionInput","AccountAddress","isMultiAgentTransactionInput","secondarySignerAddresses","buildTransaction","getSigningMessage","transaction","generateSigningMessageForTransaction","signTransaction","signer","signAsFeePayer","simulateTransaction","signerPublicKey","secondarySignersPublicKeys","feePayerPublicKey","signedTransaction","generateSignedTransactionForSimulation","postAptosFullNode","submitTransaction","generateSignedTransaction","e","signedTxn","SignedTransaction","Deserializer","KeylessPublicKey","FederatedKeylessPublicKey","AbstractKeylessAccount","signAndSubmitTransaction","feePayer","isKeylessSigner","feePayerAuthenticator","senderAuthenticator","signAndSubmitAsFeePayer","packagePublishAbi","TypeTagVector","publicPackageTransaction","account","metadataBytes","moduleBytecode","totalByteCode","bytecode","MoveVector","getInfo","args","getModules","aptosConfig","accountAddress","options","paginateWithObfuscatedCursor","AccountAddress","getModulesPage","response","cursor","getPageWithObfuscatedCursor","getModule","getTransactions","paginateWithCursor","getResources","getResourcesPage","getResource","resourceType","data","getAptosFullNode","lookupOriginalAccountAddress","authenticationKey","resource","handle","authKeyAddress","originalAddress","getTableItem","err","AptosApiError","getAccountTokensCount","whereCondition","queryIndexer","GetAccountTokensCount","getAccountOwnedTokens","graphqlQuery","GetAccountOwnedTokens","getAccountOwnedTokensFromCollectionAddress","collectionAddress","ownerAddress","collAddress","GetAccountOwnedTokensFromCollection","getAccountCollectionsWithOwnedTokens","GetAccountCollectionsWithOwnedTokens","getAccountTransactionsCount","address","GetAccountTransactionsCount","getAccountCoinAmount","coinType","faMetadataAddress","coinAssetType","faAddress","APTOS_COIN","createObjectAddress","addr","where","getAccountCoinsData","GetAccountCoinsData","getAccountCoinsCount","GetAccountCoinsCount","getAccountOwnedObjects","GetObjectData","deriveAccountFromPrivateKey","privateKey","publicKey","AnyPublicKey","Secp256k1PrivateKey","AuthenticationKey","Account","Ed25519PrivateKey","legacyAuthKey","isAccountExist","singleSenderTransactionAuthenticatorAuthKey","authKey","error","rotateAuthKeyAbi","TypeTagU8","TypeTagVector","rotateAuthKey","fromAccount","dangerouslySkipVerification","rotateAuthKeyWithChallenge","Ed25519Account","MultiEd25519Account","pendingTxn","rotateAuthKeyUnverified","rotateAuthKeyTxnResponse","waitForTransaction","verificationTxn","generateTransaction","signAndSubmitTransaction","accountInfo","newAccount","challengeHex","RotationProofChallenge","proofSignedByCurrentKey","proofSignedByNewKey","rawTxn","U8","MoveVector","rotateAuthKeyUnverifiedAbi","toAuthKey","view","args","aptosConfig","payload","options","viewFunctionPayload","generateViewFunctionPayload","serializer","Serializer","bytes","data","postAptosFullNode","viewJson","addAuthenticationFunctionTransaction","args","aptosConfig","sender","authenticationFunction","options","moduleAddress","moduleName","functionName","getFunctionParts","generateTransaction","TypeTagAddress","TypeTagStruct","stringStructTag","removeAuthenticationFunctionTransaction","removeDispatchableAuthenticatorTransaction","AccountAbstraction","config","args","functionInfos","moduleAddress","moduleName","functionName","getFunctionParts","functionInfo","AccountAddress","accountAddress","authenticationFunction","options","addAuthenticationFunctionTransaction","removeAuthenticationFunctionTransaction","removeDispatchableAuthenticatorTransaction","functionInfoOption","view","TypeTagAddress","Account","config","AccountAbstraction","args","getInfo","getModules","getModulesPage","getModule","getTransactions","getResources","getResourcesPage","getResource","lookupOriginalAccountAddress","waitForIndexerOnVersion","getAccountTokensCount","getAccountOwnedTokens","getAccountOwnedTokensFromCollectionAddress","getAccountCollectionsWithOwnedTokens","getAccountTransactionsCount","getAccountCoinsData","getAccountCoinsCount","APTOS_COIN","APTOS_FA","accountAddress","coinType","faMetadataAddress","minimumLedgerVersion","coinAssetType","memoizeAsync","pairedCoinTypeStruct","view","isEncodedStruct","parseEncodedStruct","faAddress","AccountAddress","createObjectAddress","addr","balanceStr","getAccountOwnedObjects","deriveAccountFromPrivateKey","coinTransferAbi","TypeTagAddress","TypeTagU64","transferCoinTransaction","args","aptosConfig","sender","recipient","amount","coinType","options","generateTransaction","APTOS_COIN","Coin","config","args","transferCoinTransaction","PropertyTypeMap","defaultDigitalAssetType","getDigitalAssetData","args","aptosConfig","digitalAssetAddress","whereCondition","AccountAddress","queryIndexer","GetTokenData","getCurrentDigitalAssetOwnership","GetCurrentTokenOwnership","getOwnedDigitalAssets","ownerAddress","options","graphqlQuery","getDigitalAssetActivity","GetTokenActivity","createCollectionAbi","TypeTagStruct","stringStructTag","TypeTagU64","TypeTagBool","createCollectionTransaction","creator","generateTransaction","MoveString","U64","MAX_U64_BIG_INT","Bool","getCollectionData","GetCollectionData","getCollectionDataByCreatorAddressAndCollectionName","creatorAddress","collectionName","address","getCollectionDataByCreatorAddress","getCollectionDataByCollectionId","collectionId","getCollectionId","mintDigitalAssetAbi","TypeTagVector","mintDigitalAssetTransaction","collection","description","name","uri","propertyKeys","propertyTypes","propertyValues","convertedPropertyType","type","MoveVector","getPropertyValueRaw","transferDigitalAssetAbi","objectStructTag","TypeTagGeneric","TypeTagAddress","transferDigitalAssetTransaction","sender","recipient","digitalAssetType","mintSoulBoundAbi","mintSoulBoundTransaction","account","burnDigitalAssetAbi","burnDigitalAssetTransaction","freezeDigitalAssetAbi","freezeDigitalAssetTransferTransaction","unfreezeDigitalAssetAbi","unfreezeDigitalAssetTransferTransaction","setDigitalAssetDescriptionAbi","setDigitalAssetDescriptionTransaction","setDigitalAssetNameAbi","setDigitalAssetNameTransaction","setDigitalAssetURIAbi","setDigitalAssetURITransaction","addDigitalAssetPropertyAbi","addDigitalAssetPropertyTransaction","propertyKey","propertyType","propertyValue","getSinglePropertyValueRaw","removeDigitalAssetPropertyAbi","removeDigitalAssetPropertyTransaction","updateDigitalAssetPropertyAbi","updateDigitalAssetPropertyTransaction","addDigitalAssetTypedPropertyAbi","addDigitalAssetTypedPropertyTransaction","updateDigitalAssetTypedPropertyAbi","updateDigitalAssetTypedPropertyTransaction","results","typ","index","typeTag","parseTypeTag","checkOrConvertArgument","DigitalAsset","config","args","waitForIndexerOnVersion","creatorAddress","collectionName","options","address","AccountAddress","whereCondition","getCollectionData","getCollectionDataByCreatorAddressAndCollectionName","getCollectionDataByCreatorAddress","getCollectionDataByCollectionId","getCollectionId","getDigitalAssetData","getCurrentDigitalAssetOwnership","getOwnedDigitalAssets","getDigitalAssetActivity","createCollectionTransaction","mintDigitalAssetTransaction","transferDigitalAssetTransaction","mintSoulBoundTransaction","burnDigitalAssetTransaction","freezeDigitalAssetTransferTransaction","unfreezeDigitalAssetTransferTransaction","setDigitalAssetDescriptionTransaction","setDigitalAssetNameTransaction","setDigitalAssetURITransaction","addDigitalAssetPropertyTransaction","removeDigitalAssetPropertyTransaction","updateDigitalAssetPropertyTransaction","addDigitalAssetTypedPropertyTransaction","updateDigitalAssetTypedPropertyTransaction","MAX_EVENT_TYPE_LENGTH","checkEventTypeLength","eventType","getModuleEventsByEventType","args","aptosConfig","options","whereCondition","getEvents","getAccountEventsByCreationNumber","accountAddress","creationNumber","AccountAddress","getAccountEventsByEventType","graphqlQuery","GetEvents","queryIndexer","Event","config","args","waitForIndexerOnVersion","getModuleEventsByEventType","getAccountEventsByCreationNumber","getAccountEventsByEventType","getEvents","fundAccount","args","aptosConfig","accountAddress","amount","options","timeout","data","postAptosFaucet","AccountAddress","txnHash","res","waitForTransaction","Faucet","config","args","fundTxn","fundAccount","waitForIndexer","getFungibleAssetMetadata","args","aptosConfig","options","graphqlQuery","GetFungibleAssetMetadata","queryIndexer","getFungibleAssetActivities","GetFungibleAssetActivities","getCurrentFungibleAssetBalances","GetCurrentFungibleAssetBalances","faTransferAbi","parseTypeTag","TypeTagAddress","TypeTagU64","transferFungibleAsset","sender","fungibleAssetMetadataAddress","recipient","amount","generateTransaction","transferFungibleAssetBetweenStores","fromStore","toStore","FungibleAsset","config","args","waitForIndexerOnVersion","getFungibleAssetMetadata","AccountAddress","getFungibleAssetActivities","getCurrentFungibleAssetBalances","transferFungibleAsset","transferFungibleAssetBetweenStores","General","config","getLedgerInfo","args","getBlockByVersion","getBlockByHeight","view","viewJson","getChainTopUserTransactions","queryIndexer","getIndexerLastSuccessVersion","processorType","getProcessorStatus","VALIDATION_RULES_DESCRIPTION","isValidANSSegment","fragment","isValidANSName","name","first","second","rest","SubdomainExpirationPolicy","isActiveANSName","isTLDExpired","isExpired","LOCAL_ANS_ACCOUNT_PK","LOCAL_ANS_ACCOUNT_ADDRESS","NetworkToAnsContract","getRouterAddress","aptosConfig","address","unwrapOption","option","getOwnerAddress","args","routerAddress","domainName","subdomainName","res","view","owner","AccountAddress","registerName","expiration","sender","targetAddress","toAddress","options","transferable","hasSubdomainPolicy","years","registrationDuration","generateTransaction","tldExpiration","getExpiration","expirationDateInMillisecondsSinceEpoch","getPrimaryName","setPrimaryName","getTargetAddress","target","setTargetAddress","getName","queryIndexer","GetNames","sanitizeANSName","getAccountNames","accountAddress","expirationDate","getANSExpirationDate","getAccountDomains","getAccountSubdomains","getDomainSubdomains","domain","gracePeriodInSeconds","gracePeriodInDays","now","renewDomain","renewalDuration","ANS","config","args","getOwnerAddress","getExpiration","getTargetAddress","setTargetAddress","getPrimaryName","setPrimaryName","registerName","renewDomain","getName","getAccountNames","getAccountDomains","getAccountSubdomains","getDomainSubdomains","getNumberOfDelegators","args","aptosConfig","poolAddress","address","AccountAddress","data","queryIndexer","GetNumberOfDelegators","getNumberOfDelegatorsForAllPools","options","query","getDelegatedStakingActivities","delegatorAddress","GetDelegatedStakingActivities","Staking","config","args","waitForIndexerOnVersion","getNumberOfDelegators","getNumberOfDelegatorsForAllPools","getDelegatedStakingActivities","Build","config","args","generateTransaction","composer","AptosScriptComposer","bytes","rawTxn","generateRawTransaction","TransactionPayloadScript","Deserializer","SimpleTransaction","AccountAddress","Simulate","config","args","simulateTransaction","__decorateClass","ValidateFeePayerDataOnSimulation","Submit","config","args","submitTransaction","__decorateClass","ValidateFeePayerDataOnSubmission","EventEmitter","AccountSequenceNumber","aptosConfig","account","maxWaitTime","maximumInFlight","sleepTime","sleep","nextNumber","startTime","nowInSeconds","e","sequenceNumber","getInfo","EventEmitter","promiseFulfilledStatus","TransactionWorkerEventsEnum","TransactionWorker","EventEmitter","aptosConfig","account","maxWaitTime","maximumInFlight","sleepTime","AsyncQueue","AccountSequenceNumber","sequenceNumber","transaction","pendingTransaction","signAndSubmitTransaction","error","AsyncQueueCancelledError","awaitingTransactions","sequenceNumbers","sentTransactions","i","sentTransaction","waitFor","waitForTransaction","executedTransaction","transactionData","options","generateTransaction","TransactionManagement","EventEmitter","config","args","sender","TransactionWorker","data","options","d","error","Transaction","config","Build","Simulate","Submit","TransactionManagement","args","getTransactions","getTransactionByVersion","getTransactionByHash","isTransactionPending","waitForTransaction","getGasPriceEstimation","getSigningMessage","publicPackageTransaction","rotateAuthKey","signTransaction","signAsFeePayer","sender","data","options","error","signAndSubmitTransaction","signAndSubmitAsFeePayer","jwtDecode","getPepper","args","aptosConfig","jwt","ephemeralKeyPair","uidKey","derivationPath","body","Hex","data","postAptosPepperService","getProof","pepper","maxExpHorizonSecs","getKeylessConfig","KeylessAccount","decodedJwt","jwtDecode","json","postAptosProvingService","proofPoints","groth16Zkp","Groth16Zkp","ZeroKnowledgeSig","ZkProof","EphemeralSignature","deriveKeylessAccount","jwkAddress","proofFetchCallback","verificationKey","proofPromise","proof","publicKey","FederatedKeylessPublicKey","address","lookupOriginalAccountAddress","FederatedKeylessAccount","KeylessPublicKey","updateFederatedKeylessJwkSetTransaction","sender","iss","options","jwksUrl","FIREBASE_AUTH_ISS_PATTERN","response","error","errorMessage","KeylessError","jwks","generateTransaction","MoveVector","key","Keyless","config","args","getPepper","getProof","deriveKeylessAccount","updateFederatedKeylessJwkSetTransaction","getObjectData","args","aptosConfig","options","graphqlQuery","GetObjectData","queryIndexer","getObjectDataByObjectAddress","objectAddress","whereCondition","AccountAddress","AptosObject","config","args","waitForIndexerOnVersion","getObjectDataByObjectAddress","Aptos","settings","AptosConfig","Account","AccountAbstraction","ANS","Coin","DigitalAsset","Event","Faucet","FungibleAsset","General","Staking","Transaction","Table","Keyless","AptosObject","applyMixin","targetClass","baseClass","baseClassProp","propertyName","propertyDescriptor","args","EPK_HORIZON_SECS","MAX_AUD_VAL_BYTES","MAX_UID_KEY_BYTES","MAX_UID_VAL_BYTES","MAX_ISS_VAL_BYTES","MAX_EXTRA_FIELD_BYTES","MAX_JWT_HEADER_B64_BYTES","MAX_COMMITED_EPK_BYTES","_KeylessPublicKey","AccountPublicKey","iss","idCommitment","idcBytes","Hex","serializer","Serializer","AuthenticationKey","args","verifyKeylessSignatureWithJwkAndConfig","error","KeylessError","verifyKeylessSignature","deserializer","addressSeed","publicKey","computeIdCommitment","jwt","pepper","uidKey","jwtPayload","jwtDecode","uidVal","KeylessPublicKey","aptosConfig","message","signature","jwk","keylessConfig","getKeylessConfig","options","KeylessSignature","fetchJWK","verificationKey","maxExpHorizonSecs","trainingWheelsPubkey","ZeroKnowledgeSig","zkSig","Groth16Zkp","groth16Proof","nowInSeconds","publicInputsHash","getPublicInputsHash","proofAndStatement","Groth16ProofAndStatement","innerKeylessPublicKey","proof","fields","padAndPackBytesWithLen","bytesToBigIntLE","hashStrToField","encode","poseidonHash","kid","keylessPubKey","allJWKs","jwkAddr","FederatedKeylessPublicKey","getKeylessJWKs","jwksForIssuer","key","aud","bigIntToBytesLE","_KeylessSignature","Signature","jwtHeader","ephemeralCertificate","expiryDateSecs","ephemeralPublicKey","ephemeralSignature","parseJwtHeader","EphemeralCertificate","EphemeralPublicKey","EphemeralSignature","ZkProof","Ed25519PublicKey","Ed25519Signature","_EphemeralCertificate","variant","_G1Bytes","Serializable","data","bytes","point","yFlag","Fp","bn254","x","bytesToBn254FpBE","y","negY","yToUse","G1Bytes","result","bytesToNumberBE","_G2Bytes","x0","x1","Fp2","G2Bytes","_Groth16Zkp","Proof","a","b","c","_Groth16ProofAndStatement","generateSigningMessage","_ZkProof","_ZeroKnowledgeSig","expHorizonSecs","trainingWheelsSignature","extraField","overrideAudVal","Deserializer","KeylessConfiguration","_KeylessConfiguration","maxExtraFieldBytes","maxJwtHeaderB64Bytes","maxIssValBytes","maxCommitedEpkBytes","res","config","Groth16VerificationKey","_Groth16VerificationKey","alphaG1","betaG2","deltaG2","gammaAbcG1","gammaG2","sha3_256","proofA","proofB","proofC","vkAlpha1","vkBeta2","vkGamma2","vkDelta2","vkIC","g1","Fp12","accum","pairingAccumGamma","pairingAB","pairingAlphaBeta","pairingCDelta","product","memoizeAsync","vk","getKeylessConfigurationResource","getGroth16VerificationKeyResource","getIssAudAndUidVal","getErrorMessage","resourceType","getAptosFullNode","AccountAddress","resource","jwkMap","entry","jwks","jwkStruct","jwkData","MoveJWK","hexToAsciiString","_MoveJWK","kty","alg","e","n","struct","uint8Array","base64UrlToBytes","scalars","chunkInto24Bytes","chunk","chunks","i","paddedChunk","header"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"debugId":null}},
    {"offset": {"line": 10976, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-UYVPNUH3.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-UYVPNUH3.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10984, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-G3MHXDYA.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-G3MHXDYA.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10992, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-NECL5FCQ.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-NECL5FCQ.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11000, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-4QMXOWHP.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-4QMXOWHP.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11008, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/src/types/abstraction.ts"],"sourcesContent":["/**\n * The variant for the AbstractionAuthData enum.\n */\nexport enum AbstractionAuthDataVariant {\n  V1 = 0,\n  DerivableV1 = 1,\n}\n"],"names":["AbstractionAuthDataVariant"],"mappings":";;;AAGO,IAAKA,IAAAA,CAAAA,CAAAA,IAAAA,CACVA,CAAAA,CAAAA,EAAA,EAAA,GAAK,EAAA,GAAL,MACAA,CAAAA,CAAAA,EAAA,WAAA,GAAc,EAAA,GAAd,eAFUA,CAAAA,CAAAA,EAAAA,KAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11020, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-V3MBJJTL.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-V3MBJJTL.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11028, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-7ECCT6PK.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-7ECCT6PK.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11036, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-HGLO5LDS.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-HGLO5LDS.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11044, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-FZY4PMEE.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-FZY4PMEE.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11052, "column": 0}, "map": {"version":3,"sources":["file:///home/enliven/Desktop/aptos/aptopos/node_modules/petra-plugin-wallet-adapter/node_modules/%40aptos-labs/ts-sdk/dist/esm/chunk-4WPQQPUF.mjs"],"sourcesContent":["//# sourceMappingURL=chunk-4WPQQPUF.mjs.map"],"names":[],"mappings":"AAAA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11060, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}